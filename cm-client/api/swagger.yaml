---
swagger: "2.0"
info:
  description: "<h1>Cloudera Manager API v32</h1>\n      <p>Introduced in Cloudera\
    \ Manager 6.2.0</p>\n      <p><a href=\"http://www.cloudera.com/documentation.html\"\
    >Cloudera Product Documentation</a></p>"
  version: "6.2.0"
  title: "Cloudera Manager API"
basePath: "/api/v32"
tags:
- name: "ActivitiesResource"
- name: "AllHostsResource"
- name: "AuditsResource"
- name: "AuthRoleMetadatasResource"
- name: "AuthRolesResource"
- name: "AuthServiceResource"
  description: "."
- name: "AuthServiceRoleCommandsResource"
- name: "AuthServiceRoleConfigGroupsResource"
- name: "AuthServiceRolesResource"
- name: "BatchResource"
- name: "ClouderaManagerResource"
- name: "ClustersResource"
- name: "CmPeersResource"
- name: "CommandsResource"
- name: "DashboardsResource"
- name: "DataContextsResource"
- name: "EventsResource"
- name: "ExternalAccountsResource"
  description: "Manage external accounts used by various Cloudera Manager features,\
    \ for\nperforming external tasks."
- name: "ExternalUserMappingsResource"
- name: "HostTemplatesResource"
- name: "HostsResource"
- name: "ImpalaQueriesResource"
- name: "MgmtRoleCommandsResource"
- name: "MgmtRoleConfigGroupsResource"
- name: "MgmtRolesResource"
- name: "MgmtServiceResource"
- name: "NameservicesResource"
- name: "ParcelResource"
  description: "This interface describes a parcel resource and all the operations\
    \ that can\nbe performed on it."
- name: "ParcelsResource"
- name: "ProcessResource"
- name: "ReplicationsResource"
- name: "RoleCommandsResource"
- name: "RoleConfigGroupsResource"
- name: "RolesResource"
- name: "ServicesResource"
- name: "SnapshotsResource"
  description: "Available since API v6."
- name: "TimeSeriesResource"
- name: "ToolsResource"
- name: "UsersResource"
- name: "WatchedDirResource"
- name: "YarnApplicationsResource"
security:
- basic: []
paths:
  /clusters/{clusterName}/services/{serviceName}/activities:
    get:
      tags:
      - "ActivitiesResource"
      summary: "Read all activities in the system."
      description: "Read all activities in the system"
      operationId: "readActivities"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "maxResults"
        in: "query"
        description: "The maximum number of activities to return."
        required: false
        type: "integer"
        default: 100
        x-exportParamName: "MaxResults"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "The query to perform to find activities in the system. By default,\n\
          this call returns top level (i.e. root) activities that have currently\n\
          started.\n<p>\nThe query specifies the intersection of a list of constraints,\n\
          joined together with semicolons (without spaces). For example:\n</p>\n<dl>\n\
          <dt>status==started;parent==</dt>\n<dd>looks for running root activities.\
          \ This is also the\ndefault query.</dd>\n<dt>status==failed;finishTime=gt=2012-04-01T20:30:00.000Z</dt>\n\
          <dd>looks for failed activities after the given date time.</dd>\n<dt>name==Pi\
          \ Estimator;startTime=gt=2012-04-01T20:30:00.000Z</dt>\n<dd>looks for activities\
          \ started after the given date time,\nwith the name of \"Pi Estimator\"\
          .</dd>\n<dt>startTime=lt=2012-01-02T00:00:00.000Z;finishTime=ge=2012-01-01T00:00:00.000Z</dt>\n\
          <dd>looks for activities that are active on 2012 New Year's Day.\nNote that\
          \ they may start before or finish after that day.</dd>\n<dt>status==failed;parent==000014-20120425161321-oozie-joe</dt>\n\
          <dd>looks for failed child activities of the given parent\nactivity id.</dd>\n\
          <dt>status==started;metrics.cpu_user=gt=10</dt>\n<dd>looks for started activities\
          \ that are using more than 10 cores\nper second.</dd>\n<dt>type==hive;metrics.user==bc;finishTime=gt=2012-04-01T20:30:00.000Z</dt>\n\
          <dd>looks for all hive queries submitted by user bc after the\ngiven date\
          \ time.</dd>\n</dl>\n\nYou may query any fields present in the ApiActivity\
          \ object. You can\nalso query by activity metric values using the <em>metrics.*</em>\n\
          syntax. Values for date time fields should be ISO8601 timestamps.\n<p>\n\
          The valid comparators are <em>==</em>, <em>!=</em>, <em>=lt=</em>,\n<em>=le=</em>,\
          \ <em>=ge=</em>, and <em>=gt=</em>.\nThey stand for \"==\", \"!=\", \"&lt;\"\
          , \"&lt;=\",\n\"&gt;=\", \"&gt;\" respectively."
        required: false
        type: "string"
        default: "status==started;parent=="
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "resultOffset"
        in: "query"
        description: "Specified the offset of activities to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "ResultOffset"
        x-optionalDataType: "Int32"
      - name: "view"
        in: "query"
        description: "The view of the activities to materialize"
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiActivityList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "UNKNOWN"
                parent: "..."
                startTime: "..."
                finishTime: "..."
                id: "..."
                status: "ASSUMED_SUCCEEDED"
                user: "..."
                group: "..."
                inputDir: "..."
                outputDir: "..."
                mapper: "..."
                combiner: "..."
                reducer: "..."
                queueName: "..."
                schedulerPriority: "..."
              - name: "..."
                type: "HIVE"
                parent: "..."
                startTime: "..."
                finishTime: "..."
                id: "..."
                status: "SUSPENDED"
                user: "..."
                group: "..."
                inputDir: "..."
                outputDir: "..."
                mapper: "..."
                combiner: "..."
                reducer: "..."
                queueName: "..."
                schedulerPriority: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/activities/{activityId}:
    get:
      tags:
      - "ActivitiesResource"
      summary: "Returns a specific activity in the system."
      description: "Returns a specific activity in the system"
      operationId: "readActivity"
      produces:
      - "application/json"
      parameters:
      - name: "activityId"
        in: "path"
        description: "The id of the activity to retrieve"
        required: true
        type: "string"
        x-exportParamName: "ActivityId"
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view of the activity to materialize"
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiActivity"
          examples:
            application/json:
              name: "..."
              type: "PIG"
              parent: "..."
              startTime: "..."
              finishTime: "..."
              id: "..."
              status: "FAILED"
              user: "..."
              group: "..."
              inputDir: "..."
              outputDir: "..."
              mapper: "..."
              combiner: "..."
              reducer: "..."
              queueName: "..."
              schedulerPriority: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/activities/{activityId}/children:
    get:
      tags:
      - "ActivitiesResource"
      summary: "Returns the child activities."
      description: "Returns the child activities"
      operationId: "readChildActivities"
      produces:
      - "application/json"
      parameters:
      - name: "activityId"
        in: "path"
        description: "The id of the activity"
        required: true
        type: "string"
        x-exportParamName: "ActivityId"
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "maxResults"
        in: "query"
        description: "The maximum number of activities to return."
        required: false
        type: "integer"
        default: 100
        x-exportParamName: "MaxResults"
        x-optionalDataType: "Int32"
      - name: "resultOffset"
        in: "query"
        description: "Specified the offset of activities to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "ResultOffset"
        x-optionalDataType: "Int32"
      - name: "view"
        in: "query"
        description: "The view of the children to materialize"
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiActivityList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "OOZIE"
                parent: "..."
                startTime: "..."
                finishTime: "..."
                id: "..."
                status: "KILLED"
                user: "..."
                group: "..."
                inputDir: "..."
                outputDir: "..."
                mapper: "..."
                combiner: "..."
                reducer: "..."
                queueName: "..."
                schedulerPriority: "..."
              - name: "..."
                type: "HIVE"
                parent: "..."
                startTime: "..."
                finishTime: "..."
                id: "..."
                status: "STARTED"
                user: "..."
                group: "..."
                inputDir: "..."
                outputDir: "..."
                mapper: "..."
                combiner: "..."
                reducer: "..."
                queueName: "..."
                schedulerPriority: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/activities/{activityId}/metrics:
    get:
      tags:
      - "ActivitiesResource"
      summary: "Fetch metric readings for a particular activity."
      description: "Fetch metric readings for a particular activity.\n<p>\nBy default,\
        \ this call will look up all metrics available for the activity. If\nonly\
        \ specific metrics are desired, use the <i>metrics</i> parameter.\n<p>\nBy\
        \ default, the returned results correspond to a 5 minute window based on\n\
        the provided end time (which defaults to the current server time). The\n<i>from</i>\
        \ and <i>to</i> parameters can be used to control the window\nbeing queried.\
        \ A maximum window of 3 hours is enforced.\n<p>\nWhen requesting a \"full\"\
        \ view, aside from the extended properties of the\nreturned metric data, the\
        \ collection will also contain information about\nall metrics available for\
        \ the activity, even if no readings are available\nin the requested window."
      operationId: "getMetrics"
      produces:
      - "application/json"
      parameters:
      - name: "activityId"
        in: "path"
        description: "The name of the activity."
        required: true
        type: "string"
        x-exportParamName: "ActivityId"
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "from"
        in: "query"
        description: "Start of the period to query."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "metrics"
        in: "query"
        description: "Filter for which metrics to query."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Metrics"
      - name: "to"
        in: "query"
        description: "End of the period to query."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiMetricList"
          examples:
            application/json:
              items:
              - name: "..."
                context: "..."
                unit: "..."
                data:
                - timestamp: "..."
                  value: 12345.0
                - timestamp: "..."
                  value: 12345.0
                displayName: "..."
                description: "..."
              - name: "..."
                context: "..."
                unit: "..."
                data:
                - timestamp: "..."
                  value: 12345.0
                - timestamp: "..."
                  value: 12345.0
                displayName: "..."
                description: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/activities/{activityId}/similar:
    get:
      tags:
      - "ActivitiesResource"
      summary: "Returns a list of similar activities."
      description: "Returns a list of similar activities"
      operationId: "readSimilarActivities"
      produces:
      - "application/json"
      parameters:
      - name: "activityId"
        in: "path"
        description: "The id of the activity"
        required: true
        type: "string"
        x-exportParamName: "ActivityId"
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view of the activities to materialize"
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiActivityList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "UNKNOWN"
                parent: "..."
                startTime: "..."
                finishTime: "..."
                id: "..."
                status: "FAILED"
                user: "..."
                group: "..."
                inputDir: "..."
                outputDir: "..."
                mapper: "..."
                combiner: "..."
                reducer: "..."
                queueName: "..."
                schedulerPriority: "..."
              - name: "..."
                type: "PIG"
                parent: "..."
                startTime: "..."
                finishTime: "..."
                id: "..."
                status: "FAILED"
                user: "..."
                group: "..."
                inputDir: "..."
                outputDir: "..."
                mapper: "..."
                combiner: "..."
                reducer: "..."
                queueName: "..."
                schedulerPriority: "..."
          headers: {}
  /cm/allHosts/config:
    get:
      tags:
      - "AllHostsResource"
      summary: "Retrieve the default configuration for all hosts."
      description: "Retrieve the default configuration for all hosts.\n<p/>\nThese\
        \ values will apply to all hosts managed by CM unless overridden\nat the host\
        \ level."
      operationId: "readConfig"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "AllHostsResource"
      summary: "Update the default configuration values for all hosts."
      description: "Update the default configuration values for all hosts.\n<p/>\n\
        Note that this does not override values set at the host level. It just\nupdates\
        \ the default values that will be inherited by each host's\nconfiguration."
      operationId: "updateConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "The config values to update."
        required: false
        schema:
          $ref: "#/definitions/ApiConfigList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /audits:
    get:
      tags:
      - "AuditsResource"
      summary: "Fetch audit events from Cloudera Manager (CM) and CM managed services\n\
        like HDFS, HBase, Impala, Hive, and Sentry."
      description: "Fetch audit events from Cloudera Manager (CM) and CM managed services\n\
        like HDFS, HBase, Impala, Hive, and Sentry.\n<p>\nBy default, this call will\
        \ fetch the first 100 audit events (sorted from most\nrecent to oldest) corresponding\
        \ to a 1 day window based on provided end time\n(which defaults to the  current\
        \ CM server time). The <em>startTime</em> and\n<em>endTime</em> parameters\
        \ can be used to control the window being queried.\n<p>\nAudit events for\
        \ CM managed services are only retrieved if Cloudera\nNavigator server is\
        \ running."
      operationId: "readAudits"
      produces:
      - "application/json"
      parameters:
      - name: "endTime"
        in: "query"
        description: "End of the period to query in ISO 8601 format (defaults to\n\
          current time)."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "EndTime"
        x-optionalDataType: "String"
      - name: "maxResults"
        in: "query"
        description: "Maximum number of audits to return"
        required: false
        type: "integer"
        default: 100
        x-exportParamName: "MaxResults"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "The query to filter out audits in the system. It accepts\nquerying\
          \ the intersection of a list of constraints,\njoined together with semicolons\
          \ (without spaces). For example:\n</p>\n<dl>\n<dt>command==listStatus</dt>\n\
          <dd>looks for audits with listStatus command.</dd>\n<dt>command==listStatus;username!=foo</dt>\n\
          <dd>looks for audits with listStatus command but excludes\naudits generated\
          \ by foo username</dd>\n<dt>command==listStatus;source==*oozie*</dt>\n<dd>looks\
          \ for audits with listStatus command and source that\ncontains the string\
          \ 'oozie'.\n</dd>\n</dl>\n\nFollowing are valid selectors for the query\
          \ (if applicable to the\naudit):\n<table>\n<tr>\n<th> Selector </th>\n<th>\
          \ Description </th>\n<th> SCM </th>\n<th> HDFS </th>\n<th> HBase </th>\n\
          <th> Hive </th>\n<th> Impala </th>\n<th> Sentry </th>\n</tr>\n<tr>\n<td>\
          \ service </td>\n<td> Cloudera Manager Service </td>\n<td> x </td>\n<td>\
          \ x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n</tr>\n\
          <tr>\n<td> operation </td>\n<td> Operation name </td>\n<td> x </td>\n<td>\
          \ x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n</tr>\n\
          <tr>\n<td> username </td>\n<td> User name </td>\n<td> x </td>\n<td> x </td>\n\
          <td> x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n</tr>\n<tr>\n<td>\
          \ impersonator</td>\n<td> Impersonator </td>\n<td> </td>\n<td> x </td>\n\
          <td> x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n</tr>\n<tr>\n<td>\
          \ ip_address </td>\n<td> IP Address </td>\n<td> x </td>\n<td> x </td>\n\
          <td> x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n</tr>\n<tr>\n<td>\
          \ allowed </td>\n<td> Whether the request was allowed or denied </td>\n\
          <td> x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n<td>\
          \ x </td>\n</tr>\n<tr>\n<td> qualifier</td>\n<td> Column qualifier </td>\n\
          <td> </td>\n<td> </td>\n<td> x </td>\n<td> </td>\n<td> </td>\n<td> </td>\n\
          </tr>\n<tr>\n<td> source </td>\n<td> Source resource of the operation  </td>\n\
          <td> x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n<td>\
          \ </td>\n</tr>\n<tr>\n<td> destination </td>\n<td> Destination resource\
          \ of the operation </td>\n<td> </td>\n<td> x </td>\n<td> x </td>\n<td> x\
          \ </td>\n<td> x </td>\n<td> </td>\n</tr>\n<tr>\n<td> hostIpAddress </td>\n\
          <td> Host IP Address </td>\n<td> x </td>\n<td> </td>\n<td> </td>\n<td> </td>\n\
          <td> </td>\n<td> </td>\n</tr>\n<tr>\n<td> role </td>\n<td> Cloudera Manager\
          \ Role </td>\n<td> x </td>\n<td> </td>\n<td> </td>\n<td> </td>\n<td> </td>\n\
          <td> </td>\n</tr>\n<tr>\n<td> family </td>\n<td> Column family </td>\n<td>\
          \ </td>\n<td> </td>\n<td> x </td>\n<td> </td>\n<td> </td>\n<td> </td>\n\
          </tr>\n<tr>\n<td> database_name </td>\n<td> Database name </td>\n<td> </td>\n\
          <td> </td>\n<td> </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n</tr>\n\
          <tr>\n<td> table_name </td>\n<td> Table name </td>\n<td> </td>\n<td> </td>\n\
          <td> x </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n</tr>\n<tr>\n<td>\
          \ object_type </td>\n<td> Type of object being handled </td>\n<td> </td>\n\
          <td> </td>\n<td> </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n</tr>\n\
          <tr>\n<td> operation_text </td>\n<td> Command/query text </td>\n<td> </td>\n\
          <td> </td>\n<td> </td>\n<td> x </td>\n<td> x </td>\n<td> x </td>\n</tr>\n\
          </table>\n<p>\nThe only supported operator is <em>\";\"</em> (Boolean AND).\
          \ Boolean OR is\nnot supported.\n<p>\nThe supported comparators are <em>==</em>\
          \ and <em>!=</em>\nNote that \"LIKE\" comparison is supported using the\
          \ wild card syntax,\nfor example <em>foo==*value*</em>. Asterisk is interpreted\
          \ as a wild\ncard character and must not be part of the value. (LIKE comparison\n\
          queries are converted to standard SQL LIKE syntax, so any % (%25)\ncharacter\
          \ in a value that also contains a wild card will be\ninterpreted as a wild\
          \ card.)\n<p/>\nAvailable since API v8. A subset of these features is available\
          \ since v4."
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "resultOffset"
        in: "query"
        description: "Offset of audits to return"
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "ResultOffset"
        x-optionalDataType: "Int32"
      - name: "startTime"
        in: "query"
        description: "Start of the period to query in ISO 8601 format (defaults\n\
          to 1 day ago relative to endTime)."
        required: false
        type: "string"
        x-exportParamName: "StartTime"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiAuditList"
          examples:
            application/json:
              items:
              - timestamp: "..."
                service: "..."
                username: "..."
                impersonator: "..."
                ipAddress: "..."
                command: "..."
                resource: "..."
                operationText: "..."
                allowed: true
              - timestamp: "..."
                service: "..."
                username: "..."
                impersonator: "..."
                ipAddress: "..."
                command: "..."
                resource: "..."
                operationText: "..."
                allowed: true
          headers: {}
  /audits/stream:
    get:
      tags:
      - "AuditsResource"
      description: ""
      operationId: "streamAudits"
      produces:
      - "application/json"
      parameters:
      - name: "endTime"
        in: "query"
        description: ""
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "EndTime"
        x-optionalDataType: "String"
      - name: "maxResults"
        in: "query"
        description: ""
        required: false
        type: "integer"
        default: 100
        x-exportParamName: "MaxResults"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: ""
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "resultOffset"
        in: "query"
        description: ""
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "ResultOffset"
        x-optionalDataType: "Int32"
      - name: "startTime"
        in: "query"
        description: ""
        required: false
        type: "string"
        x-exportParamName: "StartTime"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            type: "file"
            description: ""
          examples: {}
          headers: {}
  /authRoleMetadatas:
    get:
      tags:
      - "AuthRoleMetadatasResource"
      summary: "Returns a list of the auth roles' metadata for the built-in roles."
      description: "Returns a list of the auth roles' metadata for the built-in roles."
      operationId: "readAuthRolesMetadata"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiAuthRoleMetadataList"
          examples:
            application/json:
              items:
              - displayName: "..."
                uuid: "..."
                role: "..."
                authorities:
                - name: "..."
                  description: "..."
                - name: "..."
                  description: "..."
                allowedScopes:
                - "..."
                - "..."
              - displayName: "..."
                uuid: "..."
                role: "..."
                authorities:
                - name: "..."
                  description: "..."
                - name: "..."
                  description: "..."
                allowedScopes:
                - "..."
                - "..."
          headers: {}
  /authRoles:
    get:
      tags:
      - "AuthRolesResource"
      summary: "Returns a list of the auth roles configured in the system."
      description: "Returns a list of the auth roles configured in the system."
      operationId: "readAuthRoles"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiAuthRoleList"
          examples:
            application/json:
              items:
              - displayName: "..."
                name: "..."
                clusters:
                - clusterName: "..."
                  displayName: "..."
                - clusterName: "..."
                  displayName: "..."
                users:
                - name: "..."
                - name: "..."
                externalUserMappings:
                - uuid: "..."
                  name: "..."
                  type: "EXTERNAL_PROGRAM"
                - uuid: "..."
                  name: "..."
                  type: "SAML_SCRIPT"
                baseRole:
                  displayName: "..."
                  name: "..."
                  uuid: "..."
                uuid: "..."
                isCustom: true
              - displayName: "..."
                name: "..."
                clusters:
                - clusterName: "..."
                  displayName: "..."
                - clusterName: "..."
                  displayName: "..."
                users:
                - name: "..."
                - name: "..."
                externalUserMappings:
                - uuid: "..."
                  name: "..."
                  type: "EXTERNAL_PROGRAM"
                - uuid: "..."
                  name: "..."
                  type: "SAML_SCRIPT"
                baseRole:
                  displayName: "..."
                  name: "..."
                  uuid: "..."
                uuid: "..."
                isCustom: true
          headers: {}
    post:
      tags:
      - "AuthRolesResource"
      summary: "Creates a list of auth roles."
      description: "Creates a list of auth roles."
      operationId: "createAuthRoles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of auth roles to create."
        required: false
        schema:
          $ref: "#/definitions/ApiAuthRoleList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiAuthRoleList"
          examples:
            application/json:
              items:
              - displayName: "..."
                name: "..."
                clusters:
                - clusterName: "..."
                  displayName: "..."
                - clusterName: "..."
                  displayName: "..."
                users:
                - name: "..."
                - name: "..."
                externalUserMappings:
                - uuid: "..."
                  name: "..."
                  type: "SAML_SCRIPT"
                - uuid: "..."
                  name: "..."
                  type: "SAML_SCRIPT"
                baseRole:
                  displayName: "..."
                  name: "..."
                  uuid: "..."
                uuid: "..."
                isCustom: true
              - displayName: "..."
                name: "..."
                clusters:
                - clusterName: "..."
                  displayName: "..."
                - clusterName: "..."
                  displayName: "..."
                users:
                - name: "..."
                - name: "..."
                externalUserMappings:
                - uuid: "..."
                  name: "..."
                  type: "LDAP"
                - uuid: "..."
                  name: "..."
                  type: "EXTERNAL_PROGRAM"
                baseRole:
                  displayName: "..."
                  name: "..."
                  uuid: "..."
                uuid: "..."
                isCustom: true
          headers: {}
  /authRoles/metadata:
    get:
      tags:
      - "AuthRolesResource"
      summary: "Returns a list of the auth roles' metadata for the built-in roles."
      description: "Returns a list of the auth roles' metadata for the built-in roles."
      operationId: "readAuthRolesMetadata"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiAuthRoleMetadataList"
          examples:
            application/json:
              items:
              - displayName: "..."
                uuid: "..."
                role: "..."
                authorities:
                - name: "..."
                  description: "..."
                - name: "..."
                  description: "..."
                allowedScopes:
                - "..."
                - "..."
              - displayName: "..."
                uuid: "..."
                role: "..."
                authorities:
                - name: "..."
                  description: "..."
                - name: "..."
                  description: "..."
                allowedScopes:
                - "..."
                - "..."
          headers: {}
  /authRoles/{uuid}:
    get:
      tags:
      - "AuthRolesResource"
      summary: "Returns detailed information about an auth role."
      description: "Returns detailed information about an auth role."
      operationId: "readAuthRole"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The auth role to read."
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiAuthRole"
          examples:
            application/json:
              displayName: "..."
              name: "..."
              clusters:
              - clusterName: "..."
                displayName: "..."
              - clusterName: "..."
                displayName: "..."
              users:
              - name: "..."
              - name: "..."
              externalUserMappings:
              - uuid: "..."
                name: "..."
                type: "EXTERNAL_PROGRAM"
              - uuid: "..."
                name: "..."
                type: "LDAP"
              baseRole:
                displayName: "..."
                name: "..."
                uuid: "..."
              uuid: "..."
              isCustom: true
          headers: {}
    put:
      tags:
      - "AuthRolesResource"
      summary: "Updates the given auth role's information."
      description: "Updates the given auth role's information."
      operationId: "updateAuthRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "Uuid of the auth role being updated."
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      - in: "body"
        name: "body"
        description: "The auth role information."
        required: false
        schema:
          $ref: "#/definitions/ApiAuthRole"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiAuthRole"
          examples:
            application/json:
              displayName: "..."
              name: "..."
              clusters:
              - clusterName: "..."
                displayName: "..."
              - clusterName: "..."
                displayName: "..."
              users:
              - name: "..."
              - name: "..."
              externalUserMappings:
              - uuid: "..."
                name: "..."
                type: "EXTERNAL_PROGRAM"
              - uuid: "..."
                name: "..."
                type: "EXTERNAL_PROGRAM"
              baseRole:
                displayName: "..."
                name: "..."
                uuid: "..."
              uuid: "..."
              isCustom: true
          headers: {}
    delete:
      tags:
      - "AuthRolesResource"
      summary: "Deletes an auth role from the system."
      description: "Deletes an auth role from the system.\n<p/>"
      operationId: "deleteAuthRole"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The uuid of the auth role to delete."
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiAuthRole"
          examples:
            application/json:
              displayName: "..."
              name: "..."
              clusters:
              - clusterName: "..."
                displayName: "..."
              - clusterName: "..."
                displayName: "..."
              users:
              - name: "..."
              - name: "..."
              externalUserMappings:
              - uuid: "..."
                name: "..."
                type: "LDAP"
              - uuid: "..."
                name: "..."
                type: "EXTERNAL_PROGRAM"
              baseRole:
                displayName: "..."
                name: "..."
                uuid: "..."
              uuid: "..."
              isCustom: true
          headers: {}
  /cm/authService:
    get:
      tags:
      - "AuthServiceResource"
      summary: "Retrieve information about the Authentication Services."
      description: "Retrieve information about the Authentication Services."
      operationId: "readService"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiService"
          examples:
            application/json:
              name: "..."
              type: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceState: "NA"
              healthSummary: "CONCERNING"
              configStalenessStatus: "FRESH"
              clientConfigStalenessStatus: "STALE_REFRESHABLE"
              healthChecks:
              - name: "..."
                summary: "HISTORY_NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              serviceUrl: "..."
              roleInstancesUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "ROLE"
              - "SERVICE"
              config:
                roleTypeConfigs:
                - roleType: "..."
                  items:
                  - {}
                  - {}
                - roleType: "..."
                  items:
                  - {}
                  - {}
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roles:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "UNKNOWN"
                commissionState: "UNKNOWN"
                healthSummary: "CONCERNING"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "SERVICE"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "UNKNOWN"
                entityStatus: "STARTING"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPED"
                commissionState: "UNKNOWN"
                healthSummary: "BAD"
                configStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "ACTIVE"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_FOLLOWER"
                entityStatus: "NONE"
              displayName: "..."
              roleConfigGroups:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              replicationSchedules:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "KEEP_DATA_IN_CLOUD"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "WEEK"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_AND_DATA"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "YEAR"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              snapshotPolicies:
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              entityStatus: "CONCERNING_HEALTH"
          headers: {}
    put:
      tags:
      - "AuthServiceResource"
      summary: "Setup the Authentication Service."
      description: "Setup the Authentication Service.\n<p>\nConfigure the Auth Service\
        \ instance with the information given in\nthe ApiService. The provided configuration\
        \ data can be used to set\nup host mappings for each role, and required configuration\
        \ such as\ndatabase connection information for specific roles.\n<p>\nThis\
        \ method needs a valid CM license to be installed beforehand.\n<p>\nThis method\
        \ does not start any services or roles.\n<p>\nThis method will fail if a Auth\
        \ Service instance already exists.\n<p>\nAvailable role types:\n<ul>\n<li>AUTHSRV</li>\n\
        </ul>"
      operationId: "setup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Role configuration overrides."
        required: false
        schema:
          $ref: "#/definitions/ApiService"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiService"
          examples:
            application/json:
              name: "..."
              type: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceState: "STARTED"
              healthSummary: "DISABLED"
              configStalenessStatus: "STALE"
              clientConfigStalenessStatus: "FRESH"
              healthChecks:
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "DISABLED"
                explanation: "..."
                suppressed: true
              serviceUrl: "..."
              roleInstancesUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "ROLE"
              - "HOST"
              config:
                roleTypeConfigs:
                - roleType: "..."
                  items:
                  - {}
                  - {}
                - roleType: "..."
                  items:
                  - {}
                  - {}
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roles:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STARTED"
                commissionState: "DECOMMISSIONING"
                healthSummary: "CONCERNING"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "HOST"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_FOLLOWER"
                entityStatus: "NONE"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "BUSY"
                commissionState: "DECOMMISSIONED"
                healthSummary: "GOOD"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "HOST"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_OBSERVER"
                entityStatus: "UNKNOWN"
              displayName: "..."
              roleConfigGroups:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              replicationSchedules:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_AND_DATA"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "MINUTE"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_AND_DATA"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "YEAR"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              snapshotPolicies:
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              entityStatus: "UNKNOWN_HEALTH"
          headers: {}
    delete:
      tags:
      - "AuthServiceResource"
      summary: "Delete the Authentication Service."
      description: "Delete the Authentication Service.\n<p>\nThis method will fail\
        \ if a CMS instance doesn't already exist."
      operationId: "delete"
      produces:
      - "application/json"
      parameters: []
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiService"
          examples:
            application/json:
              name: "..."
              type: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceState: "STOPPING"
              healthSummary: "DISABLED"
              configStalenessStatus: "STALE_REFRESHABLE"
              clientConfigStalenessStatus: "FRESH"
              healthChecks:
              - name: "..."
                summary: "HISTORY_NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              serviceUrl: "..."
              roleInstancesUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "HOST"
              - "ROLE"
              config:
                roleTypeConfigs:
                - roleType: "..."
                  items:
                  - {}
                  - {}
                - roleType: "..."
                  items:
                  - {}
                  - {}
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roles:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "UNKNOWN"
                commissionState: "UNKNOWN"
                healthSummary: "DISABLED"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_FOLLOWER"
                entityStatus: "DOWN"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "NA"
                commissionState: "OFFLINING"
                healthSummary: "BAD"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "HOST"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                entityStatus: "NONE"
              displayName: "..."
              roleConfigGroups:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              replicationSchedules:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_AND_DATA"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "WEEK"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_AND_DATA"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "YEAR"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              snapshotPolicies:
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              entityStatus: "DOWN"
          headers: {}
  /cm/authService/autoAssignRoles:
    put:
      tags:
      - "AuthServiceResource"
      summary: "Automatically assign roles to hosts and create the roles for the\n\
        Authentication Service."
      description: "Automatically assign roles to hosts and create the roles for the\n\
        Authentication Service.\n<p>\nAssignments are done based on number of hosts\
        \ in the deployment\nand hardware specifications. If no hosts are part of\
        \ the deployment,\nan exception will be thrown preventing any role assignments.\n\
        Existing roles will be taken into account and their assignments\nwill be not\
        \ be modified. The deployment should not have any clusters\nwhen calling this\
        \ endpoint. If it does, an exception will be thrown\npreventing any role assignments."
      operationId: "autoAssignRoles"
      parameters: []
      responses:
        204:
          description: "Success"
          examples: {}
          headers: {}
  /cm/authService/autoConfigure:
    put:
      tags:
      - "AuthServiceResource"
      summary: "Automatically configures roles of the Authentication Service."
      description: "Automatically configures roles of the Authentication Service.\n\
        <p>\nOverwrites some existing configurations. Only default role config\ngroups\
        \ must exist before calling this endpoint. Other role config\ngroups must\
        \ not exist. If they do, an exception will be thrown\npreventing any configuration.\
        \ Ignores any clusters (and their\nservices and roles) colocated with the\
        \ Authentication Service."
      operationId: "autoConfigure"
      parameters: []
      responses:
        204:
          description: "Success"
          examples: {}
          headers: {}
  /cm/authService/commands:
    get:
      tags:
      - "AuthServiceResource"
      summary: "List active Authentication Service commands."
      description: "List active Authentication Service commands."
      operationId: "listActiveCommands"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommandList"
          examples:
            application/json:
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/authService/config:
    get:
      tags:
      - "AuthServiceResource"
      description: ""
      operationId: "readServiceConfig"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiServiceConfig"
          examples:
            application/json:
              roleTypeConfigs:
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "AuthServiceResource"
      description: ""
      operationId: "updateServiceConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "message"
        in: "query"
        description: ""
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiServiceConfig"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiServiceConfig"
          examples:
            application/json:
              roleTypeConfigs:
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /cm/authService/roleTypes:
    get:
      tags:
      - "AuthServiceResource"
      summary: "List the supported role types for the Authentication Service."
      description: "List the supported role types for the Authentication Service."
      operationId: "listRoleTypes"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleTypeList"
          examples:
            application/json:
              items:
              - "..."
              - "..."
          headers: {}
  /cm/authService/commands/enterMaintenanceMode:
    post:
      tags:
      - "AuthServiceResource"
      summary: "Put the Authentication Service into maintenance mode."
      description: "Put the Authentication Service into maintenance mode. This is\
        \ a\nsynchronous command. The result is known immediately upon return."
      operationId: "enterMaintenanceMode"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/authService/commands/exitMaintenanceMode:
    post:
      tags:
      - "AuthServiceResource"
      summary: "Take the Authentication Service out of maintenance mode."
      description: "Take the Authentication Service out of maintenance mode. This\
        \ is a\nsynchronous command. The result is known immediately upon return."
      operationId: "exitMaintenanceMode"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/authService/commands/restart:
    post:
      tags:
      - "AuthServiceResource"
      summary: "Restart the Authentication Service."
      description: "Restart the Authentication Service."
      operationId: "restartCommand"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/authService/commands/start:
    post:
      tags:
      - "AuthServiceResource"
      summary: "Start the Authentication Service."
      description: "Start the Authentication Service."
      operationId: "startCommand"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/authService/commands/stop:
    post:
      tags:
      - "AuthServiceResource"
      summary: "Stop the Authentication Service."
      description: "Stop the Authentication Service."
      operationId: "stopCommand"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/authService/roleCommands/restart:
    post:
      tags:
      - "AuthServiceRoleCommandsResource"
      summary: "Restart a set of Authentication Service roles."
      description: "Restart a set of Authentication Service roles."
      operationId: "restartCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The roles to restart."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/authService/roleCommands/start:
    post:
      tags:
      - "AuthServiceRoleCommandsResource"
      summary: "Start a set of Authentication Service roles."
      description: "Start a set of Authentication Service roles."
      operationId: "startCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The roles to start."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/authService/roleCommands/stop:
    post:
      tags:
      - "AuthServiceRoleCommandsResource"
      summary: "Stop a set of Authentication Service roles."
      description: "Stop a set of Authentication Service roles."
      operationId: "stopCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The roles to stop."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/authService/roleConfigGroups:
    get:
      tags:
      - "AuthServiceRoleConfigGroupsResource"
      summary: "Returns the information for all role config groups in\nthe Authentication\
        \ Service."
      description: "Returns the information for all role config groups in\nthe Authentication\
        \ Service."
      operationId: "readRoleConfigGroups"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleConfigGroupList"
          examples:
            application/json:
              items:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
          headers: {}
  /cm/authService/roleConfigGroups/{roleConfigGroupName}:
    get:
      tags:
      - "AuthServiceRoleConfigGroupsResource"
      summary: "Returns the information for a given role config group\nin the Authentication\
        \ Service."
      description: "Returns the information for a given role config group\nin the\
        \ Authentication Service."
      operationId: "readRoleConfigGroup"
      produces:
      - "application/json"
      parameters:
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the requested group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleConfigGroup"
          examples:
            application/json:
              name: "..."
              roleType: "..."
              base: true
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
          headers: {}
    put:
      tags:
      - "AuthServiceRoleConfigGroupsResource"
      summary: "Updates an existing role config group in the Authentication Service."
      description: "Updates an existing role config group in the Authentication Service."
      operationId: "updateRoleConfigGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the group to update."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "message"
        in: "query"
        description: "The optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "The updated role config group."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleConfigGroup"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleConfigGroup"
          examples:
            application/json:
              name: "..."
              roleType: "..."
              base: true
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
          headers: {}
  /cm/authService/roleConfigGroups/{roleConfigGroupName}/config:
    get:
      tags:
      - "AuthServiceRoleConfigGroupsResource"
      summary: "Returns the current revision of the config\nfor the specified role\
        \ config group in the Authentication Service."
      description: "Returns the current revision of the config\nfor the specified\
        \ role config group in the Authentication Service."
      operationId: "readConfig"
      produces:
      - "application/json"
      parameters:
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the role config group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "AuthServiceRoleConfigGroupsResource"
      summary: "Updates the config for the given role config group\nin the Authentication\
        \ Service."
      description: "Updates the config for the given role config group\nin the Authentication\
        \ Service."
      operationId: "updateConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the role config group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "The new config information for the group."
        required: false
        schema:
          $ref: "#/definitions/ApiConfigList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /cm/authService/roleConfigGroups/{roleConfigGroupName}/roles:
    get:
      tags:
      - "AuthServiceRoleConfigGroupsResource"
      summary: "Returns all roles in the given role config group\nin the Authentication\
        \ Service."
      description: "Returns all roles in the given role config group\nin the Authentication\
        \ Service."
      operationId: "readRoles"
      produces:
      - "application/json"
      parameters:
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the role config group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPING"
                commissionState: "DECOMMISSIONED"
                healthSummary: "GOOD"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                haStatus: "ACTIVE"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                entityStatus: "STOPPING"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "BUSY"
                commissionState: "DECOMMISSIONED"
                healthSummary: "GOOD"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_OBSERVER"
                entityStatus: "HISTORY_NOT_AVAILABLE"
          headers: {}
  /cm/authService/roles:
    get:
      tags:
      - "AuthServiceRolesResource"
      summary: "List all roles of the Authentication Services."
      description: "List all roles of the Authentication Services."
      operationId: "readRoles"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "UNKNOWN"
                commissionState: "OFFLINED"
                healthSummary: "BAD"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "STANDALONE"
                entityStatus: "STARTING"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "UNKNOWN"
                commissionState: "DECOMMISSIONED"
                healthSummary: "CONCERNING"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_OBSERVER"
                entityStatus: "BAD_HEALTH"
          headers: {}
    post:
      tags:
      - "AuthServiceRolesResource"
      summary: "Create new roles in the Authentication Services."
      description: "Create new roles in the Authentication Services."
      operationId: "createRoles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Roles to create."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STARTED"
                commissionState: "COMMISSIONED"
                healthSummary: "BAD"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "HOST"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "UNKNOWN"
                entityStatus: "UNKNOWN_HEALTH"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPING"
                commissionState: "DECOMMISSIONED"
                healthSummary: "GOOD"
                configStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                haStatus: "ACTIVE"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "HOST"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "UNKNOWN"
                entityStatus: "STOPPING"
          headers: {}
  /cm/authService/roles/{roleName}:
    get:
      tags:
      - "AuthServiceRolesResource"
      summary: "Retrieve detailed information about a Authentication Services role."
      description: "Retrieve detailed information about a Authentication Services\
        \ role."
      operationId: "readRole"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRole"
          examples:
            application/json:
              name: "..."
              type: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleState: "NA"
              commissionState: "OFFLINED"
              healthSummary: "GOOD"
              configStalenessStatus: "STALE_REFRESHABLE"
              healthChecks:
              - name: "..."
                summary: "CONCERNING"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              haStatus: "ACTIVE"
              roleUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "HOST"
              - "HOST"
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roleConfigGroupRef:
                roleConfigGroupName: "..."
              zooKeeperServerMode: "REPLICATED_FOLLOWER"
              entityStatus: "HISTORY_NOT_AVAILABLE"
          headers: {}
    delete:
      tags:
      - "AuthServiceRolesResource"
      summary: "Delete a role from the Authentication Services."
      description: "Delete a role from the Authentication Services."
      operationId: "deleteRole"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRole"
          examples:
            application/json:
              name: "..."
              type: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleState: "STOPPED"
              commissionState: "OFFLINING"
              healthSummary: "DISABLED"
              configStalenessStatus: "STALE_REFRESHABLE"
              healthChecks:
              - name: "..."
                summary: "BAD"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              haStatus: "STANDBY"
              roleUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "HOST"
              - "CLUSTER"
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roleConfigGroupRef:
                roleConfigGroupName: "..."
              zooKeeperServerMode: "UNKNOWN"
              entityStatus: "STARTING"
          headers: {}
  /cm/authService/roles/{roleName}/commands:
    get:
      tags:
      - "AuthServiceRolesResource"
      summary: "List active role commands."
      description: "List active role commands."
      operationId: "listActiveCommands"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommandList"
          examples:
            application/json:
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/authService/roles/{roleName}/config:
    get:
      tags:
      - "AuthServiceRolesResource"
      summary: "Retrieve the configuration of a specific Authentication Services role."
      description: "Retrieve the configuration of a specific Authentication Services\
        \ role."
      operationId: "readRoleConfig"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to look up."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "AuthServiceRolesResource"
      summary: "Update the configuration of a Authentication Services role."
      description: "Update the configuration of a Authentication Services role.\n\
        <p>\nIf a value is set in the given configuration, it will be added\nto the\
        \ role's configuration, replacing any existing entries.\nIf a value is unset\
        \ (its value is null), the existing\nconfiguration for the attribute will\
        \ be erased, if any.\n<p>\nAttributes that are not listed in the input will\
        \ maintain their\ncurrent values in the configuration."
      operationId: "updateRoleConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to modify."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "Configuration changes."
        required: false
        schema:
          $ref: "#/definitions/ApiConfigList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /cm/authService/roles/{roleName}/commands/enterMaintenanceMode:
    post:
      tags:
      - "AuthServiceRolesResource"
      summary: "Put the Authentication Service role into maintenance mode."
      description: "Put the Authentication Service role into maintenance mode.This\
        \ is a\nsynchronous command. The result is known immediately upon return."
      operationId: "enterMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/authService/roles/{roleName}/commands/exitMaintenanceMode:
    post:
      tags:
      - "AuthServiceRolesResource"
      summary: "Take the Authentication Service role out of maintenance mode."
      description: "Take the Authentication Service role out of maintenance mode.\
        \ This is\na synchronous command. The result is known immediately upon return."
      operationId: "exitMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/authService/roles/{roleName}/logs/full:
    get:
      tags:
      - "AuthServiceRolesResource"
      summary: "Retrieves the log file for the role's main process."
      description: "Retrieves the log file for the role's main process.\n<p>\nIf the\
        \ role is not started, this will be the log file associated with\nthe last\
        \ time the role was run.\n<p>\nLog files are returned as plain text (type\
        \ \"text/plain\")."
      operationId: "getFullLog"
      produces:
      - "text/plain"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to fetch logs from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /cm/authService/roles/{roleName}/logs/stacks:
    get:
      tags:
      - "AuthServiceRolesResource"
      summary: "Retrieves the stacks log file, if any, for the role's main process."
      description: "Retrieves the stacks log file, if any, for the role's main process.\
        \ Note\nthat not all roles support periodic stacks collection.\n\nThe log\
        \ files are returned as plain text (type \"text/plain\")."
      operationId: "getStacksLog"
      produces:
      - "text/plain"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to fetch stacks logs from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /cm/authService/roles/{roleName}/logs/stacksBundle:
    get:
      tags:
      - "AuthServiceRolesResource"
      summary: "Download a zip-compressed archive of role stacks logs."
      description: "Download a zip-compressed archive of role stacks logs. Note that\
        \ not all\nroles support periodic stacks collection."
      operationId: "getStacksLogsBundle"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to fetch the stacks logs bundle from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          examples: {}
          headers: {}
  /cm/authService/roles/{roleName}/logs/stderr:
    get:
      tags:
      - "AuthServiceRolesResource"
      summary: "Retrieves the role's standard error output."
      description: "Retrieves the role's standard error output.\n<p>\nIf the role\
        \ is not started, this will be the output associated with\nthe last time the\
        \ role was run.\n<p>\nLog files are returned as plain text (type \"text/plain\"\
        )."
      operationId: "getStandardError"
      produces:
      - "text/plain"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to fetch stderr from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /cm/authService/roles/{roleName}/logs/stdout:
    get:
      tags:
      - "AuthServiceRolesResource"
      summary: "Retrieves the role's standard output."
      description: "Retrieves the role's standard output.\n<p>\nIf the role is not\
        \ started, this will be the output associated with\nthe last time the role\
        \ was run.\n<p>\nLog files are returned as plain text (type \"text/plain\"\
        )."
      operationId: "getStandardOutput"
      produces:
      - "text/plain"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to fetch stdout from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /batch:
    post:
      tags:
      - "BatchResource"
      summary: "Executes a batch of API requests in one database transaction."
      description: "Executes a batch of API requests in one database transaction.\
        \ If any\nrequest fails, execution halts and the transaction is rolled back."
      operationId: "execute"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Batch of request to execute."
        required: false
        schema:
          $ref: "#/definitions/ApiBatchRequest"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBatchResponse"
          examples:
            application/json:
              items:
              - statusCode: 12345
                response: {}
              - statusCode: 12345
                response: {}
              success: true
          headers: {}
  /cm/commands:
    get:
      tags:
      - "ClouderaManagerResource"
      summary: "List active global commands."
      description: "List active global commands."
      operationId: "listActiveCommands"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommandList"
          examples:
            application/json:
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/config:
    get:
      tags:
      - "ClouderaManagerResource"
      summary: "Retrieve the Cloudera Manager settings."
      description: "Retrieve the Cloudera Manager settings."
      operationId: "getConfig"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: "The view to materialize, either \"summary\" or \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "ClouderaManagerResource"
      summary: "Update the Cloudera Manager settings."
      description: "Update the Cloudera Manager settings.\n<p>\nIf a value is set\
        \ in the given configuration, it will be added to the\nmanager's settings,\
        \ replacing any existing entry. If a value is unset (its\nvalue is null),\
        \ the existing the setting will be erased.\n<p>\nSettings that are not listed\
        \ in the input will maintain their current\nvalues."
      operationId: "updateConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "Settings to update."
        required: false
        schema:
          $ref: "#/definitions/ApiConfigList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /cm/deployment:
    get:
      tags:
      - "ClouderaManagerResource"
      summary: "Retrieve full description of the entire Cloudera Manager deployment\n\
        including all hosts, clusters, services, roles, users, settings, etc."
      description: "Retrieve full description of the entire Cloudera Manager deployment\n\
        including all hosts, clusters, services, roles, users, settings, etc.\n<p/>\n\
        This object can be used to reconstruct your entire deployment\n<p/>\nNote:\
        \ Only users with sufficient privileges are allowed to call this.\n<ul>\n\
        <li>Full Administrators</li>\n<li>Cluster Administrators (but Navigator config\
        \ will be redacted)</li>\n</ul>\n<p/>\nNote: starting with v19, the deployment\
        \ information contains a newer\nversion of users ApiUser2 that can hold granular\
        \ permissions."
      operationId: "getDeployment2"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: "May be one of \"export\" (default) or \"export_redacted\". \
          \ The latter\nreplaces configurations that are sensitive with the word \"\
          REDACTED\"."
        required: false
        type: "string"
        default: "export"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiDeployment2"
          examples:
            application/json:
              timestamp: "..."
              clusters:
              - name: "..."
                displayName: "..."
                fullVersion: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "CLUSTER"
                services:
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STOPPING"
                  healthSummary: "GOOD"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  clientConfigStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "SERVICE"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "NONE"
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STARTED"
                  healthSummary: "BAD"
                  configStalenessStatus: "FRESH"
                  clientConfigStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "CLUSTER"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "STARTING"
                parcels:
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                clusterUrl: "..."
                hostsUrl: "..."
                entityStatus: "NONE"
                uuid: "..."
                dataContextRefs:
                - name: "..."
                - name: "..."
                clusterType: "..."
              - name: "..."
                displayName: "..."
                fullVersion: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "ROLE"
                services:
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "NA"
                  healthSummary: "DISABLED"
                  configStalenessStatus: "STALE"
                  clientConfigStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "HOST"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "STOPPED"
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STOPPING"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "FRESH"
                  clientConfigStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "ROLE"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "CONCERNING_HEALTH"
                parcels:
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                clusterUrl: "..."
                hostsUrl: "..."
                entityStatus: "BAD_HEALTH"
                uuid: "..."
                dataContextRefs:
                - name: "..."
                - name: "..."
                clusterType: "..."
              hosts:
              - hostId: "..."
                ipAddress: "..."
                hostname: "..."
                rackId: "..."
                lastHeartbeat: "..."
                roleRefs:
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                healthSummary: "BAD"
                healthChecks:
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                hostUrl: "..."
                maintenanceMode: true
                commissionState: "COMMISSIONED"
                maintenanceOwners:
                - "ROLE"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                numCores: 12345
                numPhysicalCores: 12345
                totalPhysMemBytes: 12345
                entityStatus: "NONE"
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              - hostId: "..."
                ipAddress: "..."
                hostname: "..."
                rackId: "..."
                lastHeartbeat: "..."
                roleRefs:
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                healthSummary: "DISABLED"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                hostUrl: "..."
                maintenanceMode: true
                commissionState: "COMMISSIONED"
                maintenanceOwners:
                - "SERVICE"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                numCores: 12345
                numPhysicalCores: 12345
                totalPhysMemBytes: 12345
                entityStatus: "BAD_HEALTH"
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              authRoles:
              - displayName: "..."
                name: "..."
                clusters:
                - clusterName: "..."
                  displayName: "..."
                - clusterName: "..."
                  displayName: "..."
                users:
                - name: "..."
                - name: "..."
                externalUserMappings:
                - uuid: "..."
                  name: "..."
                  type: "LDAP"
                - uuid: "..."
                  name: "..."
                  type: "LDAP"
                baseRole:
                  displayName: "..."
                  name: "..."
                  uuid: "..."
                uuid: "..."
                isCustom: true
              - displayName: "..."
                name: "..."
                clusters:
                - clusterName: "..."
                  displayName: "..."
                - clusterName: "..."
                  displayName: "..."
                users:
                - name: "..."
                - name: "..."
                externalUserMappings:
                - uuid: "..."
                  name: "..."
                  type: "SAML_SCRIPT"
                - uuid: "..."
                  name: "..."
                  type: "EXTERNAL_PROGRAM"
                baseRole:
                  displayName: "..."
                  name: "..."
                  uuid: "..."
                uuid: "..."
                isCustom: true
              externalUserMappings:
              - name: "..."
                type: "SAML_SCRIPT"
                uuid: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
              - name: "..."
                type: "LDAP"
                uuid: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
              users:
              - name: "..."
                password: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                pwHash: "..."
                pwSalt: 12345
                pwLogin: true
              - name: "..."
                password: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                pwHash: "..."
                pwSalt: 12345
                pwLogin: true
              versionInfo:
                version: "..."
                snapshot: true
                buildUser: "..."
                buildTimestamp: "..."
                gitHash: "..."
              managementService:
                name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STARTED"
                healthSummary: "DISABLED"
                configStalenessStatus: "FRESH"
                clientConfigStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STOPPING"
                  commissionState: "DECOMMISSIONED"
                  healthSummary: "HISTORY_NOT_AVAILABLE"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_FOLLOWER"
                  entityStatus: "HISTORY_NOT_AVAILABLE"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "BUSY"
                  commissionState: "DECOMMISSIONING"
                  healthSummary: "BAD"
                  configStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "ACTIVE"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "ROLE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER"
                  entityStatus: "STOPPED"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "HOUR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "HOUR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "DOWN"
              managerSettings:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              allHostsConfig:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              peers:
              - name: "..."
                type: "REPLICATION"
                url: "..."
                username: "..."
                password: "..."
                clouderaManagerCreatedUser: true
              - name: "..."
                type: "REPLICATION"
                url: "..."
                username: "..."
                password: "..."
                clouderaManagerCreatedUser: true
              hostTemplates:
                items:
                - name: "..."
                  clusterRef: {}
                  roleConfigGroupRefs:
                  - {}
                  - {}
                - name: "..."
                  clusterRef: {}
                  roleConfigGroupRefs:
                  - {}
                  - {}
              dataContexts:
                items:
                - name: "..."
                  displayName: "..."
                  nameservice: "..."
                  createdTime: "..."
                  lastModifiedTime: "..."
                  services:
                  - {}
                  - {}
                  servicesDetails:
                  - {}
                  - {}
                  supportedServiceTypes:
                  - "..."
                  - "..."
                  allowedClusterVersions:
                  - {}
                  - {}
                  configStalenessStatus: "STALE"
                  clientConfigStalenessStatus: "FRESH"
                  healthSummary: "BAD"
                - name: "..."
                  displayName: "..."
                  nameservice: "..."
                  createdTime: "..."
                  lastModifiedTime: "..."
                  services:
                  - {}
                  - {}
                  servicesDetails:
                  - {}
                  - {}
                  supportedServiceTypes:
                  - "..."
                  - "..."
                  allowedClusterVersions:
                  - {}
                  - {}
                  configStalenessStatus: "STALE"
                  clientConfigStalenessStatus: "STALE"
                  healthSummary: "DISABLED"
          headers: {}
    put:
      tags:
      - "ClouderaManagerResource"
      summary: "Apply the supplied deployment description to the system."
      description: "Apply the supplied deployment description to the system. This\
        \ will\ncreate the clusters, services, hosts and other objects specified in\n\
        the argument. This call does not allow for any merge conflicts. If\nan entity\
        \ already exists in the system, this call will fail.\nYou can request, however,\
        \ that all entities in the system are deleted\nbefore instantiating the new\
        \ ones.\n<p/>\nYou may specify a complete or partial deployment, e.g. you\
        \ can provide\nhost info with no clusters.  However, if you request that\n\
        the current deployment be deleted, you are required to specify at\nleast one\
        \ admin user or this call will fail. This is to protect\nyou from creating\
        \ a system that cannot be logged into again.\n<p/>\nIf there are any errors\
        \ creating (or optionally deleting) a deployment,\nall changes will be rolled\
        \ back leaving the system exactly as it was\nbefore calling this method. \
        \ The system will never be left in a state\nwhere part of the deployment is\
        \ created and other parts are not.\n<p/>\nIf the submitted deployment contains\
        \ entities that require Cloudera\nEnterprise license, then the license should\
        \ be provided to Cloudera Manager\nbefore making this API call."
      operationId: "updateDeployment2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "deleteCurrentDeployment"
        in: "query"
        description: "If true, the current deployment is deleted\nbefore the specified\
          \ deployment is applied"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "DeleteCurrentDeployment"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        description: "The deployment to create"
        required: false
        schema:
          $ref: "#/definitions/ApiDeployment2"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiDeployment2"
          examples:
            application/json:
              timestamp: "..."
              clusters:
              - name: "..."
                displayName: "..."
                fullVersion: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "CLUSTER"
                services:
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STARTED"
                  healthSummary: "GOOD"
                  configStalenessStatus: "STALE"
                  clientConfigStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "CLUSTER"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "BAD_HEALTH"
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "HISTORY_NOT_AVAILABLE"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "FRESH"
                  clientConfigStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "CLUSTER"
                  - "SERVICE"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "STOPPING"
                parcels:
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                clusterUrl: "..."
                hostsUrl: "..."
                entityStatus: "BAD_HEALTH"
                uuid: "..."
                dataContextRefs:
                - name: "..."
                - name: "..."
                clusterType: "..."
              - name: "..."
                displayName: "..."
                fullVersion: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "HOST"
                services:
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "UNKNOWN"
                  healthSummary: "GOOD"
                  configStalenessStatus: "STALE"
                  clientConfigStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "CLUSTER"
                  - "CLUSTER"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "STARTING"
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STARTING"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  clientConfigStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "HOST"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "DOWN"
                parcels:
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                clusterUrl: "..."
                hostsUrl: "..."
                entityStatus: "NONE"
                uuid: "..."
                dataContextRefs:
                - name: "..."
                - name: "..."
                clusterType: "..."
              hosts:
              - hostId: "..."
                ipAddress: "..."
                hostname: "..."
                rackId: "..."
                lastHeartbeat: "..."
                roleRefs:
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                healthSummary: "NOT_AVAILABLE"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                hostUrl: "..."
                maintenanceMode: true
                commissionState: "UNKNOWN"
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                numCores: 12345
                numPhysicalCores: 12345
                totalPhysMemBytes: 12345
                entityStatus: "GOOD_HEALTH"
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              - hostId: "..."
                ipAddress: "..."
                hostname: "..."
                rackId: "..."
                lastHeartbeat: "..."
                roleRefs:
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                healthSummary: "CONCERNING"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                hostUrl: "..."
                maintenanceMode: true
                commissionState: "DECOMMISSIONING"
                maintenanceOwners:
                - "SERVICE"
                - "HOST"
                config:
                  items:
                  - {}
                  - {}
                numCores: 12345
                numPhysicalCores: 12345
                totalPhysMemBytes: 12345
                entityStatus: "DOWN"
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              authRoles:
              - displayName: "..."
                name: "..."
                clusters:
                - clusterName: "..."
                  displayName: "..."
                - clusterName: "..."
                  displayName: "..."
                users:
                - name: "..."
                - name: "..."
                externalUserMappings:
                - uuid: "..."
                  name: "..."
                  type: "EXTERNAL_PROGRAM"
                - uuid: "..."
                  name: "..."
                  type: "EXTERNAL_PROGRAM"
                baseRole:
                  displayName: "..."
                  name: "..."
                  uuid: "..."
                uuid: "..."
                isCustom: true
              - displayName: "..."
                name: "..."
                clusters:
                - clusterName: "..."
                  displayName: "..."
                - clusterName: "..."
                  displayName: "..."
                users:
                - name: "..."
                - name: "..."
                externalUserMappings:
                - uuid: "..."
                  name: "..."
                  type: "LDAP"
                - uuid: "..."
                  name: "..."
                  type: "SAML_SCRIPT"
                baseRole:
                  displayName: "..."
                  name: "..."
                  uuid: "..."
                uuid: "..."
                isCustom: true
              externalUserMappings:
              - name: "..."
                type: "SAML_SCRIPT"
                uuid: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
              - name: "..."
                type: "SAML_ATTRIBUTE"
                uuid: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
              users:
              - name: "..."
                password: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                pwHash: "..."
                pwSalt: 12345
                pwLogin: true
              - name: "..."
                password: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                pwHash: "..."
                pwSalt: 12345
                pwLogin: true
              versionInfo:
                version: "..."
                snapshot: true
                buildUser: "..."
                buildTimestamp: "..."
                gitHash: "..."
              managementService:
                name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STOPPING"
                healthSummary: "NOT_AVAILABLE"
                configStalenessStatus: "STALE_REFRESHABLE"
                clientConfigStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "ROLE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "BUSY"
                  commissionState: "DECOMMISSIONED"
                  healthSummary: "CONCERNING"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "SERVICE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "UNKNOWN"
                  entityStatus: "UNKNOWN"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "BUSY"
                  commissionState: "COMMISSIONED"
                  healthSummary: "BAD"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "ACTIVE"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "ROLE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "UNKNOWN"
                  entityStatus: "NONE"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "HOUR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "YEAR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "UNKNOWN"
              managerSettings:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              allHostsConfig:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              peers:
              - name: "..."
                type: "REPLICATION"
                url: "..."
                username: "..."
                password: "..."
                clouderaManagerCreatedUser: true
              - name: "..."
                type: "STATUS_AGGREGATION"
                url: "..."
                username: "..."
                password: "..."
                clouderaManagerCreatedUser: true
              hostTemplates:
                items:
                - name: "..."
                  clusterRef: {}
                  roleConfigGroupRefs:
                  - {}
                  - {}
                - name: "..."
                  clusterRef: {}
                  roleConfigGroupRefs:
                  - {}
                  - {}
              dataContexts:
                items:
                - name: "..."
                  displayName: "..."
                  nameservice: "..."
                  createdTime: "..."
                  lastModifiedTime: "..."
                  services:
                  - {}
                  - {}
                  servicesDetails:
                  - {}
                  - {}
                  supportedServiceTypes:
                  - "..."
                  - "..."
                  allowedClusterVersions:
                  - {}
                  - {}
                  configStalenessStatus: "FRESH"
                  clientConfigStalenessStatus: "STALE"
                  healthSummary: "CONCERNING"
                - name: "..."
                  displayName: "..."
                  nameservice: "..."
                  createdTime: "..."
                  lastModifiedTime: "..."
                  services:
                  - {}
                  - {}
                  servicesDetails:
                  - {}
                  - {}
                  supportedServiceTypes:
                  - "..."
                  - "..."
                  allowedClusterVersions:
                  - {}
                  - {}
                  configStalenessStatus: "STALE_REFRESHABLE"
                  clientConfigStalenessStatus: "STALE"
                  healthSummary: "DISABLED"
          headers: {}
  /cm/importClusterTemplate:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Create cluster as per the given cluster template."
      description: "Create cluster as per the given cluster template"
      operationId: "importClusterTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "addRepositories"
        in: "query"
        description: "if true the parcels repositories in the cluster\ntemplate will\
          \ be added."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "AddRepositories"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        description: "cluster template"
        required: false
        schema:
          $ref: "#/definitions/ApiClusterTemplate"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/kerberosInfo:
    get:
      tags:
      - "ClouderaManagerResource"
      summary: "Provides Cloudera Manager Kerberos information."
      description: "Provides Cloudera Manager Kerberos information"
      operationId: "getKerberosInfo"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiKerberosInfo"
          examples:
            application/json:
              kerberized: true
              kdcType: "..."
              kerberosRealm: "..."
              kdcHost: "..."
              adminHost: "..."
              domain:
              - "..."
              - "..."
          headers: {}
  /cm/kerberosPrincipals:
    get:
      tags:
      - "ClouderaManagerResource"
      summary: "Returns the Kerberos principals needed by the services being managed\n\
        by Cloudera Manager."
      description: "Returns the Kerberos principals needed by the services being managed\n\
        by Cloudera Manager."
      operationId: "getKerberosPrincipals"
      produces:
      - "application/json"
      parameters:
      - name: "missingOnly"
        in: "query"
        description: "Whether to include only those principals which do\nnot already\
          \ exist in Cloudera Manager's database."
        required: false
        type: "boolean"
        x-exportParamName: "MissingOnly"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiPrincipalList"
          examples:
            application/json:
              items:
              - "..."
              - "..."
          headers: {}
  /cm/license:
    get:
      tags:
      - "ClouderaManagerResource"
      summary: "Retrieve information about the Cloudera Manager license."
      description: "Retrieve information about the Cloudera Manager license."
      operationId: "readLicense"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiLicense"
          examples:
            application/json:
              owner: "..."
              uuid: "..."
              expiration: "..."
              features:
              - name: "..."
                enabled: true
                description: "..."
              - name: "..."
                enabled: true
                description: "..."
              deactivationDate: "..."
              startDate: "..."
          headers: {}
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Updates the Cloudera Manager license."
      description: "Updates the Cloudera Manager license.\n<p>\nAfter a new license\
        \ is installed, the Cloudera Manager needs to be\nrestarted for the changes\
        \ to take effect.\n<p>\nThe license file should be uploaded using a request\
        \ with content type\n\"multipart/form-data\", instead of being encoded into\
        \ a JSON representation."
      operationId: "updateLicense"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "license"
        in: "formData"
        description: ""
        required: false
        type: "file"
        x-exportParamName: "License"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiLicense"
          examples:
            application/json:
              owner: "..."
              uuid: "..."
              expiration: "..."
              features:
              - name: "..."
                enabled: true
                description: "..."
              - name: "..."
                enabled: true
                description: "..."
              deactivationDate: "..."
              startDate: "..."
          headers: {}
  /cm/licensedFeatureUsage:
    get:
      tags:
      - "ClouderaManagerResource"
      summary: "Retrieve a summary of licensed feature usage."
      description: "Retrieve a summary of licensed feature usage.\n<p/>\nThis command\
        \ will return information about what Cloudera Enterprise\nlicensed features\
        \ are in use in the clusters being managed by this Cloudera\nManager, as well\
        \ as totals for usage across all clusters.\n<p/>\nThe specific features described\
        \ can vary between different versions of\nCloudera Manager.\n<p/>\nAvailable\
        \ since API v6."
      operationId: "getLicensedFeatureUsage"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiLicensedFeatureUsage"
          examples:
            application/json:
              totals:
                property1: 12345
                property2: 12345
              clusters:
                property1: {}
                property2: {}
          headers: {}
  /cm/log:
    get:
      tags:
      - "ClouderaManagerResource"
      summary: "Returns the entire contents of the Cloudera Manager log file."
      description: "Returns the entire contents of the Cloudera Manager log file"
      operationId: "getLog"
      produces:
      - "text/plain"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /cm/scmDbInfo:
    get:
      tags:
      - "ClouderaManagerResource"
      summary: "Provides Cloudera Manager server's database information."
      description: "Provides Cloudera Manager server's database information"
      operationId: "getScmDbInfo"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiScmDbInfo"
          examples:
            application/json:
              scmDbType: "POSTGRESQL"
              embeddedDbUsed: true
          headers: {}
  /cm/shutdownReadiness:
    get:
      tags:
      - "ClouderaManagerResource"
      summary: "Retrieve Cloudera Manager's readiness for shutdown and destroy."
      description: "Retrieve Cloudera Manager's readiness for shutdown and destroy.\n\
        Applications that wish to destroy Cloudera Manager and its managed cluster\n\
        should poll this API, repeatedly if necessary, to respect its readiness."
      operationId: "getShutdownReadiness"
      produces:
      - "application/json"
      parameters:
      - name: "lastActivityTime"
        in: "query"
        description: "End time of the last known activity/workload\nagainst the managed\
          \ clusters, in ISO 8601 format."
        required: false
        type: "string"
        x-exportParamName: "LastActivityTime"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiShutdownReadiness"
          examples:
            application/json:
              state: "NOT_READY"
          headers: {}
  /cm/version:
    get:
      tags:
      - "ClouderaManagerResource"
      summary: "Provides version information of Cloudera Manager itself."
      description: "Provides version information of Cloudera Manager itself."
      operationId: "getVersion"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiVersionInfo"
          examples:
            application/json:
              version: "..."
              snapshot: true
              buildUser: "..."
              buildTimestamp: "..."
              gitHash: "..."
          headers: {}
  /cm/commands/addCustomCerts:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Add custom certificates to the Auto-TLS certificate database."
      description: "Add custom certificates to the Auto-TLS certificate database"
      operationId: "addCustomCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiAddCustomCertsArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/clustersPerfInspector:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Run performance diagnostics test against specified clusters\nin ApiClustersPerfInspectorArgs\n\
        \nUser must be Full Administrator or Global Cluster Administrator."
      description: "Run performance diagnostics test against specified clusters\n\
        in ApiClustersPerfInspectorArgs\n\nUser must be Full Administrator or Global\
        \ Cluster Administrator."
      operationId: "clustersPerfInspectorCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Required arguments for the command. See ApiClustersPerfInspectorArgs."
        required: false
        schema:
          $ref: "#/definitions/ApiClustersPerfInspectorArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/collectDiagnosticData:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Collect diagnostic data from hosts managed by Cloudera Manager."
      description: "Collect diagnostic data from hosts managed by Cloudera Manager.\n\
        <p>\nAfter the command has completed, the ApiCommand will contain a\nresultDataUrl\
        \ from where you can download the result.\n<p/>\nOnly available with Cloudera\
        \ Manager Enterprise Edition."
      operationId: "collectDiagnosticDataCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The command arguments."
        required: false
        schema:
          $ref: "#/definitions/ApiCollectDiagnosticDataArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/deleteCredentials:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Delete existing Kerberos credentials."
      description: "Delete existing Kerberos credentials.\n<p>\nThis command will\
        \ affect all services that have been configured to use\nKerberos, and have\
        \ existing credentials. In V18 this takes a new\nparamater to determine whether\
        \ it needs to delete all credentials\nor just unused ones."
      operationId: "deleteCredentialsCommand"
      produces:
      - "application/json"
      parameters:
      - name: "deleteCredentialsMode"
        in: "query"
        description: "this can be set to \"all\" or \"unused\""
        required: false
        type: "string"
        default: "all"
        x-exportParamName: "DeleteCredentialsMode"
        x-optionalDataType: "String"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/generateCmca:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Generate a CMCA."
      description: "Generate a CMCA"
      operationId: "generateCmca"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiGenerateCmcaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/generateCredentials:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Generate missing Kerberos credentials."
      description: "Generate missing Kerberos credentials.\n<p>\nThis command will\
        \ affect all services that have been configured to use\nKerberos, and haven't\
        \ had their credentials generated yet."
      operationId: "generateCredentialsCommand"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/hostInstall:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Perform installation on a set of hosts."
      description: "Perform installation on a set of hosts.\n<p/>\nThis command installs\
        \ Cloudera Manager Agent on a\nset of hosts.\n<p/>\nAvailable since API v6."
      operationId: "hostInstallCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Hosts to perform installation on"
        required: false
        schema:
          $ref: "#/definitions/ApiHostInstallArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/hostsDecommission:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Decommission the given hosts."
      description: "Decommission the given hosts.\nAll slave roles on the hosts will\
        \ be decommissioned.\nAll other roles will be stopped."
      operationId: "hostsDecommissionCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiHostNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/hostsOfflineOrDecommission:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Decommission the given hosts."
      description: "Decommission the given hosts.\nAll slave roles on the hosts will\
        \ be offlined or decommissioned with\npreference being offlined if supported\
        \ by the service.\n<p>\nCurrently the offline operation is only supported\
        \ by HDFS, where\nthe offline operation will put DataNodes into <em>HDFS IN\
        \ MAINTENANCE</em> state which\nprevents unnecessary re-replication which\
        \ could occur if decommissioned.\n<p>\nAll other roles on the hosts will be\
        \ stopped.\n<p>\nThe <em>offlineTimeout</em> parameter is used to specify\
        \ a timeout for offline. For HDFS, when the\ntimeout expires, the DataNode\
        \ will automatically transition out of <em>HDFS IN MAINTENANCE</em> state,\n\
        back to <em>HDFS IN SERVICE</em> state.\n<p>"
      operationId: "hostsOfflineOrDecommissionCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "offlineTimeout"
        in: "query"
        description: "offline timeout in seconds. Specify as null to get the default\
          \ timeout (4 hours).\nIgnored if service does not support he offline operation."
        required: false
        type: "number"
        x-exportParamName: "OfflineTimeout"
        x-optionalDataType: "Float32"
      - in: "body"
        name: "body"
        description: "list of host names to decommission."
        required: false
        schema:
          $ref: "#/definitions/ApiHostNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/hostsPerfInspector:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Run performance diagnostics test against specified hosts in\nApiHostsPerfInspectorArgs\n\
        \nUser must be Full Administrator or Global Cluster Administrator."
      description: "Run performance diagnostics test against specified hosts in\n\
        ApiHostsPerfInspectorArgs\n\nUser must be Full Administrator or Global Cluster\
        \ Administrator."
      operationId: "hostsPerfInspectorCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Required arguments for the command. See ApiHostsPerfInspectorArgs."
        required: false
        schema:
          $ref: "#/definitions/ApiHostsPerfInspectorArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/hostsRecommission:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Recommission the given hosts."
      description: "Recommission the given hosts.\nAll slave roles on the hosts will\
        \ be recommissioned.\nRoles are not started after this command. Use hostsStartRoles\
        \ command\nfor that."
      operationId: "hostsRecommissionCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiHostNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/hostsRecommissionAndExitMaintenanceMode:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Recommission and exit maintenance on the given hosts."
      description: "Recommission and exit maintenance on the given hosts.\nThe recommission\
        \ step may optionally start roles as well."
      operationId: "hostsRecommissionAndExitMaintenanceModeCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "recommissionType"
        in: "query"
        description: ""
        required: false
        type: "string"
        default: "recommission"
        enum:
        - "RECOMMISSION"
        - "RECOMMISSION_WITH_START"
        x-exportParamName: "RecommissionType"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiHostNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/hostsRecommissionWithStart:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Recommission the given hosts."
      description: "Recommission the given hosts. If slave roles support start when\
        \ decommissioned,\nstart those roles before recommission.\nAll slave roles\
        \ on the hosts will be recommissioned.\n\nWarning: Evolving. This method may\
        \ change in the future and does not offer standard compatibility guarantees.\n\
        Recommission the given hosts. If possible, start those roles before recommission.\
        \ All slave roles on the hosts\nwill be recommissioned.\nDo not use without\
        \ guidance from Cloudera.\n\nCurrently, only HDFS DataNodes will be started\
        \ by this command."
      operationId: "hostsRecommissionWithStartCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiHostNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/hostsStartRoles:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Start all the roles on the given hosts."
      description: "Start all the roles on the given hosts."
      operationId: "hostsStartRolesCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiHostNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/importAdminCredentials:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Imports the KDC Account Manager credentials needed by Cloudera\nManager\
        \ to create kerberos principals needed by CDH services."
      description: "Imports the KDC Account Manager credentials needed by Cloudera\n\
        Manager to create kerberos principals needed by CDH services."
      operationId: "importAdminCredentials"
      produces:
      - "application/json"
      parameters:
      - name: "password"
        in: "query"
        description: "Password for the Account Manager.\n\nreturn Information about\
          \ the submitted command."
        required: false
        type: "string"
        x-exportParamName: "Password"
        x-optionalDataType: "String"
      - name: "username"
        in: "query"
        description: "Username of the Account Manager. Full name including the Kerberos\n\
          realm must be specified."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/importKerberosPrincipal:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Imports the Kerberos credentials for the specified principal\nwhich\
        \ can then be used to add to a role's keytab by running\nGenerate Credentials\
        \ command."
      description: "Imports the Kerberos credentials for the specified principal\n\
        which can then be used to add to a role's keytab by running\nGenerate Credentials\
        \ command."
      operationId: "importKerberosPrincipal"
      produces:
      - "application/json"
      parameters:
      - name: "kvno"
        in: "query"
        description: "Key-version number of the password.\n\nreturn Information about\
          \ the submitted command."
        required: false
        type: "number"
        x-exportParamName: "Kvno"
        x-optionalDataType: "Float32"
      - name: "password"
        in: "query"
        description: "Password for the Kerberos principal. Cloudera Manager\nwill\
          \ encrypt the principal and password and use it when needed for a daemon."
        required: false
        type: "string"
        x-exportParamName: "Password"
        x-optionalDataType: "String"
      - name: "principal"
        in: "query"
        description: "Name of the principal. Full name including the Kerberos\nrealm\
          \ must be specified. If it already exists, it will be overwritten."
        required: false
        type: "string"
        x-exportParamName: "Principal"
        x-optionalDataType: "String"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/inspectHosts:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Runs the host inspector on the configured hosts."
      description: "Runs the host inspector on the configured hosts."
      operationId: "inspectHostsCommand"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/commands/refreshParcelRepos:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "."
      description: "<p>\nSubmit a command to refresh parcels information.\n</p>\n\
        <p>\nThis API could be used following two scenarios.<br>\n- User updated Cloudera\
        \ Manager's local parcel repository. <br>\n- User updated remote parcel locations.\n\
        <p>\nUser wants to invoke this API to make sure that Cloudera Manager gets\n\
        latest parcels information. User can then monitor the returned command\nbefore\
        \ proceeding to the next step.\n</p>"
      operationId: "refreshParcelRepos"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/trial/begin:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "Begin trial license."
      description: "Begin trial license."
      operationId: "beginTrial"
      parameters: []
      responses:
        201:
          description: "Success"
          examples: {}
          headers: {}
  /cm/trial/end:
    post:
      tags:
      - "ClouderaManagerResource"
      summary: "End trial license."
      description: "End trial license."
      operationId: "endTrial"
      parameters: []
      responses:
        201:
          description: "Success"
          examples: {}
          headers: {}
  /clusters:
    get:
      tags:
      - "ClustersResource"
      summary: "List all known clusters."
      description: "List all known clusters."
      operationId: "readClusters"
      produces:
      - "application/json"
      parameters:
      - name: "clusterType"
        in: "query"
        description: "Type of cluster, either \"any\", \"base\" or \"compute\". Default\
          \ is \"base\"."
        required: false
        type: "string"
        default: "base"
        enum:
        - "ANY"
        - "BASE"
        - "COMPUTE"
        x-exportParamName: "ClusterType"
        x-optionalDataType: "String"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize, either \"summary\" or \"\
          full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiClusterList"
          examples:
            application/json:
              items:
              - name: "..."
                displayName: "..."
                fullVersion: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "CLUSTER"
                services:
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STARTED"
                  healthSummary: "BAD"
                  configStalenessStatus: "STALE"
                  clientConfigStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "HOST"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "STOPPING"
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "HISTORY_NOT_AVAILABLE"
                  healthSummary: "GOOD"
                  configStalenessStatus: "FRESH"
                  clientConfigStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "SERVICE"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "STOPPED"
                parcels:
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                clusterUrl: "..."
                hostsUrl: "..."
                entityStatus: "HISTORY_NOT_AVAILABLE"
                uuid: "..."
                dataContextRefs:
                - name: "..."
                - name: "..."
                clusterType: "..."
              - name: "..."
                displayName: "..."
                fullVersion: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                services:
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STARTED"
                  healthSummary: "BAD"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  clientConfigStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "CLUSTER"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "UNKNOWN_HEALTH"
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STARTED"
                  healthSummary: "HISTORY_NOT_AVAILABLE"
                  configStalenessStatus: "STALE"
                  clientConfigStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "CLUSTER"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "DISABLED_HEALTH"
                parcels:
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                clusterUrl: "..."
                hostsUrl: "..."
                entityStatus: "STOPPED"
                uuid: "..."
                dataContextRefs:
                - name: "..."
                - name: "..."
                clusterType: "..."
          headers: {}
    post:
      tags:
      - "ClustersResource"
      summary: "Creates a collection of clusters."
      description: "Creates a collection of clusters."
      operationId: "createClusters"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of clusters to created."
        required: false
        schema:
          $ref: "#/definitions/ApiClusterList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiClusterList"
          examples:
            application/json:
              items:
              - name: "..."
                displayName: "..."
                fullVersion: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "SERVICE"
                services:
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STARTING"
                  healthSummary: "BAD"
                  configStalenessStatus: "FRESH"
                  clientConfigStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "SERVICE"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "STOPPING"
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STOPPING"
                  healthSummary: "CONCERNING"
                  configStalenessStatus: "STALE"
                  clientConfigStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "SERVICE"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "HISTORY_NOT_AVAILABLE"
                parcels:
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                clusterUrl: "..."
                hostsUrl: "..."
                entityStatus: "STOPPED"
                uuid: "..."
                dataContextRefs:
                - name: "..."
                - name: "..."
                clusterType: "..."
              - name: "..."
                displayName: "..."
                fullVersion: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "HOST"
                services:
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "HISTORY_NOT_AVAILABLE"
                  healthSummary: "DISABLED"
                  configStalenessStatus: "FRESH"
                  clientConfigStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "CLUSTER"
                  - "HOST"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "HISTORY_NOT_AVAILABLE"
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STOPPED"
                  healthSummary: "GOOD"
                  configStalenessStatus: "STALE"
                  clientConfigStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "ROLE"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "STARTING"
                parcels:
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                - product: "..."
                  version: "..."
                  stage: "..."
                  state: {}
                  clusterRef: {}
                clusterUrl: "..."
                hostsUrl: "..."
                entityStatus: "STARTING"
                uuid: "..."
                dataContextRefs:
                - name: "..."
                - name: "..."
                clusterType: "..."
          headers: {}
  /clusters/{clusterName}:
    get:
      tags:
      - "ClustersResource"
      summary: "Reads information about a cluster."
      description: "Reads information about a cluster."
      operationId: "readCluster"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "Name of cluster to look up."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCluster"
          examples:
            application/json:
              name: "..."
              displayName: "..."
              fullVersion: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "ROLE"
              - "SERVICE"
              services:
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STOPPING"
                healthSummary: "GOOD"
                configStalenessStatus: "STALE_REFRESHABLE"
                clientConfigStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "ROLE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STOPPING"
                  commissionState: "DECOMMISSIONED"
                  healthSummary: "BAD"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "ROLE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                  entityStatus: "CONCERNING_HEALTH"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STARTED"
                  commissionState: "DECOMMISSIONED"
                  healthSummary: "CONCERNING"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "CLUSTER"
                  - "CLUSTER"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_FOLLOWER"
                  entityStatus: "NONE"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "YEAR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MONTH"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "GOOD_HEALTH"
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STARTED"
                healthSummary: "DISABLED"
                configStalenessStatus: "STALE_REFRESHABLE"
                clientConfigStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "HISTORY_NOT_AVAILABLE"
                  commissionState: "OFFLINING"
                  healthSummary: "HISTORY_NOT_AVAILABLE"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "ACTIVE"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "ROLE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "UNKNOWN"
                  entityStatus: "BAD_HEALTH"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STARTED"
                  commissionState: "OFFLINING"
                  healthSummary: "HISTORY_NOT_AVAILABLE"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "CLUSTER"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_FOLLOWER"
                  entityStatus: "UNKNOWN_HEALTH"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "DAY"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "DAY"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "UNKNOWN"
              parcels:
              - product: "..."
                version: "..."
                stage: "..."
                state:
                  progress: 12345
                  totalProgress: 12345
                  count: 12345
                  totalCount: 12345
                  errors:
                  - "..."
                  - "..."
                  warnings:
                  - "..."
                  - "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              - product: "..."
                version: "..."
                stage: "..."
                state:
                  progress: 12345
                  totalProgress: 12345
                  count: 12345
                  totalCount: 12345
                  errors:
                  - "..."
                  - "..."
                  warnings:
                  - "..."
                  - "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              clusterUrl: "..."
              hostsUrl: "..."
              entityStatus: "UNKNOWN_HEALTH"
              uuid: "..."
              dataContextRefs:
              - name: "..."
              - name: "..."
              clusterType: "..."
          headers: {}
    put:
      tags:
      - "ClustersResource"
      summary: "Update an existing cluster."
      description: "Update an existing cluster.\n<p>\nTo update the CDH version, provide\
        \ the new value in the \"fullVersion\"\nproperty. Setting a correct version\
        \ that matches the actual installed software\nwill ensure the correct version-specific\
        \ features, such as services, roles,\ncommands, and configurations. This need\
        \ not be manually set for clusters\nusing parcels. In general this action\
        \ is only necessary after the CDH\npackages have been manually updated. Note\
        \ that a downgrade may be rejected\nif it would render existing services or\
        \ roles unusable. For major upgrade,\nthe \"upgradeService\" cluster command\
        \ should be used instead.</p>\n<p>\nTo rename the cluster, provide the new\
        \ name in the \"displayName\"\nproperty for API >= 6, or in the \"name\" property\
        \ for API <=5.\n<p>\nAvailable since API v2."
      operationId: "updateCluster"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiCluster"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCluster"
          examples:
            application/json:
              name: "..."
              displayName: "..."
              fullVersion: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "ROLE"
              - "SERVICE"
              services:
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "NA"
                healthSummary: "NOT_AVAILABLE"
                configStalenessStatus: "STALE"
                clientConfigStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "ROLE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "HISTORY_NOT_AVAILABLE"
                  commissionState: "DECOMMISSIONED"
                  healthSummary: "DISABLED"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "STANDALONE"
                  entityStatus: "STOPPED"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STOPPED"
                  commissionState: "UNKNOWN"
                  healthSummary: "CONCERNING"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "ROLE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "UNKNOWN"
                  entityStatus: "NONE"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "DAY"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "DAY"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "HISTORY_NOT_AVAILABLE"
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STARTING"
                healthSummary: "BAD"
                configStalenessStatus: "STALE_REFRESHABLE"
                clientConfigStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "ROLE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "HISTORY_NOT_AVAILABLE"
                  commissionState: "DECOMMISSIONING"
                  healthSummary: "DISABLED"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "SERVICE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "UNKNOWN"
                  entityStatus: "NONE"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STOPPED"
                  commissionState: "OFFLINING"
                  healthSummary: "GOOD"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "CLUSTER"
                  - "SERVICE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "UNKNOWN"
                  entityStatus: "NONE"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MONTH"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "HOUR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "UNKNOWN"
              parcels:
              - product: "..."
                version: "..."
                stage: "..."
                state:
                  progress: 12345
                  totalProgress: 12345
                  count: 12345
                  totalCount: 12345
                  errors:
                  - "..."
                  - "..."
                  warnings:
                  - "..."
                  - "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              - product: "..."
                version: "..."
                stage: "..."
                state:
                  progress: 12345
                  totalProgress: 12345
                  count: 12345
                  totalCount: 12345
                  errors:
                  - "..."
                  - "..."
                  warnings:
                  - "..."
                  - "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              clusterUrl: "..."
              hostsUrl: "..."
              entityStatus: "BAD_HEALTH"
              uuid: "..."
              dataContextRefs:
              - name: "..."
              - name: "..."
              clusterType: "..."
          headers: {}
    delete:
      tags:
      - "ClustersResource"
      summary: "Deletes a cluster."
      description: "Deletes a cluster."
      operationId: "deleteCluster"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "Name of cluster to delete."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCluster"
          examples:
            application/json:
              name: "..."
              displayName: "..."
              fullVersion: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "HOST"
              - "HOST"
              services:
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STARTING"
                healthSummary: "BAD"
                configStalenessStatus: "FRESH"
                clientConfigStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "HOST"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STOPPING"
                  commissionState: "COMMISSIONED"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "STANDALONE"
                  entityStatus: "HISTORY_NOT_AVAILABLE"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STARTING"
                  commissionState: "OFFLINED"
                  healthSummary: "CONCERNING"
                  configStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "CLUSTER"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                  entityStatus: "UNKNOWN"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "WEEK"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MINUTE"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "DOWN"
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STARTING"
                healthSummary: "HISTORY_NOT_AVAILABLE"
                configStalenessStatus: "STALE_REFRESHABLE"
                clientConfigStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "HOST"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STOPPING"
                  commissionState: "UNKNOWN"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "ACTIVE"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                  entityStatus: "STOPPING"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "UNKNOWN"
                  commissionState: "UNKNOWN"
                  healthSummary: "HISTORY_NOT_AVAILABLE"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER"
                  entityStatus: "STARTING"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "YEAR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "WEEK"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "BAD_HEALTH"
              parcels:
              - product: "..."
                version: "..."
                stage: "..."
                state:
                  progress: 12345
                  totalProgress: 12345
                  count: 12345
                  totalCount: 12345
                  errors:
                  - "..."
                  - "..."
                  warnings:
                  - "..."
                  - "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              - product: "..."
                version: "..."
                stage: "..."
                state:
                  progress: 12345
                  totalProgress: 12345
                  count: 12345
                  totalCount: 12345
                  errors:
                  - "..."
                  - "..."
                  warnings:
                  - "..."
                  - "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              clusterUrl: "..."
              hostsUrl: "..."
              entityStatus: "DOWN"
              uuid: "..."
              dataContextRefs:
              - name: "..."
              - name: "..."
              clusterType: "..."
          headers: {}
  /clusters/{clusterName}/autoAssignRoles:
    put:
      tags:
      - "ClustersResource"
      summary: "Automatically assign roles to hosts and create the roles for all the\
        \ services in a cluster."
      description: "Automatically assign roles to hosts and create the roles for all\
        \ the services in a cluster.\n<p>\nAssignments are done based on services\
        \ and hosts in the cluster, and hardware specifications.\nIf no hosts are\
        \ added to the cluster, an exception will be thrown preventing any\nrole assignments.\n\
        Existing roles will be taken into account and their assignments will be\n\
        not be modified.\n<p>\nAvailable since API v6."
      operationId: "autoAssignRoles"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        204:
          description: "Success"
          examples: {}
          headers: {}
  /clusters/{clusterName}/autoConfigure:
    put:
      tags:
      - "ClustersResource"
      summary: "Automatically configures roles and services in a cluster."
      description: "Automatically configures roles and services in a cluster.\n<p>\n\
        Overwrites some existing configurations. Might create new role config groups.\n\
        Only default role config groups must exist before calling this endpoint.\n\
        Other role config groups must not exist. If they do, an exception will be\
        \ thrown\npreventing any configuration.\nIgnores the Cloudera Management Service\
        \ even if colocated with roles of this\ncluster. To avoid over-committing\
        \ the heap on hosts, assign hosts to this cluster\nthat are not being used\
        \ by the Cloudera Management Service.\n<p>\nAvailable since API v6."
      operationId: "autoConfigure"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        204:
          description: "Success"
          examples: {}
          headers: {}
  /clusters/{clusterName}/clientConfig:
    get:
      tags:
      - "ClustersResource"
      summary: "Download a zip-compressed archive of the client configuration, of\
        \ a\nspecific cluster."
      description: "Download a zip-compressed archive of the client configuration,\
        \ of a\nspecific cluster. Currently, this only includes Kerberos Client\n\
        Configuration (krb5.conf). For client configuration of services, use the\n\
        clientConfig endpoint of the services resource. This resource does not\nrequire\
        \ any authentication."
      operationId: "getClientConfig"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The cluster name."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        200:
          description: "Success"
          schema:
            type: "file"
            description: ""
          examples: {}
          headers: {}
  /clusters/{clusterName}/commands:
    get:
      tags:
      - "ClustersResource"
      summary: "List active cluster commands."
      description: "List active cluster commands."
      operationId: "listActiveCommands"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommandList"
          examples:
            application/json:
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/dfsServices:
    get:
      tags:
      - "ClustersResource"
      summary: "List the services that can provide distributed file system (DFS) capabilities\
        \ in this cluster."
      description: "List the services that can provide distributed file system (DFS)\
        \ capabilities in this cluster."
      operationId: "listDfsServices"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "cluster name"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "view"
        in: "query"
        description: "data view required for matching services"
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiServiceList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STARTED"
                healthSummary: "HISTORY_NOT_AVAILABLE"
                configStalenessStatus: "FRESH"
                clientConfigStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "SERVICE"
                - "SERVICE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STARTED"
                  commissionState: "OFFLINING"
                  healthSummary: "GOOD"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "SERVICE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_FOLLOWER"
                  entityStatus: "STARTING"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STARTING"
                  commissionState: "OFFLINED"
                  healthSummary: "CONCERNING"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "ACTIVE"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "SERVICE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER"
                  entityStatus: "GOOD_HEALTH"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "WEEK"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MINUTE"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "GOOD_HEALTH"
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "UNKNOWN"
                healthSummary: "NOT_AVAILABLE"
                configStalenessStatus: "STALE"
                clientConfigStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "ROLE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STARTED"
                  commissionState: "OFFLINING"
                  healthSummary: "GOOD"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "CLUSTER"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_OBSERVER"
                  entityStatus: "DOWN"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STOPPING"
                  commissionState: "DECOMMISSIONED"
                  healthSummary: "CONCERNING"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "ACTIVE"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_OBSERVER"
                  entityStatus: "HISTORY_NOT_AVAILABLE"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MINUTE"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "DAY"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "STARTING"
          headers: {}
  /clusters/{clusterName}/export:
    get:
      tags:
      - "ClustersResource"
      summary: "Export the cluster template for the given cluster."
      description: "Export the cluster template for the given cluster. If cluster\
        \ does not have\nhost templates defined it will export host templates based\
        \ on roles\nassignment."
      operationId: "export"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "cluster name"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "exportAutoConfig"
        in: "query"
        description: "export configs set by the auto configuration"
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "ExportAutoConfig"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiClusterTemplate"
          examples:
            application/json:
              cdhVersion: "..."
              products:
              - version: "..."
                product: "..."
              - version: "..."
                product: "..."
              services:
              - refName: "..."
                serviceType: "..."
                serviceConfigs:
                - name: "..."
                  value: "..."
                  ref: "..."
                  variable: "..."
                  autoConfig: true
                - name: "..."
                  value: "..."
                  ref: "..."
                  variable: "..."
                  autoConfig: true
                roleConfigGroups:
                - refName: "..."
                  roleType: "..."
                  base: true
                  displayName: "..."
                  configs:
                  - {}
                  - {}
                - refName: "..."
                  roleType: "..."
                  base: true
                  displayName: "..."
                  configs:
                  - {}
                  - {}
                roles:
                - refName: "..."
                  roleType: "..."
                - refName: "..."
                  roleType: "..."
                displayName: "..."
              - refName: "..."
                serviceType: "..."
                serviceConfigs:
                - name: "..."
                  value: "..."
                  ref: "..."
                  variable: "..."
                  autoConfig: true
                - name: "..."
                  value: "..."
                  ref: "..."
                  variable: "..."
                  autoConfig: true
                roleConfigGroups:
                - refName: "..."
                  roleType: "..."
                  base: true
                  displayName: "..."
                  configs:
                  - {}
                  - {}
                - refName: "..."
                  roleType: "..."
                  base: true
                  displayName: "..."
                  configs:
                  - {}
                  - {}
                roles:
                - refName: "..."
                  roleType: "..."
                - refName: "..."
                  roleType: "..."
                displayName: "..."
              hostTemplates:
              - refName: "..."
                roleConfigGroupsRefNames:
                - "..."
                - "..."
                cardinality: 12345
              - refName: "..."
                roleConfigGroupsRefNames:
                - "..."
                - "..."
                cardinality: 12345
              displayName: "..."
              cmVersion: "..."
              instantiator:
                clusterName: "..."
                hosts:
                - hostName: "..."
                  hostNameRange: "..."
                  rackId: "..."
                  hostTemplateRefName: "..."
                  roleRefNames:
                  - "..."
                  - "..."
                - hostName: "..."
                  hostNameRange: "..."
                  rackId: "..."
                  hostTemplateRefName: "..."
                  roleRefNames:
                  - "..."
                  - "..."
                variables:
                - name: "..."
                  value: "..."
                - name: "..."
                  value: "..."
                roleConfigGroups:
                - rcgRefName: "..."
                  name: "..."
                - rcgRefName: "..."
                  name: "..."
                clusterSpec:
                  dataContextRefs:
                  - {}
                  - {}
              repositories:
              - "..."
              - "..."
              clusterSpec:
                dataContextRefs:
                - name: "..."
                - name: "..."
          headers: {}
  /clusters/{clusterName}/hosts:
    get:
      tags:
      - "ClustersResource"
      description: ""
      operationId: "listHosts"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostRefList"
          examples:
            application/json:
              items:
              - hostId: "..."
                hostname: "..."
              - hostId: "..."
                hostname: "..."
          headers: {}
    post:
      tags:
      - "ClustersResource"
      description: ""
      operationId: "addHosts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiHostRefList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostRefList"
          examples:
            application/json:
              items:
              - hostId: "..."
                hostname: "..."
              - hostId: "..."
                hostname: "..."
          headers: {}
    delete:
      tags:
      - "ClustersResource"
      description: ""
      operationId: "removeAllHosts"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostRefList"
          examples:
            application/json:
              items:
              - hostId: "..."
                hostname: "..."
              - hostId: "..."
                hostname: "..."
          headers: {}
  /clusters/{clusterName}/kerberosInfo:
    get:
      tags:
      - "ClustersResource"
      summary: "Provides Cluster Kerberos information."
      description: "Provides Cluster Kerberos information"
      operationId: "getKerberosInfo"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The cluster name."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiKerberosInfo"
          examples:
            application/json:
              kerberized: true
              kdcType: "..."
              kerberosRealm: "..."
              kdcHost: "..."
              adminHost: "..."
              domain:
              - "..."
              - "..."
          headers: {}
  /clusters/{clusterName}/serviceTypes:
    get:
      tags:
      - "ClustersResource"
      summary: "List the supported service types for a cluster."
      description: "List the supported service types for a cluster."
      operationId: "listServiceTypes"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiServiceTypeList"
          examples:
            application/json:
              items:
              - "..."
              - "..."
          headers: {}
  /clusters/{clusterName}/utilization:
    get:
      tags:
      - "ClustersResource"
      summary: "Provides the resource utilization of the entire cluster as well as\
        \ the\nresource utilization per tenant."
      description: "Provides the resource utilization of the entire cluster as well\
        \ as the\nresource utilization per tenant. Only available with Cloudera Manager\
        \ Enterprise Edition."
      operationId: "getUtilizationReport"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "cluster name"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "daysOfWeek"
        in: "query"
        description: "The days of the week for which the user wants to report utilization.\n\
          Days is a list of number between 1 to 7, where 1 corresponds to Monday,\n\
          and 7 corrensponds to Sunday. All 7 days are included if this is not specified."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "DaysOfWeek"
      - name: "endHourOfDay"
        in: "query"
        description: "The end hour of a day for which the user wants to report utilization.\n\
          The hour is a number between [0-23]. Default value is 23 if this is not\
          \ specified."
        required: false
        type: "integer"
        default: 23
        x-exportParamName: "EndHourOfDay"
        x-optionalDataType: "Int32"
      - name: "from"
        in: "query"
        description: "Start of the time range to report utilization in ISO 8601 format."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "startHourOfDay"
        in: "query"
        description: "The start hour of a day for which the user wants to report utilization.\n\
          The hour is a number between [0-23]. Default value is 0 if this is not specified."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "StartHourOfDay"
        x-optionalDataType: "Int32"
      - name: "tenantType"
        in: "query"
        description: "The type of the tenant (POOL or USER)."
        required: false
        type: "string"
        default: "POOL"
        x-exportParamName: "TenantType"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "End of the the time range to report utilization in ISO 8601\
          \ format (defaults to now)."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiClusterUtilization"
          examples:
            application/json:
              totalCpuCores: 12345.0
              avgCpuUtilization: 12345.0
              maxCpuUtilization: 12345.0
              avgCpuDailyPeak: 12345.0
              avgWorkloadCpu: 12345.0
              maxWorkloadCpu: 12345.0
              avgWorkloadCpuDailyPeak: 12345.0
              totalMemory: 12345.0
              avgMemoryUtilization: 12345.0
              maxMemoryUtilization: 12345.0
              avgMemoryDailyPeak: 12345.0
              avgWorkloadMemory: 12345.0
              maxWorkloadMemory: 12345.0
              avgWorkloadMemoryDailyPeak: 12345.0
              tenantUtilizations:
                items:
                - tenantName: "..."
                  cpuUtilizationPercentage: 12345.0
                  memoryUtilizationPercentage: 12345.0
                - tenantName: "..."
                  cpuUtilizationPercentage: 12345.0
                  memoryUtilizationPercentage: 12345.0
              maxCpuUtilizationTimestampMs: 12345
              maxMemoryUtilizationTimestampMs: 12345
              maxWorkloadCpuTimestampMs: 12345
              maxWorkloadMemoryTimestampMs: 12345
              errorMessage: "..."
          headers: {}
  /clusters/{clusterName}/commands/configureAutoTlsServices:
    post:
      tags:
      - "ClustersResource"
      summary: "Configures all services in a cluster to use Auto-TLS."
      description: "Configures all services in a cluster to use Auto-TLS"
      operationId: "configureAutoTlsServicesCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/configureForKerberos:
    post:
      tags:
      - "ClustersResource"
      summary: "Command to configure the cluster to use Kerberos for authentication."
      description: "Command to configure the cluster to use Kerberos for authentication.\n\
        \nThis command will configure all relevant services on a cluster for\nKerberos\
        \ usage.  This command will trigger a GenerateCredentials command\nto create\
        \ Kerberos keytabs for all roles in the cluster."
      operationId: "configureForKerberos"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: "Arguments for the configure for kerberos command."
        required: false
        schema:
          $ref: "#/definitions/ApiConfigureForKerberosArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/deleteCredentials:
    post:
      tags:
      - "ClustersResource"
      summary: "Delete existing Kerberos credentials for the cluster."
      description: "Delete existing Kerberos credentials for the cluster.\n<p>\nThis\
        \ command will affect all services that have been configured to use\nKerberos,\
        \ and have existing credentials."
      operationId: "deleteClusterCredentialsCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "cluster name"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/deployClientConfig:
    post:
      tags:
      - "ClustersResource"
      summary: "Deploy the cluster-wide client configuration."
      description: "Deploy the cluster-wide client configuration.\n\n<p>For each service\
        \ in the cluster, deploy the service's client configuration\nto all the hosts\
        \ that the service runs on.</p>\n\n<p>Available since API v2.</p>"
      operationId: "deployClientConfig"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/deployClusterClientConfig:
    post:
      tags:
      - "ClustersResource"
      summary: "Deploy the Cluster's Kerberos client configuration."
      description: "Deploy the Cluster's Kerberos client configuration.\n\n<p>\nDeploy\
        \ krb5.conf to hosts in a cluster. Does not deploy to decommissioned\nhosts\
        \ or hosts with active processes.\n</p>\n\n<p>\nAvailable since API v7.\n\
        </p>"
      operationId: "deployClusterClientConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: "Hosts in cluster to deploy to. If empty, will target all eligible\n\
          hosts in the cluster."
        required: false
        schema:
          $ref: "#/definitions/ApiHostRefList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/enterMaintenanceMode:
    post:
      tags:
      - "ClustersResource"
      summary: "Put the cluster into maintenance mode."
      description: "Put the cluster into maintenance mode. This is a synchronous command.\n\
        The result is known immediately upon return.\n\n<p>Available since API v2.</p>"
      operationId: "enterMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/exitMaintenanceMode:
    post:
      tags:
      - "ClustersResource"
      summary: "Take the cluster out of maintenance mode."
      description: "Take the cluster out of maintenance mode. This is a synchronous\
        \ command.\nThe result is known immediately upon return.\n\n<p>Available since\
        \ API v2.</p>"
      operationId: "exitMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/expireLogs:
    post:
      tags:
      - "ClustersResource"
      summary: "Remove backup and disaster related log files in hdfs."
      description: "Remove backup and disaster related log files in hdfs.\n<p>\nAvailable\
        \ since API v31."
      operationId: "expireLogs"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "days"
        in: "query"
        description: "logs more than these many days old are purged. -2 to use the\
          \ existing setting"
        required: false
        type: "number"
        x-exportParamName: "Days"
        x-optionalDataType: "Float32"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/firstRun:
    post:
      tags:
      - "ClustersResource"
      summary: "Prepare and start services in a cluster."
      description: "Prepare and start services in a cluster.\n\n<p>\nPerform all the\
        \ steps needed to prepare each service in a cluster and start the services\n\
        in order.\n</p>\n\n<p>\nAvailable since API v7.\n</p>"
      operationId: "firstRun"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/inspectHosts:
    post:
      tags:
      - "ClustersResource"
      summary: "Runs the host inspector on the configured hosts in the specified cluster."
      description: "Runs the host inspector on the configured hosts in the specified\
        \ cluster.\n\nAvailable since V8."
      operationId: "inspectHostsCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/perfInspector:
    post:
      tags:
      - "ClustersResource"
      summary: "Run cluster performance diagnostics test."
      description: "Run cluster performance diagnostics test."
      operationId: "perfInspectorCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: "Optional arguments for the command. See ApiClusterPerfInspectorArgs."
        required: false
        schema:
          $ref: "#/definitions/ApiClusterPerfInspectorArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/poolsRefresh:
    post:
      tags:
      - "ClustersResource"
      summary: "Updates all refreshable configuration files for services with\nDynamic\
        \ Resource Pools."
      description: "Updates all refreshable configuration files for services with\n\
        Dynamic Resource Pools.\n<p>\nAvailable since API v6."
      operationId: "poolsRefresh"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/preUpgradeCheck:
    post:
      tags:
      - "ClustersResource"
      summary: "Run cluster pre-upgrade check(s) when upgrading from\nspecified version\
        \ of CDH to the other."
      description: "Run cluster pre-upgrade check(s) when upgrading from\nspecified\
        \ version of CDH to the other.\n<p>\nAllows the following upgrade checks:\n\
        <ul>\n<li>Minor upgrades from any CDH 5 to any CDH 5</li>\n<li>Major upgrades\
        \ from any CDH 5 to any CDH 6</li>\n<li>Minor upgrades from any CDH 6 to any\
        \ CDH 6</li>\n<li>Maintenance upgrades or downgrades (a.b.x to a.b.y)</li>\n\
        </ul>"
      operationId: "preUpgradeCheckCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: "Arguments for the command. See ApiCdhUpgradeArgs."
        required: false
        schema:
          $ref: "#/definitions/ApiCdhUpgradeArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/refresh:
    post:
      tags:
      - "ClustersResource"
      summary: "Updates all refreshable configuration files in the cluster."
      description: "Updates all refreshable configuration files in the cluster. Will\
        \ not\nrestart any roles.\n<p>\nAvailable since API v6."
      operationId: "refresh"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster"
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/restart:
    post:
      tags:
      - "ClustersResource"
      summary: "Restart all services in the cluster."
      description: "Restart all services in the cluster.\n<p>\nServices are stopped\
        \ then started in the appropriate order given their\ndependencies. The command\
        \ can optionally restart only stale services and\ntheir dependencies as well\
        \ as redeploy client configuration on all services\nin the cluster."
      operationId: "restartCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: "arguments for the restart command."
        required: false
        schema:
          $ref: "#/definitions/ApiRestartClusterArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/rollingRestart:
    post:
      tags:
      - "ClustersResource"
      summary: "Command to do a \"best-effort\" rolling restart of the given cluster,\n\
        i."
      description: "Command to do a \"best-effort\" rolling restart of the given cluster,\n\
        i.e. it does plain restart of services that cannot be rolling restarted,\n\
        followed by first rolling restarting non-slaves and then rolling restarting\n\
        the slave roles of services that can be rolling restarted. The slave restarts\n\
        are done host-by-host.\n<p>\nAvailable since API v4. Only available with Cloudera\
        \ Manager Enterprise\nEdition."
      operationId: "rollingRestart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: "Arguments for the rolling restart command."
        required: false
        schema:
          $ref: "#/definitions/ApiRollingRestartClusterArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/rollingUpgrade:
    post:
      tags:
      - "ClustersResource"
      summary: "Command to do a rolling upgrade of specific services in the given\
        \ cluster\n\nThis command does not handle any services that don't support\
        \ rolling\nupgrades."
      description: "Command to do a rolling upgrade of specific services in the given\
        \ cluster\n\nThis command does not handle any services that don't support\
        \ rolling\nupgrades. The command will throw an error and not start if upgrade\
        \ of any\nsuch service is requested.\n\nThis command does not upgrade the\
        \ full CDH Cluster. You should normally\nuse the upgradeCDH Command for upgrading\
        \ the cluster. This is primarily\nhelpful if you need to need to recover from\
        \ an upgrade failure or for\nadvanced users to script an alternative to the\
        \ upgradeCdhCommand.\n\nThis command expects the binaries to be available\
        \ on hosts and activated.\nIt does not change any binaries on the hosts."
      operationId: "rollingUpgrade"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: "Arguments for the rolling upgrade command."
        required: false
        schema:
          $ref: "#/definitions/ApiRollingUpgradeServicesArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/start:
    post:
      tags:
      - "ClustersResource"
      summary: "Start all services in the cluster."
      description: "Start all services in the cluster.\n<p>\nServices are started\
        \ in the appropriate order given their dependencies."
      operationId: "startCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/stop:
    post:
      tags:
      - "ClustersResource"
      summary: "Stop all services in the cluster."
      description: "Stop all services in the cluster.\n<p>\nServices are stopped in\
        \ the appropriate order given their dependencies."
      operationId: "stopCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/upgradeCdh:
    post:
      tags:
      - "ClustersResource"
      summary: "Perform CDH upgrade to the specified version."
      description: "Perform CDH upgrade to the specified version.\n<p>\nAllows the\
        \ following upgrades:\n<ul>\n<li>Major upgrades from any CDH 4 to any CDH\
        \ 5</li>\n<li>Minor upgrades from any CDH 5 to any CDH 5</li>\n<li>Maintenance\
        \ upgrades or downgrades (a.b.x to a.b.y)</li>\n</ul>\n<p>\nIf using packages,\
        \ CDH packages on all hosts of the cluster must be\nmanually upgraded before\
        \ this command is issued.\n<p>\nThe command will upgrade the services and\
        \ their configuration to the\nversion available in the CDH5 distribution.\n\
        <p>\nUnless rolling upgrade options are provided, the entire cluster will\n\
        experience downtime. If rolling upgrade options are provided, command will\n\
        do a \"best-effort\" rolling upgrade of the given cluster, i.e. it does\n\
        plain upgrade of services that cannot be rolling upgraded, followed by\nfirst\
        \ rolling upgrading non-slaves and then rolling restarting the slave\nroles\
        \ of services that can be rolling restarted. The slave restarts are\ndone\
        \ host-by-host.\n<p>\nAvailable since v9. Rolling upgrade is only available\
        \ with Cloudera\nManager Enterprise Edition. A more limited upgrade variant\
        \ available since\nv6."
      operationId: "upgradeCdhCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: "Arguments for the command. See ApiCdhUpgradeArgs."
        required: false
        schema:
          $ref: "#/definitions/ApiCdhUpgradeArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/commands/upgradeServices:
    post:
      tags:
      - "ClustersResource"
      summary: "Upgrades the services in the cluster to the CDH5 version."
      description: "Upgrades the services in the cluster to the CDH5 version.\n<p>\n\
        This command requires that the CDH packages in the hosts used by the\ncluster\
        \ be upgraded to CDH5 before this command is issued. Once issued,\nthis command\
        \ will stop all running services before proceeding.\n<p>\nIf parcels are used\
        \ instead of CDH system packages then the following\nsteps need to happen\
        \ in order:\n<ol>\n<li>Stop all services manually</li>\n<li>Activate parcel</li>\n\
        <li>Run this upgrade command</li>\n</ol>\nThe command will upgrade the services\
        \ and their configuration to the\nversion available in the CDH5 distribution."
      operationId: "upgradeServicesCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
      deprecated: true
  /clusters/{clusterName}/hosts/{hostId}:
    delete:
      tags:
      - "ClustersResource"
      description: ""
      operationId: "removeHost"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "hostId"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "HostId"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostRef"
          examples:
            application/json:
              hostId: "..."
              hostname: "..."
          headers: {}
  /cm/peers:
    get:
      tags:
      - "CmPeersResource"
      summary: "Retrieves all configured Cloudera Manager peers."
      description: "Retrieves all configured Cloudera Manager peers.\n<p>\nAvailable\
        \ since API v3. Only available with Cloudera Manager Enterprise\nEdition.\n\
        <p>\nWhen accessed via API version before v11, only REPLICATION type peers\
        \ will\nbe returned."
      operationId: "listPeers"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCmPeerList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "REPLICATION"
                url: "..."
                username: "..."
                password: "..."
                clouderaManagerCreatedUser: true
              - name: "..."
                type: "STATUS_AGGREGATION"
                url: "..."
                username: "..."
                password: "..."
                clouderaManagerCreatedUser: true
          headers: {}
    post:
      tags:
      - "CmPeersResource"
      summary: "Create a new Cloudera Manager peer."
      description: "Create a new Cloudera Manager peer.\n<p>\nThe remote server will\
        \ be contacted so that a user can be created\nfor use by the new peer. The\
        \ <i>username</i> and <i>password</i>\nproperties of the provided peer object\
        \ should contain credentials\nof a valid admin user on the remote server.\
        \ A timeout of 10 seconds\nis enforced when contacting the remote server.\n\
        <p>\nIt is recommended to run the remote server with TLS enabled, since\n\
        creating and using peers involve transferring credentials over the\nnetwork.\n\
        <p>\nAvailable since API v3. Only available with Cloudera Manager Enterprise\n\
        Edition.\n<p>\nType field in ApiCmPeer is available since API v11. if not\
        \ specified\nwhen making createPeer() call, 'REPLICATION' type peer will be\
        \ created."
      operationId: "createPeer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Peer to create (see above)."
        required: false
        schema:
          $ref: "#/definitions/ApiCmPeer"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCmPeer"
          examples:
            application/json:
              name: "..."
              type: "REPLICATION"
              url: "..."
              username: "..."
              password: "..."
              clouderaManagerCreatedUser: true
          headers: {}
  /cm/peers/{peerName}:
    get:
      tags:
      - "CmPeersResource"
      summary: "Fetch information about an existing Cloudera Manager peer."
      description: "Fetch information about an existing Cloudera Manager peer.\n<p>\n\
        Available since API v11. Only available with Cloudera Manager Enterprise\n\
        Edition."
      operationId: "readPeer"
      produces:
      - "application/json"
      parameters:
      - name: "peerName"
        in: "path"
        description: "Name of peer to retrieve."
        required: true
        type: "string"
        x-exportParamName: "PeerName"
      - name: "type"
        in: "query"
        description: "Type of peer to retrieve. If null, REPLICATION peer type\nwill\
          \ be returned."
        required: false
        type: "string"
        enum:
        - "REPLICATION"
        - "STATUS_AGGREGATION"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCmPeer"
          examples:
            application/json:
              name: "..."
              type: "REPLICATION"
              url: "..."
              username: "..."
              password: "..."
              clouderaManagerCreatedUser: true
          headers: {}
    put:
      tags:
      - "CmPeersResource"
      summary: "Update information for a Cloudera Manager peer."
      description: "Update information for a Cloudera Manager peer.\n<p>\nIn administrator\
        \ credentials are provided in the peer information, they\nwill be used to\
        \ establish new credentials with the remote server. This\ncan be used in case\
        \ the old credentials are not working anymore. An\nattempt will be made to\
        \ delete the old credentials if new ones are\nsuccessfully created.\n<p>\n\
        If changing the peer's URL, an attempt will be made to contact the old\nCloudera\
        \ Manager to delete the existing credentials.\n<p>\nAvailable since API v3.\
        \ Only available with Cloudera Manager Enterprise\nEdition."
      operationId: "updatePeer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "peerName"
        in: "path"
        description: "Name of peer to update."
        required: true
        type: "string"
        x-exportParamName: "PeerName"
      - in: "body"
        name: "body"
        description: "Updated peer information."
        required: false
        schema:
          $ref: "#/definitions/ApiCmPeer"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCmPeer"
          examples:
            application/json:
              name: "..."
              type: "STATUS_AGGREGATION"
              url: "..."
              username: "..."
              password: "..."
              clouderaManagerCreatedUser: true
          headers: {}
    delete:
      tags:
      - "CmPeersResource"
      summary: "Delete Cloudera Manager peer."
      description: "Delete Cloudera Manager peer.\n<p>\nAn attempt will be made to\
        \ contact the peer server, so that the configured\nuser can be deleted.. Errors\
        \ while contacting the remote server are\nnon-fatal.\n<p>\nAvailable since\
        \ API v11. Only available with Cloudera Manager Enterprise\nEdition."
      operationId: "deletePeer"
      produces:
      - "application/json"
      parameters:
      - name: "peerName"
        in: "path"
        description: "Name of peer to delete."
        required: true
        type: "string"
        x-exportParamName: "PeerName"
      - name: "type"
        in: "query"
        description: "Type of peer to delete. If null, REPLICATION peer type will\n\
          be deleted."
        required: false
        type: "string"
        enum:
        - "REPLICATION"
        - "STATUS_AGGREGATION"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCmPeer"
          examples:
            application/json:
              name: "..."
              type: "REPLICATION"
              url: "..."
              username: "..."
              password: "..."
              clouderaManagerCreatedUser: true
          headers: {}
  /cm/peers/{peerName}/commands/test:
    post:
      tags:
      - "CmPeersResource"
      summary: "Test the connectivity of a peer."
      description: "Test the connectivity of a peer.\n<p>\nAvailable since API v11.\
        \ Only available with Cloudera Manager Enterprise\nEdition."
      operationId: "testPeer"
      produces:
      - "application/json"
      parameters:
      - name: "peerName"
        in: "path"
        description: "Name of peer to test."
        required: true
        type: "string"
        x-exportParamName: "PeerName"
      - name: "type"
        in: "query"
        description: "Type of peer to test. If null, REPLICATION peer type will\n\
          be tested."
        required: false
        type: "string"
        enum:
        - "REPLICATION"
        - "STATUS_AGGREGATION"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /commands/{commandId}:
    get:
      tags:
      - "CommandsResource"
      summary: "Retrieve detailed information on an asynchronous command."
      description: "Retrieve detailed information on an asynchronous command.\n\n\
        <p>Cloudera Manager keeps the results and statuses of asynchronous\ncommands,\
        \ which have non-negative command IDs. On the other hand,\nsynchronous commands\
        \ complete immediately, and their results are passed\nback in the return object\
        \ of the command execution API call.\nOutside of that return object, there\
        \ is no way to check the result\nof a synchronous command.</p>"
      operationId: "readCommand"
      produces:
      - "application/json"
      parameters:
      - name: "commandId"
        in: "path"
        description: "The command id."
        required: true
        type: "number"
        x-exportParamName: "CommandId"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /commands/{commandId}/abort:
    post:
      tags:
      - "CommandsResource"
      summary: "Abort a running command."
      description: "Abort a running command."
      operationId: "abortCommand"
      produces:
      - "application/json"
      parameters:
      - name: "commandId"
        in: "path"
        description: "The command id."
        required: true
        type: "number"
        x-exportParamName: "CommandId"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /commands/{commandId}/retry:
    post:
      tags:
      - "CommandsResource"
      summary: "Try to rerun a command."
      description: "Try to rerun a command."
      operationId: "retry"
      produces:
      - "application/json"
      parameters:
      - name: "commandId"
        in: "path"
        description: "ID of the command that needs to be run."
        required: true
        type: "number"
        x-exportParamName: "CommandId"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /timeseries/dashboards:
    get:
      tags:
      - "DashboardsResource"
      summary: "Returns the list of all user-customized dashboards."
      description: "Returns the list of all user-customized dashboards. This includes\
        \ both the\nnew dashboards created by users as well as any user customizations\
        \ to\nbuilt-in dashboards.\n<p>\nAvailable since API v6."
      operationId: "getDashboards"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiDashboardList"
          examples:
            application/json:
              items:
              - name: "..."
                json: "..."
              - name: "..."
                json: "..."
          headers: {}
    post:
      tags:
      - "DashboardsResource"
      summary: "Creates the list of dashboards."
      description: "Creates the list of dashboards. If any of the dashboards already\
        \ exist\nthis whole command will fail and no dashboards will be created.\n\
        <p>\nAvailable since API v6."
      operationId: "createDashboards"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The list of dashboards to create."
        required: false
        schema:
          $ref: "#/definitions/ApiDashboardList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiDashboardList"
          examples:
            application/json:
              items:
              - name: "..."
                json: "..."
              - name: "..."
                json: "..."
          headers: {}
  /timeseries/dashboards/{dashboardName}:
    get:
      tags:
      - "DashboardsResource"
      summary: "Returns a dashboard definition for the specified name."
      description: "Returns a dashboard definition for the specified name. This dashboard\n\
        can be imported with the createDashboards API.\n<p>\nAvailable since API v6."
      operationId: "getDashboard"
      produces:
      - "application/json"
      parameters:
      - name: "dashboardName"
        in: "path"
        description: "The name of the dashboard."
        required: true
        type: "string"
        x-exportParamName: "DashboardName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiDashboard"
          examples:
            application/json:
              name: "..."
              json: "..."
          headers: {}
    delete:
      tags:
      - "DashboardsResource"
      summary: "Deletes a dashboard."
      description: "Deletes a dashboard.\n\n<p>\nAvailable since API v6."
      operationId: "deleteDashboard"
      produces:
      - "application/json"
      parameters:
      - name: "dashboardName"
        in: "path"
        description: "The name of the dashboard."
        required: true
        type: "string"
        x-exportParamName: "DashboardName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiDashboard"
          examples:
            application/json:
              name: "..."
              json: "..."
          headers: {}
  /dataContexts:
    get:
      tags:
      - "DataContextsResource"
      summary: "Get all the datacontexts."
      description: "Get all the datacontexts."
      operationId: "readDataContexts"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiDataContextList"
          examples:
            application/json:
              items:
              - name: "..."
                displayName: "..."
                nameservice: "..."
                createdTime: "..."
                lastModifiedTime: "..."
                services:
                - peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                - peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                servicesDetails:
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "HISTORY_NOT_AVAILABLE"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  clientConfigStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "CLUSTER"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "BAD_HEALTH"
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "NA"
                  healthSummary: "GOOD"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  clientConfigStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "CLUSTER"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "CONCERNING_HEALTH"
                supportedServiceTypes:
                - "..."
                - "..."
                allowedClusterVersions:
                - key: "..."
                  value: "..."
                - key: "..."
                  value: "..."
                configStalenessStatus: "FRESH"
                clientConfigStalenessStatus: "STALE"
                healthSummary: "BAD"
              - name: "..."
                displayName: "..."
                nameservice: "..."
                createdTime: "..."
                lastModifiedTime: "..."
                services:
                - peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                - peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                servicesDetails:
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "STARTING"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  clientConfigStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "HOST"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "CONCERNING_HEALTH"
                - name: "..."
                  type: "..."
                  clusterRef: {}
                  serviceState: "UNKNOWN"
                  healthSummary: "GOOD"
                  configStalenessStatus: "FRESH"
                  clientConfigStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  serviceUrl: "..."
                  roleInstancesUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "SERVICE"
                  config: {}
                  roles:
                  - {}
                  - {}
                  displayName: "..."
                  roleConfigGroups:
                  - {}
                  - {}
                  replicationSchedules:
                  - {}
                  - {}
                  snapshotPolicies:
                  - {}
                  - {}
                  entityStatus: "STARTING"
                supportedServiceTypes:
                - "..."
                - "..."
                allowedClusterVersions:
                - key: "..."
                  value: "..."
                - key: "..."
                  value: "..."
                configStalenessStatus: "STALE_REFRESHABLE"
                clientConfigStalenessStatus: "FRESH"
                healthSummary: "GOOD"
          headers: {}
    post:
      tags:
      - "DataContextsResource"
      summary: "Create a datacontext."
      description: "Create a datacontext. Following are are required fields of ApiDataContext\n\
        ApiDataContext#setName(String) <br>\nApiDataContext#setDisplayName(String)\
        \ <br>\nApiDataContext#setServices(java.util.List) <br>"
      operationId: "createDataContext"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "DataContext to be created."
        required: false
        schema:
          $ref: "#/definitions/ApiDataContext"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiDataContext"
          examples:
            application/json:
              name: "..."
              displayName: "..."
              nameservice: "..."
              createdTime: "..."
              lastModifiedTime: "..."
              services:
              - peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              - peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              servicesDetails:
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STOPPING"
                healthSummary: "NOT_AVAILABLE"
                configStalenessStatus: "STALE_REFRESHABLE"
                clientConfigStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "SERVICE"
                - "ROLE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "UNKNOWN"
                  commissionState: "OFFLINING"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "UNKNOWN"
                  entityStatus: "HISTORY_NOT_AVAILABLE"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "BUSY"
                  commissionState: "OFFLINED"
                  healthSummary: "HISTORY_NOT_AVAILABLE"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "CLUSTER"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_OBSERVER"
                  entityStatus: "BAD_HEALTH"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MINUTE"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "YEAR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "GOOD_HEALTH"
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STOPPING"
                healthSummary: "DISABLED"
                configStalenessStatus: "FRESH"
                clientConfigStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "SERVICE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "UNKNOWN"
                  commissionState: "DECOMMISSIONED"
                  healthSummary: "GOOD"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "UNKNOWN"
                  entityStatus: "DOWN"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "BUSY"
                  commissionState: "OFFLINING"
                  healthSummary: "HISTORY_NOT_AVAILABLE"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "CLUSTER"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_OBSERVER"
                  entityStatus: "UNKNOWN"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "HOUR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "DAY"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "STOPPING"
              supportedServiceTypes:
              - "..."
              - "..."
              allowedClusterVersions:
              - key: "..."
                value: "..."
              - key: "..."
                value: "..."
              configStalenessStatus: "STALE"
              clientConfigStalenessStatus: "STALE"
              healthSummary: "CONCERNING"
          headers: {}
  /dataContexts/{dataContextName}:
    get:
      tags:
      - "DataContextsResource"
      summary: "Reads information about a datacontext."
      description: "Reads information about a datacontext."
      operationId: "readDataContext"
      produces:
      - "application/json"
      parameters:
      - name: "dataContextName"
        in: "path"
        description: "Name of the datacontext."
        required: true
        type: "string"
        x-exportParamName: "DataContextName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiDataContext"
          examples:
            application/json:
              name: "..."
              displayName: "..."
              nameservice: "..."
              createdTime: "..."
              lastModifiedTime: "..."
              services:
              - peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              - peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              servicesDetails:
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STOPPING"
                healthSummary: "NOT_AVAILABLE"
                configStalenessStatus: "STALE_REFRESHABLE"
                clientConfigStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "SERVICE"
                - "HOST"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "HISTORY_NOT_AVAILABLE"
                  commissionState: "OFFLINED"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "SERVICE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                  entityStatus: "STOPPED"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STARTED"
                  commissionState: "UNKNOWN"
                  healthSummary: "CONCERNING"
                  configStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "SERVICE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "STANDALONE"
                  entityStatus: "DOWN"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MONTH"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MINUTE"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "BAD_HEALTH"
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STARTED"
                healthSummary: "NOT_AVAILABLE"
                configStalenessStatus: "FRESH"
                clientConfigStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "HOST"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "NA"
                  commissionState: "OFFLINING"
                  healthSummary: "BAD"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "CLUSTER"
                  - "ROLE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "UNKNOWN"
                  entityStatus: "UNKNOWN"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STARTED"
                  commissionState: "DECOMMISSIONED"
                  healthSummary: "GOOD"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "ACTIVE"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "CLUSTER"
                  - "ROLE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "STANDALONE"
                  entityStatus: "STOPPING"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "HOUR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MINUTE"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "BAD_HEALTH"
              supportedServiceTypes:
              - "..."
              - "..."
              allowedClusterVersions:
              - key: "..."
                value: "..."
              - key: "..."
                value: "..."
              configStalenessStatus: "STALE_REFRESHABLE"
              clientConfigStalenessStatus: "STALE"
              healthSummary: "GOOD"
          headers: {}
    delete:
      tags:
      - "DataContextsResource"
      summary: "Delete a datacontext."
      description: "Delete a datacontext."
      operationId: "deleteDataContext"
      produces:
      - "application/json"
      parameters:
      - name: "dataContextName"
        in: "path"
        description: "Name of the datacontext."
        required: true
        type: "string"
        x-exportParamName: "DataContextName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiDataContext"
          examples:
            application/json:
              name: "..."
              displayName: "..."
              nameservice: "..."
              createdTime: "..."
              lastModifiedTime: "..."
              services:
              - peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              - peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              servicesDetails:
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STOPPED"
                healthSummary: "BAD"
                configStalenessStatus: "STALE_REFRESHABLE"
                clientConfigStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "SERVICE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STOPPED"
                  commissionState: "COMMISSIONED"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "ROLE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_FOLLOWER"
                  entityStatus: "UNKNOWN"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "HISTORY_NOT_AVAILABLE"
                  commissionState: "OFFLINING"
                  healthSummary: "GOOD"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "SERVICE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                  entityStatus: "UNKNOWN"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MONTH"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MINUTE"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "STOPPED"
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STOPPED"
                healthSummary: "CONCERNING"
                configStalenessStatus: "FRESH"
                clientConfigStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "CLUSTER"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "NA"
                  commissionState: "UNKNOWN"
                  healthSummary: "DISABLED"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "ACTIVE"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "UNKNOWN"
                  entityStatus: "STOPPED"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STOPPING"
                  commissionState: "UNKNOWN"
                  healthSummary: "BAD"
                  configStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER"
                  entityStatus: "GOOD_HEALTH"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "YEAR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "HOUR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "STARTING"
              supportedServiceTypes:
              - "..."
              - "..."
              allowedClusterVersions:
              - key: "..."
                value: "..."
              - key: "..."
                value: "..."
              configStalenessStatus: "STALE_REFRESHABLE"
              clientConfigStalenessStatus: "FRESH"
              healthSummary: "CONCERNING"
          headers: {}
  /events:
    get:
      tags:
      - "EventsResource"
      summary: "Allows you to query events in the system."
      description: "Allows you to query events in the system."
      operationId: "readEvents"
      produces:
      - "application/json"
      parameters:
      - name: "maxResults"
        in: "query"
        description: "The maximum number of events to return."
        required: false
        type: "integer"
        default: 100
        x-exportParamName: "MaxResults"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "The query to perform to find events in the system. It accepts\n\
          querying the intersection of a list of constraints,\njoined together with\
          \ semicolons (without spaces). For example:\n</p>\n<dl>\n<dt>alert==true</dt>\n\
          <dd>looks for alerts.</dd>\n<dt>alert==true;attributes.host!=flaky.mysite.com</dt>\n\
          <dd>looks for alerts, but exclude those with the host attribute of\n\"flaky.mysite.com\"\
          .</dd>\n<dt>category==log_event;attributes.log_level==ERROR</dt>\n<dd>looks\
          \ for error log events. Event attribute matching is\ncase sensitive.</dd>\n\
          <dt>attributes.service==hbase1;content==hlog</dt>\n<dd>looks for any events\
          \ from the \"hbase1\" service that\nmention \"hlog\".</dd>\n<dt>attributes.service==hbase1;content!=hlog</dt>\n\
          <dd>looks for any events from the \"hbase1\" service that\ndo not mention\
          \ \"hlog\".<br/>\nA query must not contain only negative\nconstraints (<em>!=</em>).\
          \ It returns empty results because\nthere is nothing to perform exclusion\
          \ on.</dd>\n<dt>attributes.role_type==NAMENODE;severity==critical important</dt>\n\
          <dd>looks for any important or critical events related to\nall NameNodes.</dd>\n\
          <dt>severity==critical;timeReceived=ge=2012-05-04T00:00;timeReceived=lt=2012-05-04T00:10</dt>\n\
          <dd>looks for critical events received between the given 10 minute\nrange.\
          \ <br/>\nWhen polling for events, use <em>timeReceived</em>\ninstead of\
          \ <em>timeOccurred</em> because events arrive\nout of order.</dd>\n</dl>\n\
          \nYou may query any fields present in the ApiEvent object. You can\nalso\
          \ query by event attribute values using the <em>attributes.*</em>\nsyntax.\
          \ Values for date time fields (e.g. <em>timeOccurred</em>,\n<em>timeReceived</em>)\
          \ should be ISO8601 timestamps.\n<p>\nThe other valid comparators are <em>=lt=</em>,\
          \ <em>=le=</em>,\n<em>=ge=</em>, and <em>=gt=</em>. They stand for \"&lt;\"\
          , \"&lt;=\",\n\"&gt;=\", \"&gt;\" respectively. These comparators are only\
          \ applicable\nfor date time fields."
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "resultOffset"
        in: "query"
        description: "Specified the offset of events to return."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "ResultOffset"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiEventQueryResult"
          examples:
            application/json:
              totalResults: 12345
              items:
              - id: "..."
                content: "..."
                timeOccurred: "..."
                timeReceived: "..."
                category: "LOG_EVENT"
                severity: "INFORMATIONAL"
                alert: true
                attributes:
                - name: "..."
                  values:
                  - "..."
                  - "..."
                - name: "..."
                  values:
                  - "..."
                  - "..."
              - id: "..."
                content: "..."
                timeOccurred: "..."
                timeReceived: "..."
                category: "SYSTEM"
                severity: "UNKNOWN"
                alert: true
                attributes:
                - name: "..."
                  values:
                  - "..."
                  - "..."
                - name: "..."
                  values:
                  - "..."
                  - "..."
          headers: {}
  /events/{eventId}:
    get:
      tags:
      - "EventsResource"
      summary: "Returns a specific event in the system."
      description: "Returns a specific event in the system"
      operationId: "readEvent"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "The UUID of the event to read"
        required: true
        type: "string"
        x-exportParamName: "EventId"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiEvent"
          examples:
            application/json:
              id: "..."
              content: "..."
              timeOccurred: "..."
              timeReceived: "..."
              category: "HBASE"
              severity: "CRITICAL"
              alert: true
              attributes:
              - name: "..."
                values:
                - "..."
                - "..."
              - name: "..."
                values:
                - "..."
                - "..."
          headers: {}
  /externalAccounts/create:
    post:
      tags:
      - "ExternalAccountsResource"
      summary: "Create a new external account."
      description: "Create a new external account.\nAccount names and display names\
        \ must be unique, i.e. they must not share names or display\nnames with an\
        \ existing account.\nServer generates an account ID for the requested account."
      operationId: "createAccount"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiExternalAccount"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalAccount"
          examples:
            application/json:
              name: "..."
              displayName: "..."
              createdTime: "..."
              lastModifiedTime: "..."
              typeName: "..."
              accountConfigs:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
          headers: {}
  /externalAccounts/supportedCategories:
    get:
      tags:
      - "ExternalAccountsResource"
      summary: "List of external account categories supported by this Cloudera Manager."
      description: "List of external account categories supported by this Cloudera\
        \ Manager."
      operationId: "getSupportedCategories"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalAccountCategoryList"
          examples:
            application/json:
              items:
              - name: "..."
                displayName: "..."
                description: "..."
              - name: "..."
                displayName: "..."
                description: "..."
          headers: {}
  /externalAccounts/update:
    put:
      tags:
      - "ExternalAccountsResource"
      summary: "Update an external account."
      description: "Update an external account."
      operationId: "updateAccount"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiExternalAccount"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalAccount"
          examples:
            application/json:
              name: "..."
              displayName: "..."
              createdTime: "..."
              lastModifiedTime: "..."
              typeName: "..."
              accountConfigs:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
          headers: {}
  /externalAccounts/account/{name}:
    get:
      tags:
      - "ExternalAccountsResource"
      summary: "Get a single external account by account name."
      description: "Get a single external account by account name."
      operationId: "readAccount"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalAccount"
          examples:
            application/json:
              name: "..."
              displayName: "..."
              createdTime: "..."
              lastModifiedTime: "..."
              typeName: "..."
              accountConfigs:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
          headers: {}
  /externalAccounts/accountByDisplayName/{displayName}:
    get:
      tags:
      - "ExternalAccountsResource"
      summary: "Get a single external account by display name."
      description: "Get a single external account by display name."
      operationId: "readAccountByDisplayName"
      produces:
      - "application/json"
      parameters:
      - name: "displayName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "DisplayName"
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalAccount"
          examples:
            application/json:
              name: "..."
              displayName: "..."
              createdTime: "..."
              lastModifiedTime: "..."
              typeName: "..."
              accountConfigs:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
          headers: {}
  /externalAccounts/delete/{name}:
    delete:
      tags:
      - "ExternalAccountsResource"
      summary: "Delete an external account, specifying its name."
      description: "Delete an external account, specifying its name."
      operationId: "deleteAccount"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalAccount"
          examples:
            application/json:
              name: "..."
              displayName: "..."
              createdTime: "..."
              lastModifiedTime: "..."
              typeName: "..."
              accountConfigs:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
          headers: {}
  /externalAccounts/supportedTypes/{categoryName}:
    get:
      tags:
      - "ExternalAccountsResource"
      summary: "List of external account types supported by this Cloudera Manager\
        \ by category."
      description: "List of external account types supported by this Cloudera Manager\
        \ by category."
      operationId: "getSupportedTypes"
      produces:
      - "application/json"
      parameters:
      - name: "categoryName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "CategoryName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalAccountTypeList"
          examples:
            application/json:
              items:
              - name: "..."
                categoryName: "..."
                type: "..."
                displayName: "..."
                description: "..."
                allowedAccountConfigs:
                  items:
                  - {}
                  - {}
              - name: "..."
                categoryName: "..."
                type: "..."
                displayName: "..."
                description: "..."
                allowedAccountConfigs:
                  items:
                  - {}
                  - {}
          headers: {}
  /externalAccounts/type/{typeName}:
    get:
      tags:
      - "ExternalAccountsResource"
      summary: "Get a list of external accounts for a specific account type."
      description: "Get a list of external accounts for a specific account type."
      operationId: "readAccounts"
      produces:
      - "application/json"
      parameters:
      - name: "typeName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "TypeName"
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalAccountList"
          examples:
            application/json:
              items:
              - name: "..."
                displayName: "..."
                createdTime: "..."
                lastModifiedTime: "..."
                typeName: "..."
                accountConfigs:
                  items:
                  - {}
                  - {}
              - name: "..."
                displayName: "..."
                createdTime: "..."
                lastModifiedTime: "..."
                typeName: "..."
                accountConfigs:
                  items:
                  - {}
                  - {}
          headers: {}
  /externalAccounts/account/{name}/config:
    get:
      tags:
      - "ExternalAccountsResource"
      summary: "Get configs of external account for the given account name."
      description: "Get configs of external account for the given account name."
      operationId: "readConfig"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "The external account name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "view"
        in: "query"
        description: "The view to materialize, either \"summary\" or \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "ExternalAccountsResource"
      summary: "Upadate configs of external account for the given account name."
      description: "Upadate configs of external account for the given account name."
      operationId: "updateConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "The external account name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "Settings to update."
        required: false
        schema:
          $ref: "#/definitions/ApiConfigList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /externalAccounts/typeInfo/{typeName}/commandsByName:
    get:
      tags:
      - "ExternalAccountsResource"
      summary: "Lists all the commands that can be executed by name on the\nprovided\
        \ external account type."
      description: "Lists all the commands that can be executed by name on the\nprovided\
        \ external account type.\n<p>\nAvailable since API v16."
      operationId: "listExternalAccountCommands"
      produces:
      - "application/json"
      parameters:
      - name: "typeName"
        in: "path"
        description: "The external account type name"
        required: true
        type: "string"
        x-exportParamName: "TypeName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommandMetadataList"
          examples:
            application/json:
              items:
              - name: "..."
                argSchema: "..."
              - name: "..."
                argSchema: "..."
          headers: {}
  /externalAccounts/account/{name}/commands/{commandName}:
    post:
      tags:
      - "ExternalAccountsResource"
      summary: "Executes a command on the external account specified\nby name."
      description: "Executes a command on the external account specified\nby name.\n\
        <p>\nAvailable since API v16."
      operationId: "externalAccountCommandByName"
      produces:
      - "application/json"
      parameters:
      - name: "commandName"
        in: "path"
        description: "The command name."
        required: true
        type: "string"
        x-exportParamName: "CommandName"
      - name: "name"
        in: "path"
        description: "The external account name."
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /externalUserMappings:
    get:
      tags:
      - "ExternalUserMappingsResource"
      summary: "Returns a list of the external user mappings configured in the system."
      description: "Returns a list of the external user mappings configured in the\
        \ system."
      operationId: "readExternalUserMappings"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalUserMappingList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "SAML_ATTRIBUTE"
                uuid: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
              - name: "..."
                type: "EXTERNAL_PROGRAM"
                uuid: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
          headers: {}
    post:
      tags:
      - "ExternalUserMappingsResource"
      summary: "Creates a list of external user mappings."
      description: "Creates a list of external user mappings"
      operationId: "createExternalUserMappings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of external user mappings to create."
        required: false
        schema:
          $ref: "#/definitions/ApiExternalUserMappingList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalUserMappingList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "EXTERNAL_PROGRAM"
                uuid: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
              - name: "..."
                type: "EXTERNAL_PROGRAM"
                uuid: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
          headers: {}
  /externalUserMappings/{uuid}:
    get:
      tags:
      - "ExternalUserMappingsResource"
      summary: "Returns detailed information about an external user mapping."
      description: "Returns detailed information about an external user mapping."
      operationId: "readExternalUserMapping"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The external user mapping to read."
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalUserMapping"
          examples:
            application/json:
              name: "..."
              type: "SAML_ATTRIBUTE"
              uuid: "..."
              authRoles:
              - displayName: "..."
                name: "..."
                uuid: "..."
              - displayName: "..."
                name: "..."
                uuid: "..."
          headers: {}
    put:
      tags:
      - "ExternalUserMappingsResource"
      summary: "Updates the given external user mapping's information."
      description: "Updates the given external user mapping's information."
      operationId: "updateExternalUserMapping"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "Uuid of the external user mapping being updated."
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      - in: "body"
        name: "body"
        description: "The external user mapping information."
        required: false
        schema:
          $ref: "#/definitions/ApiExternalUserMapping"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalUserMapping"
          examples:
            application/json:
              name: "..."
              type: "SAML_ATTRIBUTE"
              uuid: "..."
              authRoles:
              - displayName: "..."
                name: "..."
                uuid: "..."
              - displayName: "..."
                name: "..."
                uuid: "..."
          headers: {}
    delete:
      tags:
      - "ExternalUserMappingsResource"
      summary: "Deletes an external user mapping from the system."
      description: "Deletes an external user mapping from the system.\n<p/>"
      operationId: "deleteExternalUserMapping"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The uuid of the external user mapping to delete."
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiExternalUserMapping"
          examples:
            application/json:
              name: "..."
              type: "SAML_SCRIPT"
              uuid: "..."
              authRoles:
              - displayName: "..."
                name: "..."
                uuid: "..."
              - displayName: "..."
                name: "..."
                uuid: "..."
          headers: {}
  /clusters/{clusterName}/hostTemplates:
    get:
      tags:
      - "HostTemplatesResource"
      summary: "Lists all host templates in a cluster."
      description: "Lists all host templates in a cluster.\n<p>\nAvailable since API\
        \ v3."
      operationId: "readHostTemplates"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostTemplateList"
          examples:
            application/json:
              items:
              - name: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                roleConfigGroupRefs:
                - roleConfigGroupName: "..."
                - roleConfigGroupName: "..."
              - name: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                roleConfigGroupRefs:
                - roleConfigGroupName: "..."
                - roleConfigGroupName: "..."
          headers: {}
    post:
      tags:
      - "HostTemplatesResource"
      summary: "Creates new host templates."
      description: "Creates new host templates.\n<p>\nHost template names must be\
        \ unique across clusters.\n<p>\nAvailable since API v3."
      operationId: "createHostTemplates"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: "The list of host templates to create."
        required: false
        schema:
          $ref: "#/definitions/ApiHostTemplateList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostTemplateList"
          examples:
            application/json:
              items:
              - name: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                roleConfigGroupRefs:
                - roleConfigGroupName: "..."
                - roleConfigGroupName: "..."
              - name: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                roleConfigGroupRefs:
                - roleConfigGroupName: "..."
                - roleConfigGroupName: "..."
          headers: {}
  /clusters/{clusterName}/hostTemplates/{hostTemplateName}:
    get:
      tags:
      - "HostTemplatesResource"
      summary: "Retrieves information about a host template."
      description: "Retrieves information about a host template.\n<p>\nAvailable since\
        \ API v3."
      operationId: "readHostTemplate"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "hostTemplateName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "HostTemplateName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostTemplate"
          examples:
            application/json:
              name: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              roleConfigGroupRefs:
              - roleConfigGroupName: "..."
              - roleConfigGroupName: "..."
          headers: {}
    put:
      tags:
      - "HostTemplatesResource"
      summary: "Updates an existing host template."
      description: "Updates an existing host template.\n<p>\nCan be used to update\
        \ the role config groups in a host template\nor rename it.\n<p>\nAvailable\
        \ since API v3."
      operationId: "updateHostTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "hostTemplateName"
        in: "path"
        description: "Host template with updated fields."
        required: true
        type: "string"
        x-exportParamName: "HostTemplateName"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiHostTemplate"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostTemplate"
          examples:
            application/json:
              name: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              roleConfigGroupRefs:
              - roleConfigGroupName: "..."
              - roleConfigGroupName: "..."
          headers: {}
    delete:
      tags:
      - "HostTemplatesResource"
      summary: "Deletes a host template."
      description: "Deletes a host template.\n<p>\nAvailable since API v3."
      operationId: "deleteHostTemplate"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "hostTemplateName"
        in: "path"
        description: "Host template to delete."
        required: true
        type: "string"
        x-exportParamName: "HostTemplateName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostTemplate"
          examples:
            application/json:
              name: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              roleConfigGroupRefs:
              - roleConfigGroupName: "..."
              - roleConfigGroupName: "..."
          headers: {}
  /clusters/{clusterName}/hostTemplates/{hostTemplateName}/commands/applyHostTemplate:
    post:
      tags:
      - "HostTemplatesResource"
      summary: "Applies a host template to a collection of hosts."
      description: "Applies a host template to a collection of hosts. This will create\
        \ a role\nfor each role config group on each of the hosts.\n<p>\nThe provided\
        \ hosts must not have any existing roles on them and if the\ncluster is not\
        \ using parcels, the hosts must have a CDH version matching\nthat of the cluster\
        \ version.\n<p>\nAvailable since API v3."
      operationId: "applyHostTemplate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "hostTemplateName"
        in: "path"
        description: "Host template to apply."
        required: true
        type: "string"
        x-exportParamName: "HostTemplateName"
      - name: "startRoles"
        in: "query"
        description: "Whether to start the newly created roles or not."
        required: false
        type: "boolean"
        x-exportParamName: "StartRoles"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        description: "List of hosts to apply the host template to."
        required: false
        schema:
          $ref: "#/definitions/ApiHostRefList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /hosts:
    get:
      tags:
      - "HostsResource"
      summary: "Returns the hostIds for all hosts in the system."
      description: "Returns the hostIds for all hosts in the system."
      operationId: "readHosts"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: "The view to materialize"
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostList"
          examples:
            application/json:
              items:
              - hostId: "..."
                ipAddress: "..."
                hostname: "..."
                rackId: "..."
                lastHeartbeat: "..."
                roleRefs:
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                healthSummary: "GOOD"
                healthChecks:
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                hostUrl: "..."
                maintenanceMode: true
                commissionState: "UNKNOWN"
                maintenanceOwners:
                - "SERVICE"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                numCores: 12345
                numPhysicalCores: 12345
                totalPhysMemBytes: 12345
                entityStatus: "NONE"
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              - hostId: "..."
                ipAddress: "..."
                hostname: "..."
                rackId: "..."
                lastHeartbeat: "..."
                roleRefs:
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                healthSummary: "CONCERNING"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                hostUrl: "..."
                maintenanceMode: true
                commissionState: "OFFLINING"
                maintenanceOwners:
                - "HOST"
                - "HOST"
                config:
                  items:
                  - {}
                  - {}
                numCores: 12345
                numPhysicalCores: 12345
                totalPhysMemBytes: 12345
                entityStatus: "HISTORY_NOT_AVAILABLE"
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
          headers: {}
    post:
      tags:
      - "HostsResource"
      summary: "."
      description: "<p>Create one or more hosts.</p>\n<p>You must specify at least\
        \ the\nhostname and ipAddress in the request objects.\nIf no hostId is specified,\
        \ it will be set to the\nhostname.  It is an error to try and create\nhost\
        \ with the same hostId as another host.</p>"
      operationId: "createHosts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The list of hosts to create"
        required: false
        schema:
          $ref: "#/definitions/ApiHostList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostList"
          examples:
            application/json:
              items:
              - hostId: "..."
                ipAddress: "..."
                hostname: "..."
                rackId: "..."
                lastHeartbeat: "..."
                roleRefs:
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                healthSummary: "DISABLED"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                hostUrl: "..."
                maintenanceMode: true
                commissionState: "DECOMMISSIONING"
                maintenanceOwners:
                - "ROLE"
                - "HOST"
                config:
                  items:
                  - {}
                  - {}
                numCores: 12345
                numPhysicalCores: 12345
                totalPhysMemBytes: 12345
                entityStatus: "UNKNOWN_HEALTH"
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              - hostId: "..."
                ipAddress: "..."
                hostname: "..."
                rackId: "..."
                lastHeartbeat: "..."
                roleRefs:
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                healthSummary: "DISABLED"
                healthChecks:
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                hostUrl: "..."
                maintenanceMode: true
                commissionState: "DECOMMISSIONED"
                maintenanceOwners:
                - "CLUSTER"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                numCores: 12345
                numPhysicalCores: 12345
                totalPhysMemBytes: 12345
                entityStatus: "DOWN"
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
          headers: {}
    delete:
      tags:
      - "HostsResource"
      summary: "Delete all hosts in the system."
      description: "Delete all hosts in the system"
      operationId: "deleteAllHosts"
      produces:
      - "application/json"
      parameters: []
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHostList"
          examples:
            application/json:
              items:
              - hostId: "..."
                ipAddress: "..."
                hostname: "..."
                rackId: "..."
                lastHeartbeat: "..."
                roleRefs:
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                healthSummary: "DISABLED"
                healthChecks:
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                hostUrl: "..."
                maintenanceMode: true
                commissionState: "COMMISSIONED"
                maintenanceOwners:
                - "CLUSTER"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                numCores: 12345
                numPhysicalCores: 12345
                totalPhysMemBytes: 12345
                entityStatus: "CONCERNING_HEALTH"
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              - hostId: "..."
                ipAddress: "..."
                hostname: "..."
                rackId: "..."
                lastHeartbeat: "..."
                roleRefs:
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                - clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                healthSummary: "GOOD"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                hostUrl: "..."
                maintenanceMode: true
                commissionState: "UNKNOWN"
                maintenanceOwners:
                - "CLUSTER"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                numCores: 12345
                numPhysicalCores: 12345
                totalPhysMemBytes: 12345
                entityStatus: "DOWN"
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
          headers: {}
  /hosts/{hostId}:
    get:
      tags:
      - "HostsResource"
      summary: "Returns a specific Host in the system."
      description: "Returns a specific Host in the system."
      operationId: "readHost"
      produces:
      - "application/json"
      parameters:
      - name: "hostId"
        in: "path"
        description: "The ID of the host to read."
        required: true
        type: "string"
        x-exportParamName: "HostId"
      - name: "view"
        in: "query"
        description: "The view to materialize. Defaults to 'full'."
        required: false
        type: "string"
        default: "full"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHost"
          examples:
            application/json:
              hostId: "..."
              ipAddress: "..."
              hostname: "..."
              rackId: "..."
              lastHeartbeat: "..."
              roleRefs:
              - clusterName: "..."
                serviceName: "..."
                roleName: "..."
              - clusterName: "..."
                serviceName: "..."
                roleName: "..."
              healthSummary: "HISTORY_NOT_AVAILABLE"
              healthChecks:
              - name: "..."
                summary: "HISTORY_NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "CONCERNING"
                explanation: "..."
                suppressed: true
              hostUrl: "..."
              maintenanceMode: true
              commissionState: "DECOMMISSIONED"
              maintenanceOwners:
              - "SERVICE"
              - "ROLE"
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              numCores: 12345
              numPhysicalCores: 12345
              totalPhysMemBytes: 12345
              entityStatus: "DISABLED_HEALTH"
              clusterRef:
                clusterName: "..."
                displayName: "..."
          headers: {}
    put:
      tags:
      - "HostsResource"
      summary: "."
      description: "<p>Update an existing host in the system.</p>\n<p>Currently, only\
        \ updating the rackId is supported.  All other fields\nof the host will be\
        \ ignored.</p>"
      operationId: "updateHost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "hostId"
        in: "path"
        description: "The hostId to update"
        required: true
        type: "string"
        x-exportParamName: "HostId"
      - in: "body"
        name: "body"
        description: "The updated host object."
        required: false
        schema:
          $ref: "#/definitions/ApiHost"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHost"
          examples:
            application/json:
              hostId: "..."
              ipAddress: "..."
              hostname: "..."
              rackId: "..."
              lastHeartbeat: "..."
              roleRefs:
              - clusterName: "..."
                serviceName: "..."
                roleName: "..."
              - clusterName: "..."
                serviceName: "..."
                roleName: "..."
              healthSummary: "DISABLED"
              healthChecks:
              - name: "..."
                summary: "HISTORY_NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "BAD"
                explanation: "..."
                suppressed: true
              hostUrl: "..."
              maintenanceMode: true
              commissionState: "DECOMMISSIONED"
              maintenanceOwners:
              - "ROLE"
              - "ROLE"
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              numCores: 12345
              numPhysicalCores: 12345
              totalPhysMemBytes: 12345
              entityStatus: "STOPPED"
              clusterRef:
                clusterName: "..."
                displayName: "..."
          headers: {}
    delete:
      tags:
      - "HostsResource"
      summary: "Delete a host from the system."
      description: "Delete a host from the system"
      operationId: "deleteHost"
      produces:
      - "application/json"
      parameters:
      - name: "hostId"
        in: "path"
        description: "The ID of the host to remove"
        required: true
        type: "string"
        x-exportParamName: "HostId"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHost"
          examples:
            application/json:
              hostId: "..."
              ipAddress: "..."
              hostname: "..."
              rackId: "..."
              lastHeartbeat: "..."
              roleRefs:
              - clusterName: "..."
                serviceName: "..."
                roleName: "..."
              - clusterName: "..."
                serviceName: "..."
                roleName: "..."
              healthSummary: "HISTORY_NOT_AVAILABLE"
              healthChecks:
              - name: "..."
                summary: "BAD"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "HISTORY_NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              hostUrl: "..."
              maintenanceMode: true
              commissionState: "OFFLINING"
              maintenanceOwners:
              - "HOST"
              - "ROLE"
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              numCores: 12345
              numPhysicalCores: 12345
              totalPhysMemBytes: 12345
              entityStatus: "UNKNOWN"
              clusterRef:
                clusterName: "..."
                displayName: "..."
          headers: {}
  /hosts/{hostId}/config:
    get:
      tags:
      - "HostsResource"
      summary: "Retrieves the configuration of a specific host."
      description: "Retrieves the configuration of a specific host."
      operationId: "readHostConfig"
      produces:
      - "application/json"
      parameters:
      - name: "hostId"
        in: "path"
        description: "The ID of the host."
        required: true
        type: "string"
        x-exportParamName: "HostId"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "HostsResource"
      summary: "Updates the host configuration with the given values."
      description: "Updates the host configuration with the given values.\n<p>\nIf\
        \ a value is set in the given configuration, it will be added\nto the host's\
        \ configuration, replacing any existing entries.\nIf a value is unset (its\
        \ value is null), the existing\nconfiguration for the attribute will be erased,\
        \ if any.\n<p>\nAttributes that are not listed in the input will maintain\
        \ their\ncurrent values in the configuration."
      operationId: "updateHostConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "hostId"
        in: "path"
        description: "The ID of the host."
        required: true
        type: "string"
        x-exportParamName: "HostId"
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "Configuration changes."
        required: false
        schema:
          $ref: "#/definitions/ApiConfigList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /hosts/{hostId}/metrics:
    get:
      tags:
      - "HostsResource"
      summary: "Fetch metric readings for a host."
      description: "Fetch metric readings for a host.\n<p>\nBy default, this call\
        \ will look up all metrics available for the host. If\nonly specific metrics\
        \ are desired, use the <i>metrics</i> parameter.\n<p>\nBy default, the returned\
        \ results correspond to a 5 minute window based on\nthe provided end time\
        \ (which defaults to the current server time). The\n<i>from</i> and <i>to</i>\
        \ parameters can be used to control the window\nbeing queried. A maximum window\
        \ of 3 hours is enforced.\n<p>\nWhen requesting a \"full\" view, aside from\
        \ the extended properties of the\nreturned metric data, the collection will\
        \ also contain information about\nall metrics available for the role, even\
        \ if no readings are available\nin the requested window.\n<p>\nHost metrics\
        \ also include per-network interface and per-storage device\nmetrics. Since\
        \ collecting this data incurs in more overhead, query\nparameters can be used\
        \ to choose which network interfaces and storage\ndevices to query, or to\
        \ these metrics altogether.\n<p>\nStorage metrics are collected at different\
        \ levels; for example, per-disk\nand per-partition metrics are available.\
        \ The \"storageIds\" parameter can be\nused to filter specific storage IDs.\n\
        <p>\nIn the returned data, the network interfaces and storage IDs can be\n\
        identified by looking at the \"context\" property of the metric objects."
      operationId: "getMetrics"
      produces:
      - "application/json"
      parameters:
      - name: "hostId"
        in: "path"
        description: "The host's ID."
        required: true
        type: "string"
        x-exportParamName: "HostId"
      - name: "from"
        in: "query"
        description: "Start of the period to query."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "ifs"
        in: "query"
        description: "Network interfaces to query for metrics (default = all)."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Ifs"
      - name: "metrics"
        in: "query"
        description: "Filter for which metrics to query."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Metrics"
      - name: "queryNw"
        in: "query"
        description: "Whether to query for network interface metrics."
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "QueryNw"
        x-optionalDataType: "Bool"
      - name: "queryStorage"
        in: "query"
        description: "Whether to query for storage metrics."
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "QueryStorage"
        x-optionalDataType: "Bool"
      - name: "storageIds"
        in: "query"
        description: "Storage context IDs to query for metrics (default = all)."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "StorageIds"
      - name: "to"
        in: "query"
        description: "End of the period to query."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiMetricList"
          examples:
            application/json:
              items:
              - name: "..."
                context: "..."
                unit: "..."
                data:
                - timestamp: "..."
                  value: 12345.0
                - timestamp: "..."
                  value: 12345.0
                displayName: "..."
                description: "..."
              - name: "..."
                context: "..."
                unit: "..."
                data:
                - timestamp: "..."
                  value: 12345.0
                - timestamp: "..."
                  value: 12345.0
                displayName: "..."
                description: "..."
          headers: {}
      deprecated: true
  /hosts/{hostId}/commands/enterMaintenanceMode:
    post:
      tags:
      - "HostsResource"
      summary: "Put the host into maintenance mode."
      description: "Put the host into maintenance mode. This is a synchronous command.\n\
        The result is known immediately upon return.\n\n<p>Available since API v2.</p>"
      operationId: "enterMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "hostId"
        in: "path"
        description: "The ID of the host"
        required: true
        type: "string"
        x-exportParamName: "HostId"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /hosts/{hostId}/commands/exitMaintenanceMode:
    post:
      tags:
      - "HostsResource"
      summary: "Take the host out of maintenance mode."
      description: "Take the host out of maintenance mode. This is a synchronous command.\
        \ The\nresult is known immediately upon return.\n\n<p>\nAvailable since API\
        \ v2.\n</p>"
      operationId: "exitMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "hostId"
        in: "path"
        description: "The ID of the host"
        required: true
        type: "string"
        x-exportParamName: "HostId"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /hosts/{hostId}/commands/generateHostCerts:
    post:
      tags:
      - "HostsResource"
      summary: "Generates (or regenerates) a key and certificate for this host if\
        \ Auto-TLS is enabled."
      description: "Generates (or regenerates) a key and certificate for this host\
        \ if Auto-TLS is enabled."
      operationId: "generateHostCerts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "hostId"
        in: "path"
        description: "The ID of the host to generate a certificate for."
        required: true
        type: "string"
        x-exportParamName: "HostId"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiGenerateHostCertsArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /hosts/{hostId}/commands/migrateRoles:
    post:
      tags:
      - "HostsResource"
      summary: "Migrate roles to a different host."
      description: "Migrate roles to a different host.\n<p>\nThis command applies\
        \ only to HDFS NameNode, JournalNode, and Failover\nController roles. In order\
        \ to migrate these roles:\n<ul>\n<li>HDFS High Availability must be enabled,\
        \ using quorum-based storage.</li>\n<li>HDFS must not be configured to use\
        \ a federated nameservice.</li>\n</ul>\n<b>Migrating a NameNode or JournalNode\
        \ role requires cluster downtime</b>.\nHDFS, along with all of its dependent\
        \ services, will be stopped at the\nbeginning of the migration process, and\
        \ restarted at its conclusion.\n<p>If the active NameNode is selected for\
        \ migration, a manual failover\nwill be performed before the role is migrated.\
        \ The role will remain in\nstandby mode after the migration is complete.\n\
        <p>When migrating a NameNode role, the co-located Failover Controller\nrole\
        \ must be migrated as well if automatic failover is enabled. The\nFailover\
        \ Controller role name must be included in the list of role\nnames to migrate\
        \ specified in the arguments to this command (it will\nnot be included implicitly).\
        \ This command does not allow a Failover\nController role to be moved by itself,\
        \ although it is possible to move\na JournalNode independently.\n<p>\nAvailable\
        \ since API v10."
      operationId: "migrateRoles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "hostId"
        in: "path"
        description: "The ID of the host on which the roles to migrate currently\n\
          reside"
        required: true
        type: "string"
        x-exportParamName: "HostId"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiMigrateRolesArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/impalaQueries:
    get:
      tags:
      - "ImpalaQueriesResource"
      summary: "Returns a list of queries that satisfy the filter."
      description: "Returns a list of queries that satisfy the filter\n<p>\nAvailable\
        \ since API v4."
      operationId: "getImpalaQueries"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "filter"
        in: "query"
        description: "A filter to apply to the queries. A basic filter tests the\n\
          value of an attribute and looks something like 'rowsFetched = 1' or\n'user\
          \ = root'. Multiple basic filters can be combined into a complex\nexpression\
          \ using standard and / or boolean logic and parenthesis.\nAn example of\
          \ a complex filter is: 'query_duration > 5s and (user = root or\nuser =\
          \ myUserName)'. An example of expected full query string in requested\n\
          URL is: '?filter=(query_duration > 5s and (user = root or user = myUserName))'."
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "from"
        in: "query"
        description: "Start of the period to query in ISO 8601 format (defaults to\
          \ 5\nminutes before the 'to' time)."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of queries to return. Queries will be\nreturned\
          \ in the following order:\n<ul>\n<li> All executing queries, ordered from\
          \ longest to shortest running </li>\n<li> All completed queries order by\
          \ end time descending. </li>\n</ul>"
        required: false
        type: "integer"
        default: 100
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "offset"
        in: "query"
        description: "The offset to start returning queries from. This is useful\n\
          for paging through lists of queries. Note that this has non-deterministic\n\
          behavior if executing queries are included in the response because they\n\
          can disappear from the list while paging. To exclude executing queries\n\
          from the response and a 'executing = false' clause to your filter."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "to"
        in: "query"
        description: "End of the period to query in ISO 8601 format (defaults to\n\
          current time)."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiImpalaQueryResponse"
          examples:
            application/json:
              queries:
              - queryId: "..."
                statement: "..."
                queryType: "..."
                queryState: "..."
                startTime: "..."
                endTime: "..."
                rowsProduced: 12345
                attributes:
                  property1: "..."
                  property2: "..."
                user: "..."
                coordinator:
                  hostId: "..."
                  hostname: "..."
                detailsAvailable: true
                database: "..."
                durationMillis: 12345
              - queryId: "..."
                statement: "..."
                queryType: "..."
                queryState: "..."
                startTime: "..."
                endTime: "..."
                rowsProduced: 12345
                attributes:
                  property1: "..."
                  property2: "..."
                user: "..."
                coordinator:
                  hostId: "..."
                  hostname: "..."
                detailsAvailable: true
                database: "..."
                durationMillis: 12345
              warnings:
              - "..."
              - "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/impalaQueries/attributes:
    get:
      tags:
      - "ImpalaQueriesResource"
      summary: "Returns the list of all attributes that the Service Monitor can associate\n\
        with Impala queries."
      description: "Returns the list of all attributes that the Service Monitor can\
        \ associate\nwith Impala queries.\n<p>\nExamples of attributes include the\
        \ user who issued the query and the\nnumber of HDFS bytes read by the query.\n\
        <p>\nThese attributes can be used to search for specific Impala queries through\n\
        the getImpalaQueries API. For example the 'user' attribute could be used\n\
        in the search 'user = root'. If the attribute is numeric it can also be used\n\
        as a metric in a tsquery (ie, 'select hdfs_bytes_read from IMPALA_QUERIES').\n\
        <p>\nNote that this response is identical for all Impala services.\n<p>\n\
        Available since API v6."
      operationId: "getImpalaQueryAttributes"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiImpalaQueryAttributeList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                displayName: "..."
                supportsHistograms: true
                description: "..."
              - name: "..."
                type: "..."
                displayName: "..."
                supportsHistograms: true
                description: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/impalaQueries/{queryId}:
    get:
      tags:
      - "ImpalaQueriesResource"
      summary: "Returns details about the query."
      description: "Returns details about the query. Not all queries have details,\
        \ check\nthe detailsAvailable field from the getQueries response.\n<p>\nAvailable\
        \ since API v4."
      operationId: "getQueryDetails"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "queryId"
        in: "path"
        description: "The queryId to get information about"
        required: true
        type: "string"
        x-exportParamName: "QueryId"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "format"
        in: "query"
        description: "There are two valid format parameters:\n<ul>\n<li>\n'text':\
          \ this is a text based, human readable representation of the\nImpala runtime\
          \ profile.\n</li>\n<li>\n'thrift_encoded': this a compact-thrift, base64\
          \ encoded representation\nof the Impala RuntimeProfile.thrift object. See\
          \ the Impala documentation\nfor more details.\n</li>\n</ul>"
        required: false
        type: "string"
        default: "text"
        x-exportParamName: "Format"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiImpalaQueryDetailsResponse"
          examples:
            application/json:
              details: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/impalaQueries/{queryId}/cancel:
    post:
      tags:
      - "ImpalaQueriesResource"
      summary: "Cancels an Impala Query."
      description: "Cancels an Impala Query.\n<p>\nAvailable since API v4."
      operationId: "cancelImpalaQuery"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "queryId"
        in: "path"
        description: "The queryId to cancel"
        required: true
        type: "string"
        x-exportParamName: "QueryId"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiImpalaCancelResponse"
          examples:
            application/json:
              warning: "..."
          headers: {}
  /cm/service/roleCommands/jmapDump:
    post:
      tags:
      - "MgmtRoleCommandsResource"
      summary: "Run the jmapDump diagnostic command."
      description: "Run the jmapDump diagnostic command. The command runs the jmap\
        \ utility to\ncapture a dump of the role's java heap.\n<p/>\nAvailable since\
        \ API v8."
      operationId: "jmapDump"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the names of the roles to jmap."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/service/roleCommands/jmapHisto:
    post:
      tags:
      - "MgmtRoleCommandsResource"
      summary: "Run the jmapHisto diagnostic command."
      description: "Run the jmapHisto diagnostic command. The command runs the jmap\
        \ utility to\ncapture a histogram of the objects on the role's java heap.\n\
        <p/>\nAvailable since API v8."
      operationId: "jmapHisto"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the names of the roles to jmap."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/service/roleCommands/jstack:
    post:
      tags:
      - "MgmtRoleCommandsResource"
      summary: "Run the jstack diagnostic command."
      description: "Run the jstack diagnostic command. The command runs the jstack\
        \ utility to\ncapture a role's java thread stacks.\n<p/>\nAvailable since\
        \ API v8."
      operationId: "jstack"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the names of the roles to jstack."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/service/roleCommands/lsof:
    post:
      tags:
      - "MgmtRoleCommandsResource"
      summary: "Run the lsof diagnostic command."
      description: "Run the lsof diagnostic command. This command runs the lsof utility\
        \ to\nlist a role's open files.\n<p/>\nAvailable since API v8."
      operationId: "lsof"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "the names of the roles to lsof."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/service/roleCommands/restart:
    post:
      tags:
      - "MgmtRoleCommandsResource"
      summary: "Restart a set of Cloudera Management Services roles."
      description: "Restart a set of Cloudera Management Services roles."
      operationId: "restartCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The roles to restart."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/service/roleCommands/start:
    post:
      tags:
      - "MgmtRoleCommandsResource"
      summary: "Start a set of Cloudera Management Services roles."
      description: "Start a set of Cloudera Management Services roles."
      operationId: "startCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The roles to start."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/service/roleCommands/stop:
    post:
      tags:
      - "MgmtRoleCommandsResource"
      summary: "Stop a set of Cloudera Management Services roles."
      description: "Stop a set of Cloudera Management Services roles."
      operationId: "stopCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The roles to stop."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/service/roleConfigGroups:
    get:
      tags:
      - "MgmtRoleConfigGroupsResource"
      summary: "Returns the information for all role config groups in\nthe Cloudera\
        \ Management Services."
      description: "Returns the information for all role config groups in\nthe Cloudera\
        \ Management Services.\n<p>\nAvailable since API v3."
      operationId: "readRoleConfigGroups"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleConfigGroupList"
          examples:
            application/json:
              items:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
          headers: {}
  /cm/service/roleConfigGroups/{roleConfigGroupName}:
    get:
      tags:
      - "MgmtRoleConfigGroupsResource"
      summary: "Returns the information for a given role config group\nin the Cloudera\
        \ Management Services."
      description: "Returns the information for a given role config group\nin the\
        \ Cloudera Management Services.\n<p>\nAvailable since API v3."
      operationId: "readRoleConfigGroup"
      produces:
      - "application/json"
      parameters:
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the requested group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleConfigGroup"
          examples:
            application/json:
              name: "..."
              roleType: "..."
              base: true
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
          headers: {}
    put:
      tags:
      - "MgmtRoleConfigGroupsResource"
      summary: "Updates an existing role config group in the Cloudera Management Services."
      description: "Updates an existing role config group in the Cloudera Management\
        \ Services.\n<p>\nAvailable since API v3."
      operationId: "updateRoleConfigGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the group to update."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "message"
        in: "query"
        description: "The optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "The updated role config group."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleConfigGroup"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleConfigGroup"
          examples:
            application/json:
              name: "..."
              roleType: "..."
              base: true
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
          headers: {}
  /cm/service/roleConfigGroups/{roleConfigGroupName}/config:
    get:
      tags:
      - "MgmtRoleConfigGroupsResource"
      summary: "Returns the current revision of the config\nfor the specified role\
        \ config group in the Cloudera Management Services."
      description: "Returns the current revision of the config\nfor the specified\
        \ role config group in the Cloudera Management Services.\n<p>\nAvailable since\
        \ API v3."
      operationId: "readConfig"
      produces:
      - "application/json"
      parameters:
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the role config group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "MgmtRoleConfigGroupsResource"
      summary: "Updates the config for the given role config group\nin the Cloudera\
        \ Management Services."
      description: "Updates the config for the given role config group\nin the Cloudera\
        \ Management Services.\n<p>\nAvailable since API v3."
      operationId: "updateConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the role config group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "The new config information for the group."
        required: false
        schema:
          $ref: "#/definitions/ApiConfigList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /cm/service/roleConfigGroups/{roleConfigGroupName}/roles:
    get:
      tags:
      - "MgmtRoleConfigGroupsResource"
      summary: "Returns all roles in the given role config group\nin the Cloudera\
        \ Management Services."
      description: "Returns all roles in the given role config group\nin the Cloudera\
        \ Management Services.\n<p>\nAvailable since API v3."
      operationId: "readRoles"
      produces:
      - "application/json"
      parameters:
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the role config group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STARTED"
                commissionState: "OFFLINING"
                healthSummary: "BAD"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "ACTIVE"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "STANDALONE"
                entityStatus: "NONE"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPED"
                commissionState: "DECOMMISSIONING"
                healthSummary: "HISTORY_NOT_AVAILABLE"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                entityStatus: "STOPPING"
          headers: {}
  /cm/service/roles:
    get:
      tags:
      - "MgmtRolesResource"
      summary: "List all roles of the Cloudera Management Services."
      description: "List all roles of the Cloudera Management Services."
      operationId: "readRoles"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "UNKNOWN"
                commissionState: "COMMISSIONED"
                healthSummary: "HISTORY_NOT_AVAILABLE"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER"
                entityStatus: "CONCERNING_HEALTH"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "BUSY"
                commissionState: "OFFLINING"
                healthSummary: "CONCERNING"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "STANDALONE"
                entityStatus: "DOWN"
          headers: {}
    post:
      tags:
      - "MgmtRolesResource"
      summary: "Create new roles in the Cloudera Management Services."
      description: "Create new roles in the Cloudera Management Services."
      operationId: "createRoles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Roles to create."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "NA"
                commissionState: "OFFLINED"
                healthSummary: "CONCERNING"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "ACTIVE"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "STANDALONE"
                entityStatus: "CONCERNING_HEALTH"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPING"
                commissionState: "OFFLINING"
                healthSummary: "DISABLED"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                haStatus: "ACTIVE"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "UNKNOWN"
                entityStatus: "DISABLED_HEALTH"
          headers: {}
  /cm/service/roles/{roleName}:
    get:
      tags:
      - "MgmtRolesResource"
      summary: "Retrieve detailed information about a Cloudera Management Services\
        \ role."
      description: "Retrieve detailed information about a Cloudera Management Services\
        \ role."
      operationId: "readRole"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRole"
          examples:
            application/json:
              name: "..."
              type: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleState: "UNKNOWN"
              commissionState: "COMMISSIONED"
              healthSummary: "NOT_AVAILABLE"
              configStalenessStatus: "FRESH"
              healthChecks:
              - name: "..."
                summary: "CONCERNING"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              haStatus: "ACTIVE"
              roleUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "CLUSTER"
              - "HOST"
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roleConfigGroupRef:
                roleConfigGroupName: "..."
              zooKeeperServerMode: "REPLICATED_FOLLOWER"
              entityStatus: "STOPPED"
          headers: {}
    delete:
      tags:
      - "MgmtRolesResource"
      summary: "Delete a role from the Cloudera Management Services."
      description: "Delete a role from the Cloudera Management Services."
      operationId: "deleteRole"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRole"
          examples:
            application/json:
              name: "..."
              type: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleState: "HISTORY_NOT_AVAILABLE"
              commissionState: "OFFLINING"
              healthSummary: "BAD"
              configStalenessStatus: "STALE"
              healthChecks:
              - name: "..."
                summary: "HISTORY_NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              haStatus: "ACTIVE"
              roleUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "SERVICE"
              - "HOST"
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roleConfigGroupRef:
                roleConfigGroupName: "..."
              zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
              entityStatus: "STOPPING"
          headers: {}
  /cm/service/roles/{roleName}/commands:
    get:
      tags:
      - "MgmtRolesResource"
      summary: "List active role commands."
      description: "List active role commands."
      operationId: "listActiveCommands"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommandList"
          examples:
            application/json:
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/service/roles/{roleName}/config:
    get:
      tags:
      - "MgmtRolesResource"
      summary: "Retrieve the configuration of a specific Cloudera Management Services\
        \ role."
      description: "Retrieve the configuration of a specific Cloudera Management Services\
        \ role."
      operationId: "readRoleConfig"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to look up."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "MgmtRolesResource"
      summary: "Update the configuration of a Cloudera Management Services role."
      description: "Update the configuration of a Cloudera Management Services role.\n\
        <p>\nIf a value is set in the given configuration, it will be added\nto the\
        \ role's configuration, replacing any existing entries.\nIf a value is unset\
        \ (its value is null), the existing\nconfiguration for the attribute will\
        \ be erased, if any.\n<p>\nAttributes that are not listed in the input will\
        \ maintain their\ncurrent values in the configuration."
      operationId: "updateRoleConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to modify."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "Configuration changes."
        required: false
        schema:
          $ref: "#/definitions/ApiConfigList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /cm/service/roles/{roleName}/commands/enterMaintenanceMode:
    post:
      tags:
      - "MgmtRolesResource"
      summary: "Put the Cloudera Management Service role into maintenance mode."
      description: "Put the Cloudera Management Service role into maintenance mode.This\
        \ is a\nsynchronous command. The result is known immediately upon return.\n\
        \n<p>\nAvailable since API v18.\n</p>"
      operationId: "enterMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/service/roles/{roleName}/commands/exitMaintenanceMode:
    post:
      tags:
      - "MgmtRolesResource"
      summary: "Take the Cloudera Management Service role out of maintenance mode."
      description: "Take the Cloudera Management Service role out of maintenance mode.\
        \ This is\na synchronous command. The result is known immediately upon return.\n\
        \n<p>\nAvailable since API v18.\n</p>"
      operationId: "exitMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/service/roles/{roleName}/logs/full:
    get:
      tags:
      - "MgmtRolesResource"
      summary: "Retrieves the log file for the role's main process."
      description: "Retrieves the log file for the role's main process.\n<p>\nIf the\
        \ role is not started, this will be the log file associated with\nthe last\
        \ time the role was run.\n<p>\nLog files are returned as plain text (type\
        \ \"text/plain\")."
      operationId: "getFullLog"
      produces:
      - "text/plain"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to fetch logs from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /cm/service/roles/{roleName}/logs/stacks:
    get:
      tags:
      - "MgmtRolesResource"
      summary: "Retrieves the stacks log file, if any, for the role's main process."
      description: "Retrieves the stacks log file, if any, for the role's main process.\
        \ Note\nthat not all roles support periodic stacks collection.\n\nThe log\
        \ files are returned as plain text (type \"text/plain\")."
      operationId: "getStacksLog"
      produces:
      - "text/plain"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to fetch stacks logs from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /cm/service/roles/{roleName}/logs/stacksBundle:
    get:
      tags:
      - "MgmtRolesResource"
      summary: "Download a zip-compressed archive of role stacks logs."
      description: "Download a zip-compressed archive of role stacks logs. Note that\
        \ not all\nroles support periodic stacks collection."
      operationId: "getStacksLogsBundle"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to fetch the stacks logs bundle from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          examples: {}
          headers: {}
  /cm/service/roles/{roleName}/logs/stderr:
    get:
      tags:
      - "MgmtRolesResource"
      summary: "Retrieves the role's standard error output."
      description: "Retrieves the role's standard error output.\n<p>\nIf the role\
        \ is not started, this will be the output associated with\nthe last time the\
        \ role was run.\n<p>\nLog files are returned as plain text (type \"text/plain\"\
        )."
      operationId: "getStandardError"
      produces:
      - "text/plain"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to fetch stderr from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /cm/service/roles/{roleName}/logs/stdout:
    get:
      tags:
      - "MgmtRolesResource"
      summary: "Retrieves the role's standard output."
      description: "Retrieves the role's standard output.\n<p>\nIf the role is not\
        \ started, this will be the output associated with\nthe last time the role\
        \ was run.\n<p>\nLog files are returned as plain text (type \"text/plain\"\
        )."
      operationId: "getStandardOutput"
      produces:
      - "text/plain"
      parameters:
      - name: "roleName"
        in: "path"
        description: "The role to fetch stdout from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /cm/service:
    get:
      tags:
      - "MgmtServiceResource"
      summary: "Retrieve information about the Cloudera Management Services."
      description: "Retrieve information about the Cloudera Management Services."
      operationId: "readService"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiService"
          examples:
            application/json:
              name: "..."
              type: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceState: "HISTORY_NOT_AVAILABLE"
              healthSummary: "BAD"
              configStalenessStatus: "STALE"
              clientConfigStalenessStatus: "STALE"
              healthChecks:
              - name: "..."
                summary: "BAD"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "BAD"
                explanation: "..."
                suppressed: true
              serviceUrl: "..."
              roleInstancesUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "ROLE"
              - "ROLE"
              config:
                roleTypeConfigs:
                - roleType: "..."
                  items:
                  - {}
                  - {}
                - roleType: "..."
                  items:
                  - {}
                  - {}
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roles:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "BUSY"
                commissionState: "OFFLINING"
                healthSummary: "DISABLED"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "STANDALONE"
                entityStatus: "DOWN"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "HISTORY_NOT_AVAILABLE"
                commissionState: "DECOMMISSIONED"
                healthSummary: "GOOD"
                configStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                haStatus: "ACTIVE"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "SERVICE"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_FOLLOWER"
                entityStatus: "CONCERNING_HEALTH"
              displayName: "..."
              roleConfigGroups:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              replicationSchedules:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_ONLY"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "HOUR"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_ONLY"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "MINUTE"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              snapshotPolicies:
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "REMOTE_S3"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "REMOTE_S3"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              entityStatus: "DOWN"
          headers: {}
    put:
      tags:
      - "MgmtServiceResource"
      summary: "Setup the Cloudera Management Services."
      description: "Setup the Cloudera Management Services.\n<p>\nConfigure the CMS\
        \ instance and create all the management roles. The\nprovided configuration\
        \ data can be used to set up host mappings for\neach role, and required configuration\
        \ such as database connection\ninformation for specific roles.\n<p>\nRegardless\
        \ of the list of roles provided in the input data, all\nmanagement roles are\
        \ created by this call. The input is used to\noverride any default settings\
        \ for the specific roles.\n<p>\nThis method needs a valid CM license to be\
        \ installed beforehand.\n<p>\nThis method does not start any services or roles.\n\
        <p>\nThis method will fail if a CMS instance already exists.\n<p>\nAvailable\
        \ role types:\n<ul>\n<li>SERVICEMONITOR</li>\n<li>ACTIVITYMONITOR</li>\n<li>HOSTMONITOR</li>\n\
        <li>REPORTSMANAGER</li>\n<li>EVENTSERVER</li>\n<li>ALERTPUBLISHER</li>\n<li>NAVIGATOR</li>\n\
        <li>NAVIGATORMETASERVER</li>\n</ul>\n\n<p/>\nREPORTSMANAGER, NAVIGATOR and\
        \ NAVIGATORMETASERVER are only available with\nCloudera Manager Enterprise\
        \ Edition."
      operationId: "setupCMS"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Role configuration overrides."
        required: false
        schema:
          $ref: "#/definitions/ApiService"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiService"
          examples:
            application/json:
              name: "..."
              type: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceState: "STARTING"
              healthSummary: "BAD"
              configStalenessStatus: "STALE_REFRESHABLE"
              clientConfigStalenessStatus: "STALE_REFRESHABLE"
              healthChecks:
              - name: "..."
                summary: "CONCERNING"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "BAD"
                explanation: "..."
                suppressed: true
              serviceUrl: "..."
              roleInstancesUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "ROLE"
              - "HOST"
              config:
                roleTypeConfigs:
                - roleType: "..."
                  items:
                  - {}
                  - {}
                - roleType: "..."
                  items:
                  - {}
                  - {}
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roles:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "NA"
                commissionState: "OFFLINED"
                healthSummary: "HISTORY_NOT_AVAILABLE"
                configStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "SERVICE"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER"
                entityStatus: "GOOD_HEALTH"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STARTING"
                commissionState: "OFFLINING"
                healthSummary: "GOOD"
                configStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                entityStatus: "DOWN"
              displayName: "..."
              roleConfigGroups:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              replicationSchedules:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "KEEP_DATA_IN_CLOUD"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "DAY"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_ONLY"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "YEAR"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              snapshotPolicies:
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              entityStatus: "DISABLED_HEALTH"
          headers: {}
    delete:
      tags:
      - "MgmtServiceResource"
      summary: "Delete the Cloudera Management Services."
      description: "Delete the Cloudera Management Services.\n<p>\nThis method will\
        \ fail if a CMS instance doesn't already exist."
      operationId: "deleteCMS"
      produces:
      - "application/json"
      parameters: []
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiService"
          examples:
            application/json:
              name: "..."
              type: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceState: "STOPPING"
              healthSummary: "HISTORY_NOT_AVAILABLE"
              configStalenessStatus: "STALE_REFRESHABLE"
              clientConfigStalenessStatus: "STALE"
              healthChecks:
              - name: "..."
                summary: "DISABLED"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "CONCERNING"
                explanation: "..."
                suppressed: true
              serviceUrl: "..."
              roleInstancesUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "HOST"
              - "HOST"
              config:
                roleTypeConfigs:
                - roleType: "..."
                  items:
                  - {}
                  - {}
                - roleType: "..."
                  items:
                  - {}
                  - {}
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roles:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPED"
                commissionState: "COMMISSIONED"
                healthSummary: "DISABLED"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                entityStatus: "STOPPED"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPED"
                commissionState: "DECOMMISSIONED"
                healthSummary: "CONCERNING"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "HOST"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "STANDALONE"
                entityStatus: "HISTORY_NOT_AVAILABLE"
              displayName: "..."
              roleConfigGroups:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              replicationSchedules:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_ONLY"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "MINUTE"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_ONLY"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "DAY"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              snapshotPolicies:
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              entityStatus: "STOPPED"
          headers: {}
  /cm/service/autoAssignRoles:
    put:
      tags:
      - "MgmtServiceResource"
      summary: "Automatically assign roles to hosts and create the roles for the Cloudera\
        \ Management Service."
      description: "Automatically assign roles to hosts and create the roles for the\
        \ Cloudera Management Service.\n<p>\nAssignments are done based on number\
        \ of hosts in the deployment and hardware specifications.\nIf no hosts are\
        \ part of the deployment, an exception will be thrown preventing any role\
        \ assignments.\nExisting roles will be taken into account and their assignments\
        \ will be not be modified.\nThe deployment should not have any clusters when\
        \ calling this endpoint. If it does,\nan exception will be thrown preventing\
        \ any role assignments.\n<p>\nAvailable since API v6."
      operationId: "autoAssignRoles"
      parameters: []
      responses:
        204:
          description: "Success"
          examples: {}
          headers: {}
  /cm/service/autoConfigure:
    put:
      tags:
      - "MgmtServiceResource"
      summary: "Automatically configures roles of the Cloudera Management Service."
      description: "Automatically configures roles of the Cloudera Management Service.\n\
        <p>\nOverwrites some existing configurations.\nOnly default role config groups\
        \ must exist before calling this endpoint.\nOther role config groups must\
        \ not exist. If they do, an exception will be thrown\npreventing any configuration.\n\
        Ignores any clusters (and their services and roles) colocated with the Cloudera\n\
        Management Service. To avoid over-committing the heap on hosts, place the\n\
        Cloudera Management Service roles on machines not used by any of the clusters.\n\
        <p>\nAvailable since API v6."
      operationId: "autoConfigure"
      parameters: []
      responses:
        204:
          description: "Success"
          examples: {}
          headers: {}
  /cm/service/commands:
    get:
      tags:
      - "MgmtServiceResource"
      summary: "List active Cloudera Management Services commands."
      description: "List active Cloudera Management Services commands."
      operationId: "listActiveCommands"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommandList"
          examples:
            application/json:
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /cm/service/config:
    get:
      tags:
      - "MgmtServiceResource"
      summary: "Retrieve the configuration of the Cloudera Management Services."
      description: "Retrieve the configuration of the Cloudera Management Services."
      operationId: "readServiceConfig"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiServiceConfig"
          examples:
            application/json:
              roleTypeConfigs:
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "MgmtServiceResource"
      summary: "Update the Cloudera Management Services configuration."
      description: "Update the Cloudera Management Services configuration.\n<p>\n\
        If a value is set in the given configuration, it will be added\nto the service's\
        \ configuration, replacing any existing entries.\nIf a value is unset (its\
        \ value is null), the existing\nconfiguration for the attribute will be erased,\
        \ if any.\n<p>\nAttributes that are not listed in the input will maintain\
        \ their\ncurrent values in the configuration."
      operationId: "updateServiceConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "Configuration changes."
        required: false
        schema:
          $ref: "#/definitions/ApiServiceConfig"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiServiceConfig"
          examples:
            application/json:
              roleTypeConfigs:
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /cm/service/roleTypes:
    get:
      tags:
      - "MgmtServiceResource"
      summary: "List the supported role types for the Cloudera Management Services."
      description: "List the supported role types for the Cloudera Management Services."
      operationId: "listRoleTypes"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleTypeList"
          examples:
            application/json:
              items:
              - "..."
              - "..."
          headers: {}
  /cm/service/commands/enterMaintenanceMode:
    post:
      tags:
      - "MgmtServiceResource"
      summary: "Put Cloudera Management Service into maintenance mode."
      description: "Put Cloudera Management Service into maintenance mode. This is\
        \ a\nsynchronous command. The result is known immediately upon return.\n\n\
        <p>Available since API v18.</p>"
      operationId: "enterMaintenanceMode"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/service/commands/exitMaintenanceMode:
    post:
      tags:
      - "MgmtServiceResource"
      summary: "Take Cloudera Management Service out of maintenance mode."
      description: "Take Cloudera Management Service out of maintenance mode. This\
        \ is a\nsynchronous command. The result is known immediately upon return.\n\
        \n<p>Available since API v18.</p>"
      operationId: "exitMaintenanceMode"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/service/commands/restart:
    post:
      tags:
      - "MgmtServiceResource"
      summary: "Restart the Cloudera Management Services."
      description: "Restart the Cloudera Management Services."
      operationId: "restartCommand"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/service/commands/start:
    post:
      tags:
      - "MgmtServiceResource"
      summary: "Start the Cloudera Management Services."
      description: "Start the Cloudera Management Services."
      operationId: "startCommand"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /cm/service/commands/stop:
    post:
      tags:
      - "MgmtServiceResource"
      summary: "Stop the Cloudera Management Services."
      description: "Stop the Cloudera Management Services."
      operationId: "stopCommand"
      produces:
      - "application/json"
      parameters: []
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/nameservices:
    get:
      tags:
      - "NameservicesResource"
      summary: "List the nameservices of an HDFS service."
      description: "List the nameservices of an HDFS service."
      operationId: "listNameservices"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiNameserviceList"
          examples:
            application/json:
              items:
              - name: "..."
                active:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                activeFailoverController:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                standBy:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                standByFailoverController:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                secondary:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                mountPoints:
                - "..."
                - "..."
                healthSummary: "DISABLED"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
              - name: "..."
                active:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                activeFailoverController:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                standBy:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                standByFailoverController:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                secondary:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                mountPoints:
                - "..."
                - "..."
                healthSummary: "CONCERNING"
                healthChecks:
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/nameservices/{nameservice}:
    get:
      tags:
      - "NameservicesResource"
      summary: "Retrieve information about a nameservice."
      description: "Retrieve information about a nameservice."
      operationId: "readNameservice"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "nameservice"
        in: "path"
        description: "The nameservice to retrieve."
        required: true
        type: "string"
        x-exportParamName: "Nameservice"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view to materialize. Defaults to 'full'."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiNameservice"
          examples:
            application/json:
              name: "..."
              active:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              activeFailoverController:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              standBy:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              standByFailoverController:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              secondary:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              mountPoints:
              - "..."
              - "..."
              healthSummary: "GOOD"
              healthChecks:
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/nameservices/{nameservice}/metrics:
    get:
      tags:
      - "NameservicesResource"
      summary: "Fetch metric readings for a particular nameservice."
      description: "Fetch metric readings for a particular nameservice.\n<p>\nBy default,\
        \ this call will look up all metrics available. If only specific\nmetrics\
        \ are desired, use the <i>metrics</i> parameter.\n<p>\nBy default, the returned\
        \ results correspond to a 5 minute window based on\nthe provided end time\
        \ (which defaults to the current server time). The\n<i>from</i> and <i>to</i>\
        \ parameters can be used to control the window\nbeing queried. A maximum window\
        \ of 3 hours is enforced.\n<p>\nWhen requesting a \"full\" view, aside from\
        \ the extended properties of the\nreturned metric data, the collection will\
        \ also contain information about\nall metrics available, even if no readings\
        \ are available in the requested\nwindow."
      operationId: "getMetrics"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "nameservice"
        in: "path"
        description: "The nameservice."
        required: true
        type: "string"
        x-exportParamName: "Nameservice"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "from"
        in: "query"
        description: "Start of the period to query."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "metrics"
        in: "query"
        description: "Filter for which metrics to query."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Metrics"
      - name: "to"
        in: "query"
        description: "End of the period to query."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiMetricList"
          examples:
            application/json:
              items:
              - name: "..."
                context: "..."
                unit: "..."
                data:
                - timestamp: "..."
                  value: 12345.0
                - timestamp: "..."
                  value: 12345.0
                displayName: "..."
                description: "..."
              - name: "..."
                context: "..."
                unit: "..."
                data:
                - timestamp: "..."
                  value: 12345.0
                - timestamp: "..."
                  value: 12345.0
                displayName: "..."
                description: "..."
          headers: {}
      deprecated: true
  /clusters/{clusterName}/parcels/products/{product}/versions/{version}:
    get:
      tags:
      - "ParcelResource"
      summary: "Retrieves detailed information about a parcel."
      description: "Retrieves detailed information about a parcel."
      operationId: "readParcel"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "product"
        in: "path"
        description: "the product"
        required: true
        type: "string"
        x-exportParamName: "Product"
      - name: "version"
        in: "path"
        description: "the version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiParcel"
          examples:
            application/json:
              product: "..."
              version: "..."
              stage: "..."
              state:
                progress: 12345
                totalProgress: 12345
                count: 12345
                totalCount: 12345
                errors:
                - "..."
                - "..."
                warnings:
                - "..."
                - "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
          headers: {}
  /clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/activate:
    post:
      tags:
      - "ParcelResource"
      summary: "A synchronous command that activates the parcel on the cluster."
      description: "A synchronous command that activates the parcel on the cluster.\n\
        <p>\nSince it is synchronous, the result is known immediately upon return."
      operationId: "activateCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "product"
        in: "path"
        description: "the product"
        required: true
        type: "string"
        x-exportParamName: "Product"
      - name: "version"
        in: "path"
        description: "the version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/cancelDistribution:
    post:
      tags:
      - "ParcelResource"
      summary: "A synchronous command that cancels the parcel distribution."
      description: "A synchronous command that cancels the parcel distribution.\n\
        <p>\nSince it is synchronous, the result is known immediately upon return."
      operationId: "cancelDistributionCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "product"
        in: "path"
        description: "the product"
        required: true
        type: "string"
        x-exportParamName: "Product"
      - name: "version"
        in: "path"
        description: "the version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/cancelDownload:
    post:
      tags:
      - "ParcelResource"
      summary: "A synchronous command that cancels the parcel download."
      description: "A synchronous command that cancels the parcel download.\n<p>\n\
        Since it is synchronous, the result is known immediately upon return."
      operationId: "cancelDownloadCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "product"
        in: "path"
        description: "the product"
        required: true
        type: "string"
        x-exportParamName: "Product"
      - name: "version"
        in: "path"
        description: "the version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/deactivate:
    post:
      tags:
      - "ParcelResource"
      summary: "A synchronous command that deactivates the parcel on the cluster."
      description: "A synchronous command that deactivates the parcel on the cluster.\n\
        <p>\nSince it is synchronous, the result is known immediately upon return."
      operationId: "deactivateCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "product"
        in: "path"
        description: "the product"
        required: true
        type: "string"
        x-exportParamName: "Product"
      - name: "version"
        in: "path"
        description: "the version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/removeDownload:
    post:
      tags:
      - "ParcelResource"
      summary: "A synchronous command that removes the downloaded parcel."
      description: "A synchronous command that removes the downloaded parcel.\n<p>\n\
        Since it is synchronous, the result is known immediately upon return."
      operationId: "removeDownloadCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "product"
        in: "path"
        description: "the product"
        required: true
        type: "string"
        x-exportParamName: "Product"
      - name: "version"
        in: "path"
        description: "the version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/startDistribution:
    post:
      tags:
      - "ParcelResource"
      summary: "A synchronous command that starts the distribution of the parcel\n\
        to the cluster."
      description: "A synchronous command that starts the distribution of the parcel\n\
        to the cluster.\n<p>\nSince it is synchronous, the result is known immediately\
        \ upon return.\nIn order to see the progress of the distribution, a call\n\
        to ParcelResource#readParcel() needs to be made."
      operationId: "startDistributionCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "product"
        in: "path"
        description: "the product"
        required: true
        type: "string"
        x-exportParamName: "Product"
      - name: "version"
        in: "path"
        description: "the version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/startDownload:
    post:
      tags:
      - "ParcelResource"
      summary: "A synchronous command that starts the parcel download."
      description: "A synchronous command that starts the parcel download.\n<p>\n\
        Since it is synchronous, the result is known immediately upon return.\nIn\
        \ order to see the progress of the download, a call\nto ParcelResource#readParcel()\
        \ needs to be made."
      operationId: "startDownloadCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "product"
        in: "path"
        description: "the product"
        required: true
        type: "string"
        x-exportParamName: "Product"
      - name: "version"
        in: "path"
        description: "the version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/startRemovalOfDistribution:
    post:
      tags:
      - "ParcelResource"
      summary: "A synchronous command that removes the distribution from the hosts\
        \ in\nthe cluster."
      description: "A synchronous command that removes the distribution from the hosts\
        \ in\nthe cluster.\n<p>\nSince it is synchronous, the result is known immediately\
        \ upon return.\nIn order to see the progress of the removal, a call\nto ParcelResource#readParcel()\
        \ needs to be made."
      operationId: "startRemovalOfDistributionCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "product"
        in: "path"
        description: "the product"
        required: true
        type: "string"
        x-exportParamName: "Product"
      - name: "version"
        in: "path"
        description: "the version"
        required: true
        type: "string"
        x-exportParamName: "Version"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/parcels:
    get:
      tags:
      - "ParcelsResource"
      summary: "Lists all parcels that the cluster has access to."
      description: "Lists all parcels that the cluster has access to."
      operationId: "readParcels"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiParcelList"
          examples:
            application/json:
              items:
              - product: "..."
                version: "..."
                stage: "..."
                state:
                  progress: 12345
                  totalProgress: 12345
                  count: 12345
                  totalCount: 12345
                  errors:
                  - "..."
                  - "..."
                  warnings:
                  - "..."
                  - "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
              - product: "..."
                version: "..."
                stage: "..."
                state:
                  progress: 12345
                  totalProgress: 12345
                  count: 12345
                  totalCount: 12345
                  errors:
                  - "..."
                  - "..."
                  warnings:
                  - "..."
                  - "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
          headers: {}
  /clusters/{clusterName}/parcels/usage:
    get:
      tags:
      - "ParcelsResource"
      summary: "Retrieve details parcel usage information for the cluster."
      description: "Retrieve details parcel usage information for the cluster. This\
        \ describes\nwhich processes, roles and hosts are using which parcels."
      operationId: "getParcelUsage"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiParcelUsage"
          examples:
            application/json:
              racks:
              - hosts:
                - hostRef: {}
                  roles:
                  - {}
                  - {}
                - hostRef: {}
                  roles:
                  - {}
                  - {}
                rackId: "..."
              - hosts:
                - hostRef: {}
                  roles:
                  - {}
                  - {}
                - hostRef: {}
                  roles:
                  - {}
                  - {}
                rackId: "..."
              parcels:
              - parcelRef:
                  clusterName: "..."
                  parcelName: "..."
                  parcelVersion: "..."
                processCount: 12345
                activated: true
              - parcelRef:
                  clusterName: "..."
                  parcelName: "..."
                  parcelVersion: "..."
                processCount: 12345
                activated: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/process:
    get:
      tags:
      - "ProcessResource"
      description: ""
      operationId: "getProcess"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiProcess"
          examples:
            application/json:
              configFiles:
              - "..."
              - "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/process/configFiles/{configFileName}:
    get:
      tags:
      - "ProcessResource"
      summary: "Returns the contents of the specified config file."
      description: "Returns the contents of the specified config file.\nA multi-level\
        \ file name (e.g. hadoop-conf/hdfs-site.xml) is\nacceptable here."
      operationId: "getConfigFile"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "configFileName"
        in: "path"
        description: "Name of the config file to get."
        required: true
        type: "string"
        x-exportParamName: "ConfigFileName"
      - name: "roleName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            type: "file"
            description: ""
          examples: {}
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/replications:
    get:
      tags:
      - "ReplicationsResource"
      summary: "Returns information for all replication schedules."
      description: "Returns information for all replication schedules.\n<p>\nAvailable\
        \ since API v32."
      operationId: "readSchedules"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "provides summary or detailed view, default is summary"
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiReplicationScheduleList"
          examples:
            application/json:
              items:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_AND_DATA"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "MONTH"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_AND_DATA"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "DAY"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
          headers: {}
    post:
      tags:
      - "ReplicationsResource"
      summary: "Creates one or more replication schedules."
      description: "Creates one or more replication schedules.\n<p>\nAvailable since\
        \ API v3. Only available with Cloudera Manager Enterprise\nEdition."
      operationId: "createSchedules"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "List of the replication schedules to create."
        required: false
        schema:
          $ref: "#/definitions/ApiReplicationScheduleList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiReplicationScheduleList"
          examples:
            application/json:
              items:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "KEEP_DATA_IN_CLOUD"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "WEEK"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_AND_DATA"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "WEEK"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
          headers: {}
    delete:
      tags:
      - "ReplicationsResource"
      summary: "Deletes all existing replication schedules."
      description: "Deletes all existing replication schedules.\n<p>\nAvailable since\
        \ API v3. Only available with Cloudera Manager Enterprise\nEdition."
      operationId: "deleteAllSchedules"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiReplicationScheduleList"
          examples:
            application/json:
              items:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_ONLY"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "MINUTE"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_AND_DATA"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "MONTH"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/replications/hdfsCopyListing:
    post:
      tags:
      - "ReplicationsResource"
      summary: "Run the hdfs copy listing command."
      description: "Run the hdfs copy listing command\n<p>\nThe copy listing command\
        \ will be triggered with the provided arguments\n<p>\nAvailable since API\
        \ v18. Only available with Cloudera Manager Enterprise\nEdition."
      operationId: "runCopyListing"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          type: "string"
          description: ""
        x-exportParamName: "Body"
        x-optionalDataType: "String"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/replications/replicationState:
    get:
      tags:
      - "ReplicationsResource"
      summary: "returns the replication state."
      description: "returns the replication state. for example if incremental export\n\
        is enabled, etc"
      operationId: "getReplicationState"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "view to materialize"
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiReplicationState"
          examples:
            application/json:
              incrementalExportEnabled: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}:
    get:
      tags:
      - "ReplicationsResource"
      summary: "Returns information for a specific replication schedule."
      description: "Returns information for a specific replication schedule.\n<p>\n\
        Available since API v3. Only available with Cloudera Manager Enterprise\n\
        Edition."
      operationId: "readSchedule"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "scheduleId"
        in: "path"
        description: "Id of an existing replication schedule."
        required: true
        type: "number"
        x-exportParamName: "ScheduleId"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view to materialize."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiReplicationSchedule"
          examples:
            application/json:
              hdfsArguments:
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                sourcePath: "..."
                destinationPath: "..."
                mapreduceServiceName: "..."
                schedulerPoolName: "..."
                userName: "..."
                sourceUser: "..."
                numMaps: 12345
                dryRun: true
                bandwidthPerMap: 12345
                abortOnError: true
                removeMissingFiles: true
                preserveReplicationCount: true
                preserveBlockSize: true
                preservePermissions: true
                logPath: "..."
                skipChecksumChecks: true
                skipListingChecksumChecks: true
                skipTrash: true
                replicationStrategy: "STATIC"
                preserveXAttrs: true
                exclusionFilters:
                - "..."
                - "..."
                raiseSnapshotDiffFailures: true
                destinationCloudAccount: "..."
              hiveArguments:
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                tableFilters:
                - database: "..."
                  tableName: "..."
                - database: "..."
                  tableName: "..."
                exportDir: "..."
                force: true
                replicateData: true
                hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                replicateImpalaMetadata: true
                runInvalidateMetadata: true
                dryRun: true
                numThreads: 12345
              hdfsCloudArguments:
                sourceAccount: "..."
                destinationAccount: "..."
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                sourcePath: "..."
                destinationPath: "..."
                mapreduceServiceName: "..."
                schedulerPoolName: "..."
                userName: "..."
                sourceUser: "..."
                numMaps: 12345
                dryRun: true
                bandwidthPerMap: 12345
                abortOnError: true
                removeMissingFiles: true
                preserveReplicationCount: true
                preserveBlockSize: true
                preservePermissions: true
                logPath: "..."
                skipChecksumChecks: true
                skipListingChecksumChecks: true
                skipTrash: true
                replicationStrategy: "DYNAMIC"
                preserveXAttrs: true
                exclusionFilters:
                - "..."
                - "..."
                raiseSnapshotDiffFailures: true
                destinationCloudAccount: "..."
              history:
              - hdfsResult:
                  progress: 12345
                  throughput: 12345.0
                  remainingTime: 12345
                  estimatedCompletionTime: "..."
                  counters:
                  - {}
                  - {}
                  numFilesDryRun: 12345
                  numBytesDryRun: 12345
                  numFilesExpected: 12345
                  numBytesExpected: 12345
                  numFilesCopied: 12345
                  numBytesCopied: 12345
                  numFilesSkipped: 12345
                  numBytesSkipped: 12345
                  numFilesDeleted: 12345
                  numFilesCopyFailed: 12345
                  numBytesCopyFailed: 12345
                  setupError: "..."
                  jobId: "..."
                  jobDetailsUri: "..."
                  dryRun: true
                  snapshottedDirs:
                  - "..."
                  - "..."
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  failedFiles:
                  - "..."
                  - "..."
                hiveResult:
                  phase: "..."
                  tableCount: 12345
                  tables:
                  - {}
                  - {}
                  impalaUDFCount: 12345
                  hiveUDFCount: 12345
                  impalaUDFs:
                  - {}
                  - {}
                  hiveUDFs:
                  - {}
                  - {}
                  errorCount: 12345
                  errors:
                  - {}
                  - {}
                  dataReplicationResult: {}
                  dryRun: true
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  statsAvailable: true
                  dbProcessed: 12345
                  tableProcessed: 12345
                  partitionProcessed: 12345
                  functionProcessed: 12345
                  indexProcessed: 12345
                  statsProcessed: 12345
                  dbExpected: 12345
                  tableExpected: 12345
                  partitionExpected: 12345
                  functionExpected: 12345
                  indexExpected: 12345
                  statsExpected: 12345
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - hdfsResult:
                  progress: 12345
                  throughput: 12345.0
                  remainingTime: 12345
                  estimatedCompletionTime: "..."
                  counters:
                  - {}
                  - {}
                  numFilesDryRun: 12345
                  numBytesDryRun: 12345
                  numFilesExpected: 12345
                  numBytesExpected: 12345
                  numFilesCopied: 12345
                  numBytesCopied: 12345
                  numFilesSkipped: 12345
                  numBytesSkipped: 12345
                  numFilesDeleted: 12345
                  numFilesCopyFailed: 12345
                  numBytesCopyFailed: 12345
                  setupError: "..."
                  jobId: "..."
                  jobDetailsUri: "..."
                  dryRun: true
                  snapshottedDirs:
                  - "..."
                  - "..."
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  failedFiles:
                  - "..."
                  - "..."
                hiveResult:
                  phase: "..."
                  tableCount: 12345
                  tables:
                  - {}
                  - {}
                  impalaUDFCount: 12345
                  hiveUDFCount: 12345
                  impalaUDFs:
                  - {}
                  - {}
                  hiveUDFs:
                  - {}
                  - {}
                  errorCount: 12345
                  errors:
                  - {}
                  - {}
                  dataReplicationResult: {}
                  dryRun: true
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  statsAvailable: true
                  dbProcessed: 12345
                  tableProcessed: 12345
                  partitionProcessed: 12345
                  functionProcessed: 12345
                  indexProcessed: 12345
                  statsProcessed: 12345
                  dbExpected: 12345
                  tableExpected: 12345
                  partitionExpected: 12345
                  functionExpected: 12345
                  indexExpected: 12345
                  statsExpected: 12345
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              active: true
              hiveCloudArguments:
                sourceAccount: "..."
                destinationAccount: "..."
                cloudRootPath: "..."
                replicationOption: "METADATA_AND_DATA"
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                tableFilters:
                - database: "..."
                  tableName: "..."
                - database: "..."
                  tableName: "..."
                exportDir: "..."
                force: true
                replicateData: true
                hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                replicateImpalaMetadata: true
                runInvalidateMetadata: true
                dryRun: true
                numThreads: 12345
              id: 12345
              displayName: "..."
              description: "..."
              startTime: "..."
              endTime: "..."
              interval: 12345
              intervalUnit: "DAY"
              nextRun: "..."
              paused: true
              alertOnStart: true
              alertOnSuccess: true
              alertOnFail: true
              alertOnAbort: true
          headers: {}
    put:
      tags:
      - "ReplicationsResource"
      summary: "Updates an existing replication schedule."
      description: "Updates an existing replication schedule.\n<p>\nAvailable since\
        \ API v3. Only available with Cloudera Manager Enterprise\nEdition."
      operationId: "updateSchedule"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "scheduleId"
        in: "path"
        description: "Id of an existing replication schedule."
        required: true
        type: "number"
        x-exportParamName: "ScheduleId"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiReplicationSchedule"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiReplicationSchedule"
          examples:
            application/json:
              hdfsArguments:
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                sourcePath: "..."
                destinationPath: "..."
                mapreduceServiceName: "..."
                schedulerPoolName: "..."
                userName: "..."
                sourceUser: "..."
                numMaps: 12345
                dryRun: true
                bandwidthPerMap: 12345
                abortOnError: true
                removeMissingFiles: true
                preserveReplicationCount: true
                preserveBlockSize: true
                preservePermissions: true
                logPath: "..."
                skipChecksumChecks: true
                skipListingChecksumChecks: true
                skipTrash: true
                replicationStrategy: "DYNAMIC"
                preserveXAttrs: true
                exclusionFilters:
                - "..."
                - "..."
                raiseSnapshotDiffFailures: true
                destinationCloudAccount: "..."
              hiveArguments:
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                tableFilters:
                - database: "..."
                  tableName: "..."
                - database: "..."
                  tableName: "..."
                exportDir: "..."
                force: true
                replicateData: true
                hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                replicateImpalaMetadata: true
                runInvalidateMetadata: true
                dryRun: true
                numThreads: 12345
              hdfsCloudArguments:
                sourceAccount: "..."
                destinationAccount: "..."
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                sourcePath: "..."
                destinationPath: "..."
                mapreduceServiceName: "..."
                schedulerPoolName: "..."
                userName: "..."
                sourceUser: "..."
                numMaps: 12345
                dryRun: true
                bandwidthPerMap: 12345
                abortOnError: true
                removeMissingFiles: true
                preserveReplicationCount: true
                preserveBlockSize: true
                preservePermissions: true
                logPath: "..."
                skipChecksumChecks: true
                skipListingChecksumChecks: true
                skipTrash: true
                replicationStrategy: "DYNAMIC"
                preserveXAttrs: true
                exclusionFilters:
                - "..."
                - "..."
                raiseSnapshotDiffFailures: true
                destinationCloudAccount: "..."
              history:
              - hdfsResult:
                  progress: 12345
                  throughput: 12345.0
                  remainingTime: 12345
                  estimatedCompletionTime: "..."
                  counters:
                  - {}
                  - {}
                  numFilesDryRun: 12345
                  numBytesDryRun: 12345
                  numFilesExpected: 12345
                  numBytesExpected: 12345
                  numFilesCopied: 12345
                  numBytesCopied: 12345
                  numFilesSkipped: 12345
                  numBytesSkipped: 12345
                  numFilesDeleted: 12345
                  numFilesCopyFailed: 12345
                  numBytesCopyFailed: 12345
                  setupError: "..."
                  jobId: "..."
                  jobDetailsUri: "..."
                  dryRun: true
                  snapshottedDirs:
                  - "..."
                  - "..."
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  failedFiles:
                  - "..."
                  - "..."
                hiveResult:
                  phase: "..."
                  tableCount: 12345
                  tables:
                  - {}
                  - {}
                  impalaUDFCount: 12345
                  hiveUDFCount: 12345
                  impalaUDFs:
                  - {}
                  - {}
                  hiveUDFs:
                  - {}
                  - {}
                  errorCount: 12345
                  errors:
                  - {}
                  - {}
                  dataReplicationResult: {}
                  dryRun: true
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  statsAvailable: true
                  dbProcessed: 12345
                  tableProcessed: 12345
                  partitionProcessed: 12345
                  functionProcessed: 12345
                  indexProcessed: 12345
                  statsProcessed: 12345
                  dbExpected: 12345
                  tableExpected: 12345
                  partitionExpected: 12345
                  functionExpected: 12345
                  indexExpected: 12345
                  statsExpected: 12345
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - hdfsResult:
                  progress: 12345
                  throughput: 12345.0
                  remainingTime: 12345
                  estimatedCompletionTime: "..."
                  counters:
                  - {}
                  - {}
                  numFilesDryRun: 12345
                  numBytesDryRun: 12345
                  numFilesExpected: 12345
                  numBytesExpected: 12345
                  numFilesCopied: 12345
                  numBytesCopied: 12345
                  numFilesSkipped: 12345
                  numBytesSkipped: 12345
                  numFilesDeleted: 12345
                  numFilesCopyFailed: 12345
                  numBytesCopyFailed: 12345
                  setupError: "..."
                  jobId: "..."
                  jobDetailsUri: "..."
                  dryRun: true
                  snapshottedDirs:
                  - "..."
                  - "..."
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  failedFiles:
                  - "..."
                  - "..."
                hiveResult:
                  phase: "..."
                  tableCount: 12345
                  tables:
                  - {}
                  - {}
                  impalaUDFCount: 12345
                  hiveUDFCount: 12345
                  impalaUDFs:
                  - {}
                  - {}
                  hiveUDFs:
                  - {}
                  - {}
                  errorCount: 12345
                  errors:
                  - {}
                  - {}
                  dataReplicationResult: {}
                  dryRun: true
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  statsAvailable: true
                  dbProcessed: 12345
                  tableProcessed: 12345
                  partitionProcessed: 12345
                  functionProcessed: 12345
                  indexProcessed: 12345
                  statsProcessed: 12345
                  dbExpected: 12345
                  tableExpected: 12345
                  partitionExpected: 12345
                  functionExpected: 12345
                  indexExpected: 12345
                  statsExpected: 12345
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              active: true
              hiveCloudArguments:
                sourceAccount: "..."
                destinationAccount: "..."
                cloudRootPath: "..."
                replicationOption: "KEEP_DATA_IN_CLOUD"
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                tableFilters:
                - database: "..."
                  tableName: "..."
                - database: "..."
                  tableName: "..."
                exportDir: "..."
                force: true
                replicateData: true
                hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                replicateImpalaMetadata: true
                runInvalidateMetadata: true
                dryRun: true
                numThreads: 12345
              id: 12345
              displayName: "..."
              description: "..."
              startTime: "..."
              endTime: "..."
              interval: 12345
              intervalUnit: "DAY"
              nextRun: "..."
              paused: true
              alertOnStart: true
              alertOnSuccess: true
              alertOnFail: true
              alertOnAbort: true
          headers: {}
    delete:
      tags:
      - "ReplicationsResource"
      summary: "Deletes an existing replication schedule."
      description: "Deletes an existing replication schedule.\n<p>\nAvailable since\
        \ API v3. Only available with Cloudera Manager Enterprise\nEdition."
      operationId: "deleteSchedule"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "scheduleId"
        in: "path"
        description: "Id of an existing replication schedule."
        required: true
        type: "number"
        x-exportParamName: "ScheduleId"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiReplicationSchedule"
          examples:
            application/json:
              hdfsArguments:
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                sourcePath: "..."
                destinationPath: "..."
                mapreduceServiceName: "..."
                schedulerPoolName: "..."
                userName: "..."
                sourceUser: "..."
                numMaps: 12345
                dryRun: true
                bandwidthPerMap: 12345
                abortOnError: true
                removeMissingFiles: true
                preserveReplicationCount: true
                preserveBlockSize: true
                preservePermissions: true
                logPath: "..."
                skipChecksumChecks: true
                skipListingChecksumChecks: true
                skipTrash: true
                replicationStrategy: "STATIC"
                preserveXAttrs: true
                exclusionFilters:
                - "..."
                - "..."
                raiseSnapshotDiffFailures: true
                destinationCloudAccount: "..."
              hiveArguments:
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                tableFilters:
                - database: "..."
                  tableName: "..."
                - database: "..."
                  tableName: "..."
                exportDir: "..."
                force: true
                replicateData: true
                hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                replicateImpalaMetadata: true
                runInvalidateMetadata: true
                dryRun: true
                numThreads: 12345
              hdfsCloudArguments:
                sourceAccount: "..."
                destinationAccount: "..."
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                sourcePath: "..."
                destinationPath: "..."
                mapreduceServiceName: "..."
                schedulerPoolName: "..."
                userName: "..."
                sourceUser: "..."
                numMaps: 12345
                dryRun: true
                bandwidthPerMap: 12345
                abortOnError: true
                removeMissingFiles: true
                preserveReplicationCount: true
                preserveBlockSize: true
                preservePermissions: true
                logPath: "..."
                skipChecksumChecks: true
                skipListingChecksumChecks: true
                skipTrash: true
                replicationStrategy: "STATIC"
                preserveXAttrs: true
                exclusionFilters:
                - "..."
                - "..."
                raiseSnapshotDiffFailures: true
                destinationCloudAccount: "..."
              history:
              - hdfsResult:
                  progress: 12345
                  throughput: 12345.0
                  remainingTime: 12345
                  estimatedCompletionTime: "..."
                  counters:
                  - {}
                  - {}
                  numFilesDryRun: 12345
                  numBytesDryRun: 12345
                  numFilesExpected: 12345
                  numBytesExpected: 12345
                  numFilesCopied: 12345
                  numBytesCopied: 12345
                  numFilesSkipped: 12345
                  numBytesSkipped: 12345
                  numFilesDeleted: 12345
                  numFilesCopyFailed: 12345
                  numBytesCopyFailed: 12345
                  setupError: "..."
                  jobId: "..."
                  jobDetailsUri: "..."
                  dryRun: true
                  snapshottedDirs:
                  - "..."
                  - "..."
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  failedFiles:
                  - "..."
                  - "..."
                hiveResult:
                  phase: "..."
                  tableCount: 12345
                  tables:
                  - {}
                  - {}
                  impalaUDFCount: 12345
                  hiveUDFCount: 12345
                  impalaUDFs:
                  - {}
                  - {}
                  hiveUDFs:
                  - {}
                  - {}
                  errorCount: 12345
                  errors:
                  - {}
                  - {}
                  dataReplicationResult: {}
                  dryRun: true
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  statsAvailable: true
                  dbProcessed: 12345
                  tableProcessed: 12345
                  partitionProcessed: 12345
                  functionProcessed: 12345
                  indexProcessed: 12345
                  statsProcessed: 12345
                  dbExpected: 12345
                  tableExpected: 12345
                  partitionExpected: 12345
                  functionExpected: 12345
                  indexExpected: 12345
                  statsExpected: 12345
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - hdfsResult:
                  progress: 12345
                  throughput: 12345.0
                  remainingTime: 12345
                  estimatedCompletionTime: "..."
                  counters:
                  - {}
                  - {}
                  numFilesDryRun: 12345
                  numBytesDryRun: 12345
                  numFilesExpected: 12345
                  numBytesExpected: 12345
                  numFilesCopied: 12345
                  numBytesCopied: 12345
                  numFilesSkipped: 12345
                  numBytesSkipped: 12345
                  numFilesDeleted: 12345
                  numFilesCopyFailed: 12345
                  numBytesCopyFailed: 12345
                  setupError: "..."
                  jobId: "..."
                  jobDetailsUri: "..."
                  dryRun: true
                  snapshottedDirs:
                  - "..."
                  - "..."
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  failedFiles:
                  - "..."
                  - "..."
                hiveResult:
                  phase: "..."
                  tableCount: 12345
                  tables:
                  - {}
                  - {}
                  impalaUDFCount: 12345
                  hiveUDFCount: 12345
                  impalaUDFs:
                  - {}
                  - {}
                  hiveUDFs:
                  - {}
                  - {}
                  errorCount: 12345
                  errors:
                  - {}
                  - {}
                  dataReplicationResult: {}
                  dryRun: true
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  statsAvailable: true
                  dbProcessed: 12345
                  tableProcessed: 12345
                  partitionProcessed: 12345
                  functionProcessed: 12345
                  indexProcessed: 12345
                  statsProcessed: 12345
                  dbExpected: 12345
                  tableExpected: 12345
                  partitionExpected: 12345
                  functionExpected: 12345
                  indexExpected: 12345
                  statsExpected: 12345
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              active: true
              hiveCloudArguments:
                sourceAccount: "..."
                destinationAccount: "..."
                cloudRootPath: "..."
                replicationOption: "METADATA_AND_DATA"
                sourceService:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                tableFilters:
                - database: "..."
                  tableName: "..."
                - database: "..."
                  tableName: "..."
                exportDir: "..."
                force: true
                replicateData: true
                hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                replicateImpalaMetadata: true
                runInvalidateMetadata: true
                dryRun: true
                numThreads: 12345
              id: 12345
              displayName: "..."
              description: "..."
              startTime: "..."
              endTime: "..."
              interval: 12345
              intervalUnit: "HOUR"
              nextRun: "..."
              paused: true
              alertOnStart: true
              alertOnSuccess: true
              alertOnFail: true
              alertOnAbort: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}/collectDiagnosticData:
    post:
      tags:
      - "ReplicationsResource"
      summary: "Collect diagnostic data for a schedule, optionally for a subset of\
        \ commands\non that schedule, matched by schedule ID."
      description: "Collect diagnostic data for a schedule, optionally for a subset\
        \ of commands\non that schedule, matched by schedule ID.\n\nThe returned command's\
        \ resultDataUrl property, upon the commands completion,\nwill refer to the\
        \ generated diagnostic data.\nAvailable since API v11."
      operationId: "collectDiagnosticData"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "scheduleId"
        in: "path"
        description: "Schedule ID"
        required: true
        type: "number"
        x-exportParamName: "ScheduleId"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "view to materialize"
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "Replication collection arguments"
        required: false
        schema:
          $ref: "#/definitions/ApiReplicationDiagnosticsCollectionArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}/history:
    get:
      tags:
      - "ReplicationsResource"
      summary: "Returns a list of commands triggered by a schedule."
      description: "Returns a list of commands triggered by a schedule."
      operationId: "readHistory"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "scheduleId"
        in: "path"
        description: "Id of an existing replication schedule."
        required: true
        type: "number"
        x-exportParamName: "ScheduleId"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "limit"
        in: "query"
        description: "Maximum number of commands to retrieve."
        required: false
        type: "integer"
        default: 20
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "offset"
        in: "query"
        description: "Index of first command to retrieve."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "view"
        in: "query"
        description: "The view to materialize."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiReplicationCommandList"
          examples:
            application/json:
              items:
              - hdfsResult:
                  progress: 12345
                  throughput: 12345.0
                  remainingTime: 12345
                  estimatedCompletionTime: "..."
                  counters:
                  - {}
                  - {}
                  numFilesDryRun: 12345
                  numBytesDryRun: 12345
                  numFilesExpected: 12345
                  numBytesExpected: 12345
                  numFilesCopied: 12345
                  numBytesCopied: 12345
                  numFilesSkipped: 12345
                  numBytesSkipped: 12345
                  numFilesDeleted: 12345
                  numFilesCopyFailed: 12345
                  numBytesCopyFailed: 12345
                  setupError: "..."
                  jobId: "..."
                  jobDetailsUri: "..."
                  dryRun: true
                  snapshottedDirs:
                  - "..."
                  - "..."
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  failedFiles:
                  - "..."
                  - "..."
                hiveResult:
                  phase: "..."
                  tableCount: 12345
                  tables:
                  - {}
                  - {}
                  impalaUDFCount: 12345
                  hiveUDFCount: 12345
                  impalaUDFs:
                  - {}
                  - {}
                  hiveUDFs:
                  - {}
                  - {}
                  errorCount: 12345
                  errors:
                  - {}
                  - {}
                  dataReplicationResult: {}
                  dryRun: true
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  statsAvailable: true
                  dbProcessed: 12345
                  tableProcessed: 12345
                  partitionProcessed: 12345
                  functionProcessed: 12345
                  indexProcessed: 12345
                  statsProcessed: 12345
                  dbExpected: 12345
                  tableExpected: 12345
                  partitionExpected: 12345
                  functionExpected: 12345
                  indexExpected: 12345
                  statsExpected: 12345
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - hdfsResult:
                  progress: 12345
                  throughput: 12345.0
                  remainingTime: 12345
                  estimatedCompletionTime: "..."
                  counters:
                  - {}
                  - {}
                  numFilesDryRun: 12345
                  numBytesDryRun: 12345
                  numFilesExpected: 12345
                  numBytesExpected: 12345
                  numFilesCopied: 12345
                  numBytesCopied: 12345
                  numFilesSkipped: 12345
                  numBytesSkipped: 12345
                  numFilesDeleted: 12345
                  numFilesCopyFailed: 12345
                  numBytesCopyFailed: 12345
                  setupError: "..."
                  jobId: "..."
                  jobDetailsUri: "..."
                  dryRun: true
                  snapshottedDirs:
                  - "..."
                  - "..."
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  failedFiles:
                  - "..."
                  - "..."
                hiveResult:
                  phase: "..."
                  tableCount: 12345
                  tables:
                  - {}
                  - {}
                  impalaUDFCount: 12345
                  hiveUDFCount: 12345
                  impalaUDFs:
                  - {}
                  - {}
                  hiveUDFs:
                  - {}
                  - {}
                  errorCount: 12345
                  errors:
                  - {}
                  - {}
                  dataReplicationResult: {}
                  dryRun: true
                  runAsUser: "..."
                  runOnSourceAsUser: "..."
                  statsAvailable: true
                  dbProcessed: 12345
                  tableProcessed: 12345
                  partitionProcessed: 12345
                  functionProcessed: 12345
                  indexProcessed: 12345
                  statsProcessed: 12345
                  dbExpected: 12345
                  tableExpected: 12345
                  partitionExpected: 12345
                  functionExpected: 12345
                  indexExpected: 12345
                  statsExpected: 12345
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}/run:
    post:
      tags:
      - "ReplicationsResource"
      summary: "Run the schedule immediately."
      description: "Run the schedule immediately.\n<p>\nThe replication command will\
        \ be triggered with the configured arguments,\nand will be recorded in the\
        \ schedule's history.\n<p>\nAvailable since API v3. Only available with Cloudera\
        \ Manager Enterprise\nEdition."
      operationId: "runSchedule"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "scheduleId"
        in: "path"
        description: "Id of an existing replication schedule."
        required: true
        type: "number"
        x-exportParamName: "ScheduleId"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "dryRun"
        in: "query"
        description: "Whether to execute a dry run."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "DryRun"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsBootstrapStandBy:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Bootstrap HDFS stand-by NameNodes."
      description: "Bootstrap HDFS stand-by NameNodes.\n<p>\nSubmit a request to synchronize\
        \ HDFS NameNodes with their assigned HA\npartners. The command requires that\
        \ the target NameNodes are part of\nexisting HA pairs, which can be accomplished\
        \ by setting the nameservice\nconfiguration parameter in the NameNode's configuration.\n\
        <p>\nThe HA partner must already be formatted and running for this command\n\
        to run."
      operationId: "hdfsBootstrapStandByCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The names of the stand-by NameNodes to bootstrap."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsEnterSafemode:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Enter safemode for namenodes."
      description: "Enter safemode for namenodes\n<p/>\nAvailable since API v4."
      operationId: "hdfsEnterSafemode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "NameNodes for which to enter safemode."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsFinalizeMetadataUpgrade:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Finalize HDFS NameNode metadata upgrade."
      description: "Finalize HDFS NameNode metadata upgrade.\n<p/>\nAvailable since\
        \ API v3."
      operationId: "hdfsFinalizeMetadataUpgrade"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "NameNodes for which to finalize the upgrade."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsFormat:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Format HDFS NameNodes."
      description: "Format HDFS NameNodes.\n<p>\nSubmit a format request to a list\
        \ of NameNodes on a service. Note that\ntrying to format a previously formatted\
        \ NameNode will fail.\n<p>\nNote about high availability: when two NameNodes\
        \ are working in an HA\npair, only one of them should be formatted.\n<p>\n\
        Bulk command operations are not atomic, and may contain partial failures.\n\
        The returned list will contain references to all successful commands, and\n\
        a list of error messages identifying the roles on which the command\nfailed."
      operationId: "formatCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The names of the NameNodes to format."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsInitializeAutoFailover:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Initialize HDFS HA failover controller metadata."
      description: "Initialize HDFS HA failover controller metadata.\n<p>\nThe controllers\
        \ being initialized must already exist and be properly\nconfigured. The command\
        \ will make sure the needed data is initialized\nfor the controller to work.\n\
        <p>\nOnly one controller per nameservice needs to be initialized."
      operationId: "hdfsInitializeAutoFailoverCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The names of the controllers to initialize."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsInitializeSharedDir:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Initialize HDFS NameNodes' shared edit directory."
      description: "Initialize HDFS NameNodes' shared edit directory.\n<p>\nShared\
        \ edit directories are used when two HDFS NameNodes are operating as\na high-availability\
        \ pair. This command initializes the shared directory to\ninclude the necessary\
        \ metadata.\n<p>\nThe provided role names should reflect one of the NameNodes\
        \ in the\nrespective HA pair; the role must be stopped and its data directory\
        \ must\nalready have been formatted. The shared edits directory must be empty\
        \ for\nthis command to succeed."
      operationId: "hdfsInitializeSharedDirCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The names of the NameNodes."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsLeaveSafemode:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Leave safemode for namenodes."
      description: "Leave safemode for namenodes\n<p/>\nAvailable since API v4."
      operationId: "hdfsLeaveSafemode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "NameNodes for which to leave safemode."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsSaveNamespace:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Save namespace for namenodes."
      description: "Save namespace for namenodes\n<p/>\nAvailable since API v4."
      operationId: "hdfsSaveNamespace"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "NameNodes for which to save namespace."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/hueSyncDb:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Create / update the Hue database schema."
      description: "Create / update the Hue database schema.\n<p>\nThis command is\
        \ to be run whenever a new database has been specified or,\nas necessary,\
        \ after an upgrade.\n<p>\nThis request should be sent to Hue servers only."
      operationId: "syncHueDbCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The names of the Hue server roles."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/jmapDump:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Run the jmapDump diagnostic command."
      description: "Run the jmapDump diagnostic command. The command runs the jmap\
        \ utility to\ncapture a dump of the role's java heap.\n<p/>\nAvailable since\
        \ API v8."
      operationId: "jmapDump"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "the names of the roles to jmap."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/jmapHisto:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Run the jmapHisto diagnostic command."
      description: "Run the jmapHisto diagnostic command. The command runs the jmap\
        \ utility to\ncapture a histogram of the objects on the role's java heap.\n\
        <p/>\nAvailable since API v8."
      operationId: "jmapHisto"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "the names of the roles to jmap."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/jstack:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Run the jstack diagnostic command."
      description: "Run the jstack diagnostic command. The command runs the jstack\
        \ utility to\ncapture a role's java thread stacks.\n<p/>\nAvailable since\
        \ API v8."
      operationId: "jstack"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "the names of the roles to jstack."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/lsof:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Run the lsof diagnostic command."
      description: "Run the lsof diagnostic command. This command runs the lsof utility\
        \ to\nlist a role's open files.\n<p/>\nAvailable since API v8."
      operationId: "lsof"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "the names of the roles to lsof."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/refresh:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Refresh a role's data."
      description: "Refresh a role's data.\n<p>\nFor MapReduce services, this command\
        \ should be executed on JobTracker\nroles. It refreshes the role's queue and\
        \ node information.\n<p>\nFor HDFS services, this command should be executed\
        \ on NameNode or\nDataNode roles. For NameNodes, it refreshes the role's node\
        \ list.\nFor DataNodes, it refreshes the role's data directory list and other\n\
        configuration.\n<p>\nFor YARN services, this command should be executed on\
        \ ResourceManager\nroles. It refreshes the role's queue and node information.\n\
        <p>\nAvailable since API v1. DataNode data directories refresh available\n\
        since API v10."
      operationId: "refreshCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The names of the roles."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/restart:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Restart a set of role instances."
      description: "Restart a set of role instances\n<p>\nBulk command operations\
        \ are not atomic, and may contain partial failures.\nThe returned list will\
        \ contain references to all successful commands, and\na list of error messages\
        \ identifying the roles on which the command\nfailed."
      operationId: "restartCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The name of the roles to restart."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/start:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Start a set of role instances."
      description: "Start a set of role instances.\n<p>\nBulk command operations are\
        \ not atomic, and may contain partial failures.\nThe returned list will contain\
        \ references to all successful commands, and\na list of error messages identifying\
        \ the roles on which the command\nfailed."
      operationId: "startCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The names of the roles to start."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/stop:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Stop a set of role instances."
      description: "Stop a set of role instances.\n<p>\nBulk command operations are\
        \ not atomic, and may contain partial failures.\nThe returned list will contain\
        \ references to all successful commands, and\na list of error messages identifying\
        \ the roles on which the command\nfailed."
      operationId: "stopCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The role type."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/zooKeeperCleanup:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Cleanup a list of ZooKeeper server roles."
      description: "Cleanup a list of ZooKeeper server roles.\n<p>\nThis command removes\
        \ snapshots and transaction log files kept by\nZooKeeper for backup purposes.\
        \ Refer to the ZooKeeper documentation\nfor more details."
      operationId: "zooKeeperCleanupCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The names of the roles."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/zooKeeperInit:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Initialize a list of ZooKeeper server roles."
      description: "Initialize a list of ZooKeeper server roles.\n<p>\nThis applies\
        \ to ZooKeeper services from CDH4. Before ZooKeeper server\nroles can be used,\
        \ they need to be initialized."
      operationId: "zooKeeperInitCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The names of the roles."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleCommands/{commandName}:
    post:
      tags:
      - "RoleCommandsResource"
      summary: "Execute a role command by name."
      description: "Execute a role command by name.\n<p/>\nAvailable since API v6."
      operationId: "roleCommandByName"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "commandName"
        in: "path"
        description: "the name of command to execute."
        required: true
        type: "string"
        x-exportParamName: "CommandName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "the roles to run this command on."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiBulkCommandList"
          examples:
            application/json:
              errors:
              - "..."
              - "..."
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleConfigGroups:
    get:
      tags:
      - "RoleConfigGroupsResource"
      summary: "Returns the information for all role config groups for\na given cluster\
        \ and service."
      description: "Returns the information for all role config groups for\na given\
        \ cluster and service.\n<p>\nAvailable since API v3."
      operationId: "readRoleConfigGroups"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleConfigGroupList"
          examples:
            application/json:
              items:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
          headers: {}
    post:
      tags:
      - "RoleConfigGroupsResource"
      summary: "Creates new role config groups."
      description: "Creates new role config groups.\nIt is not allowed to create base\
        \ groups (base must be set to false.)\n<p>\nAvailable since API v3."
      operationId: "createRoleConfigGroups"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The list of groups to be created."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleConfigGroupList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleConfigGroupList"
          examples:
            application/json:
              items:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleConfigGroups/roles:
    put:
      tags:
      - "RoleConfigGroupsResource"
      summary: "Moves roles to the base role config group."
      description: "Moves roles to the base role config group.\n\nThe roles can be\
        \ moved from any role config group belonging to the same\nservice. The role\
        \ type of the roles may vary. Each role will be moved to\nits corresponding\
        \ base group depending on its role type.\n<p>\nAvailable since API v3."
      operationId: "moveRolesToBaseGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The names of the roles to move."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPING"
                commissionState: "DECOMMISSIONED"
                healthSummary: "HISTORY_NOT_AVAILABLE"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_OBSERVER"
                entityStatus: "CONCERNING_HEALTH"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "NA"
                commissionState: "OFFLINED"
                healthSummary: "CONCERNING"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "SERVICE"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER"
                entityStatus: "STOPPING"
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}:
    get:
      tags:
      - "RoleConfigGroupsResource"
      summary: "Returns the information for a role config group."
      description: "Returns the information for a role config group.\n<p>\nAvailable\
        \ since API v3."
      operationId: "readRoleConfigGroup"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the requested group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleConfigGroup"
          examples:
            application/json:
              name: "..."
              roleType: "..."
              base: true
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
          headers: {}
    put:
      tags:
      - "RoleConfigGroupsResource"
      summary: "Updates an existing role config group."
      description: "Updates an existing role config group\n<p>\nAvailable since API\
        \ v3."
      operationId: "updateRoleConfigGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the group to update."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "message"
        in: "query"
        description: "The optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "The updated role config group."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleConfigGroup"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleConfigGroup"
          examples:
            application/json:
              name: "..."
              roleType: "..."
              base: true
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
          headers: {}
    delete:
      tags:
      - "RoleConfigGroupsResource"
      summary: "Deletes a role config group."
      description: "Deletes a role config group.\n<p>\nAvailable since API v3."
      operationId: "deleteRoleConfigGroup"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the group to delete."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleConfigGroup"
          examples:
            application/json:
              name: "..."
              roleType: "..."
              base: true
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}/config:
    get:
      tags:
      - "RoleConfigGroupsResource"
      summary: "Returns the current revision of the config\nfor the specified role\
        \ config group."
      description: "Returns the current revision of the config\nfor the specified\
        \ role config group.\n<p>\nAvailable since API v3."
      operationId: "readConfig"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the role config group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "RoleConfigGroupsResource"
      summary: "Updates the config for the given role config group."
      description: "Updates the config for the given role config group."
      operationId: "updateConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the role config group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "The new config information for the group."
        required: false
        schema:
          $ref: "#/definitions/ApiConfigList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}/roles:
    get:
      tags:
      - "RoleConfigGroupsResource"
      summary: "Returns all roles in the given role config group."
      description: "Returns all roles in the given role config group.\n<p>\nAvailable\
        \ since API v3."
      operationId: "readRoles"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the role config group."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPING"
                commissionState: "DECOMMISSIONED"
                healthSummary: "HISTORY_NOT_AVAILABLE"
                configStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "UNKNOWN"
                entityStatus: "STOPPING"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPED"
                commissionState: "OFFLINING"
                healthSummary: "GOOD"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_FOLLOWER"
                entityStatus: "STOPPED"
          headers: {}
    put:
      tags:
      - "RoleConfigGroupsResource"
      summary: "Moves roles to the specified role config group."
      description: "Moves roles to the specified role config group.\n\nThe roles can\
        \ be moved from any role config group belonging\nto the same service. The\
        \ role type of the destination group\nmust match the role type of the roles.\n\
        <p>\nAvailable since API v3."
      operationId: "moveRoles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleConfigGroupName"
        in: "path"
        description: "The name of the group the roles will be moved to."
        required: true
        type: "string"
        x-exportParamName: "RoleConfigGroupName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The names of the roles to move."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STARTING"
                commissionState: "OFFLINING"
                healthSummary: "GOOD"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_OBSERVER"
                entityStatus: "STOPPING"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPED"
                commissionState: "OFFLINED"
                healthSummary: "NOT_AVAILABLE"
                configStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_FOLLOWER"
                entityStatus: "GOOD_HEALTH"
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles:
    get:
      tags:
      - "RolesResource"
      summary: "Lists all roles of a given service."
      description: "Lists all roles of a given service."
      operationId: "readRoles"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "filter"
        in: "query"
        description: "Optional query to filter the roles by.\n<p>\nThe query specifies\
          \ the intersection of a list of constraints,\njoined together with semicolons\
          \ (without spaces). For example:\nhostname==host1.abc.com;type==DATANODE\n\
          </p>\n\nCurrently supports filtering by:\n<ul>\n<li>hostname: The hostname\
          \ of the host the role is running on.</li>\n<li>hostId: The unique identifier\
          \ of the host the role is running on.</li>\n<li>type: The role's type.</li>\n\
          </ul>"
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "view"
        in: "query"
        description: "DataView for getting roles. Defaults to 'summary'."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPED"
                commissionState: "OFFLINING"
                healthSummary: "CONCERNING"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER"
                entityStatus: "UNKNOWN"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STARTED"
                commissionState: "OFFLINED"
                healthSummary: "NOT_AVAILABLE"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                haStatus: "ACTIVE"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_FOLLOWER"
                entityStatus: "UNKNOWN_HEALTH"
          headers: {}
    post:
      tags:
      - "RolesResource"
      summary: "Create new roles in a given service."
      description: "Create new roles in a given service.\n\n<table>\n<thead>\n<tr>\n\
        <th>Service Type</th>\n<th>Available Role Types</th>\n</tr>\n</thead>\n<tbody>\n\
        <tr>\n<td>HDFS (CDH3)</td>\n<td>NAMENODE, DATANODE, SECONDARYNAMENODE, BALANCER,\
        \ GATEWAY</td>\n</tr>\n<tr>\n<td>HDFS (CDH4)</td>\n<td>NAMENODE, DATANODE,\
        \ SECONDARYNAMENODE, BALANCER, HTTPFS,\nFAILOVERCONTROLLER, GATEWAY, JOURNALNODE</td>\n\
        </tr>\n<tr>\n<td>HDFS (CDH5)</td>\n<td>NAMENODE, DATANODE, SECONDARYNAMENODE,\
        \ BALANCER, HTTPFS,\nFAILOVERCONTROLLER, GATEWAY, JOURNALNODE, NFSGATEWAY</td>\n\
        </tr>\n<td>MAPREDUCE</td>\n<td>JOBTRACKER, TASKTRACKER, GATEWAY, FAILOVERCONTROLLER,</td>\n\
        </tr>\n<td>HBASE</td>\n<td>MASTER, REGIONSERVER, GATEWAY, HBASETHRIFTSERVER,\
        \ HBASERESTSERVER</td>\n</tr>\n<tr>\n<td>YARN</td>\n<td>RESOURCEMANAGER, NODEMANAGER,\
        \ JOBHISTORY, GATEWAY</td>\n</tr>\n<tr>\n<td>OOZIE</td>\n<td>OOZIE_SERVER</td>\n\
        </tr>\n<tr>\n<td>ZOOKEEPER</td>\n<td>SERVER</td>\n</tr>\n<tr>\n<td>HUE (CDH3)</td>\n\
        <td>HUE_SERVER, BEESWAX_SERVER, KT_RENEWER, JOBSUBD</td>\n</tr>\n<tr>\n<td>HUE\
        \ (CDH4)</td>\n<td>HUE_SERVER, BEESWAX_SERVER, KT_RENEWER</td>\n</tr>\n<tr>\n\
        <td>HUE (CDH5)</td>\n<td>HUE_SERVER, KT_RENEWER</td>\n</tr>\n<tr>\n<td>HUE\
        \ (CDH5 5.5+)</td>\n<td>HUE_SERVER, KT_RENEWER, HUE_LOAD_BALANCER</td>\n</tr>\n\
        <tr>\n<td>FLUME</td>\n<td>AGENT</td>\n</tr>\n<tr>\n<td>IMPALA (CDH4)</td>\n\
        <td>IMPALAD, STATESTORE, CATALOGSERVER</td>\n</tr>\n<tr>\n<td>IMPALA (CDH5)</td>\n\
        <td>IMPALAD, STATESTORE, CATALOGSERVER</td>\n</tr>\n<tr>\n<td>HIVE</td>\n\
        <td>HIVESERVER2, HIVEMETASTORE, WEBHCAT, GATEWAY</td>\n</tr>\n<tr>\n<td>SOLR</td>\n\
        <td>SOLR_SERVER, GATEWAY</td>\n</tr>\n<tr>\n<td>SQOOP</td>\n<td>SQOOP_SERVER</td>\n\
        </tr>\n<tr>\n<td>SQOOP_CLIENT</td>\n<td>GATEWAY</td>\n</tr>\n<tr>\n<td>SENTRY</td>\n\
        <td>SENTRY_SERVER</td>\n</tr>\n<tr>\n<td>ACCUMULO16</td>\n<td>GARBAGE_COLLECTOR,\
        \ GATEWAY, ACCUMULO16_MASTER, MONITOR,\nACCUMULO16_TSERVER, TRACER</td>\n\
        </tr>\n<tr>\n<td>KMS</td>\n<td>KMS</td>\n</tr>\n<tr>\n<td>KS_INDEXER</td>\n\
        <td>HBASE_INDEXER</td>\n</tr>\n<tr>\n<td>SPARK_ON_YARN</td>\n<td>GATEWAY,\
        \ SPARK_YARN_HISTORY_SERVER</td>\n</tr>\n</tbody>\n\n</table>\n\nWhen specifying\
        \ roles to be created, the names provided for each role\nmust not conflict\
        \ with the names that CM auto-generates for roles.\nSpecifically, names of\
        \ the form\n\"<service name>-<role type>-<arbitrary value>\" cannot be used\
        \ unless the\n<arbitrary value> is the same one CM would use. If CM detects\
        \ such a\nconflict, the error message will indicate what <arbitrary value>\
        \ is safe\nto use. Alternately, a differently formatted name should be used.\n\
        \nSince API v6: The role name can be left blank to allow CM to generate the\n\
        name."
      operationId: "createRoles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Roles to create."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPED"
                commissionState: "OFFLINED"
                healthSummary: "GOOD"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "HOST"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "STANDALONE"
                entityStatus: "GOOD_HEALTH"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "UNKNOWN"
                commissionState: "DECOMMISSIONING"
                healthSummary: "CONCERNING"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_OBSERVER"
                entityStatus: "UNKNOWN_HEALTH"
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/bulkDelete:
    post:
      tags:
      - "RolesResource"
      summary: "Bulk delete roles in a particular service by name."
      description: "Bulk delete roles in a particular service by name. Fails if any\
        \ role cannot\nbe found."
      operationId: "bulkDeleteRoles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "list of role names to be deleted"
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "HISTORY_NOT_AVAILABLE"
                commissionState: "UNKNOWN"
                healthSummary: "HISTORY_NOT_AVAILABLE"
                configStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                haStatus: "ACTIVE"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "STANDALONE"
                entityStatus: "UNKNOWN_HEALTH"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPED"
                commissionState: "UNKNOWN"
                healthSummary: "NOT_AVAILABLE"
                configStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                haStatus: "ACTIVE"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_FOLLOWER"
                entityStatus: "STARTING"
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}:
    get:
      tags:
      - "RolesResource"
      summary: "Retrieves detailed information about a role."
      description: "Retrieves detailed information about a role."
      operationId: "readRole"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view to materialize. Defaults to 'full'."
        required: false
        type: "string"
        default: "full"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRole"
          examples:
            application/json:
              name: "..."
              type: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleState: "STARTED"
              commissionState: "COMMISSIONED"
              healthSummary: "NOT_AVAILABLE"
              configStalenessStatus: "STALE"
              healthChecks:
              - name: "..."
                summary: "DISABLED"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              haStatus: "UNKNOWN"
              roleUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "ROLE"
              - "CLUSTER"
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roleConfigGroupRef:
                roleConfigGroupName: "..."
              zooKeeperServerMode: "REPLICATED_LEADER"
              entityStatus: "HISTORY_NOT_AVAILABLE"
          headers: {}
    delete:
      tags:
      - "RolesResource"
      summary: "Deletes a role from a given service."
      description: "Deletes a role from a given service."
      operationId: "deleteRole"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRole"
          examples:
            application/json:
              name: "..."
              type: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleState: "STOPPING"
              commissionState: "OFFLINING"
              healthSummary: "CONCERNING"
              configStalenessStatus: "STALE_REFRESHABLE"
              healthChecks:
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              haStatus: "STANDBY"
              roleUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "SERVICE"
              - "ROLE"
              config:
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roleConfigGroupRef:
                roleConfigGroupName: "..."
              zooKeeperServerMode: "REPLICATED_OBSERVER"
              entityStatus: "UNKNOWN"
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/commands:
    get:
      tags:
      - "RolesResource"
      summary: "List active role commands."
      description: "List active role commands."
      operationId: "listActiveCommands"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role to start."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommandList"
          examples:
            application/json:
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/commandsByName:
    get:
      tags:
      - "RolesResource"
      summary: "Lists all the commands that can be executed by name\non the provided\
        \ role."
      description: "Lists all the commands that can be executed by name\non the provided\
        \ role."
      operationId: "listCommands"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "the role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommandMetadataList"
          examples:
            application/json:
              items:
              - name: "..."
                argSchema: "..."
              - name: "..."
                argSchema: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/config:
    get:
      tags:
      - "RolesResource"
      summary: "Retrieves the configuration of a specific role."
      description: "Retrieves the configuration of a specific role. Note that the\
        \ \"full\" view\nperforms validation on the configuration, which could take\
        \ a few seconds\non a large cluster (around 500 nodes or more)."
      operationId: "readRoleConfig"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role to look up."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "RolesResource"
      summary: "Updates the role configuration with the given values."
      description: "Updates the role configuration with the given values.\n<p>\nIf\
        \ a value is set in the given configuration, it will be added\nto the role's\
        \ configuration, replacing any existing entries.\nIf a value is unset (its\
        \ value is null), the existing\nconfiguration for the attribute will be erased,\
        \ if any.\n<p>\nAttributes that are not listed in the input will maintain\
        \ their\ncurrent values in the configuration."
      operationId: "updateRoleConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role to modify."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "Configuration changes."
        required: false
        schema:
          $ref: "#/definitions/ApiConfigList"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiConfigList"
          examples:
            application/json:
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "ERROR"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/metrics:
    get:
      tags:
      - "RolesResource"
      summary: "Fetch metric readings for a particular role."
      description: "Fetch metric readings for a particular role.\n<p>\nBy default,\
        \ this call will look up all metrics available for the role. If\nonly specific\
        \ metrics are desired, use the <i>metrics</i> parameter.\n<p>\nBy default,\
        \ the returned results correspond to a 5 minute window based on\nthe provided\
        \ end time (which defaults to the current server time). The\n<i>from</i> and\
        \ <i>to</i> parameters can be used to control the window\nbeing queried. A\
        \ maximum window of 3 hours is enforced.\n<p>\nWhen requesting a \"full\"\
        \ view, aside from the extended properties of the\nreturned metric data, the\
        \ collection will also contain information about\nall metrics available for\
        \ the role, even if no readings are available\nin the requested window."
      operationId: "getMetrics"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The name of the role."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "from"
        in: "query"
        description: "Start of the period to query."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "metrics"
        in: "query"
        description: "Filter for which metrics to query."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Metrics"
      - name: "to"
        in: "query"
        description: "End of the period to query."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiMetricList"
          examples:
            application/json:
              items:
              - name: "..."
                context: "..."
                unit: "..."
                data:
                - timestamp: "..."
                  value: 12345.0
                - timestamp: "..."
                  value: 12345.0
                displayName: "..."
                description: "..."
              - name: "..."
                context: "..."
                unit: "..."
                data:
                - timestamp: "..."
                  value: 12345.0
                - timestamp: "..."
                  value: 12345.0
                displayName: "..."
                description: "..."
          headers: {}
      deprecated: true
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/commands/enterMaintenanceMode:
    post:
      tags:
      - "RolesResource"
      summary: "Put the role into maintenance mode."
      description: "Put the role into maintenance mode. This is a synchronous command.\
        \ The\nresult is known immediately upon return.\n\n<p>\nAvailable since API\
        \ v2.\n</p>"
      operationId: "enterMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/commands/exitMaintenanceMode:
    post:
      tags:
      - "RolesResource"
      summary: "Take the role out of maintenance mode."
      description: "Take the role out of maintenance mode. This is a synchronous command.\
        \ The\nresult is known immediately upon return.\n\n<p>\nAvailable since API\
        \ v2.\n</p>"
      operationId: "exitMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/commands/impalaDiagnostics:
    post:
      tags:
      - "RolesResource"
      summary: "Collects diagnostics data for an Impala role."
      description: "Collects diagnostics data for an Impala role.\n\n<p>\nAvailable\
        \ since API v31.\n</p>"
      operationId: "impalaDiagnostics"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role name."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiImpalaRoleDiagnosticsArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/logs/full:
    get:
      tags:
      - "RolesResource"
      summary: "Retrieves the log file for the role's main process."
      description: "Retrieves the log file for the role's main process.\n<p>\nIf the\
        \ role is not started, this will be the log file associated with\nthe last\
        \ time the role was run.\n<p>\nLog files are returned as plain text (type\
        \ \"text/plain\")."
      operationId: "getFullLog"
      produces:
      - "text/plain"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role to fetch logs from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/logs/stacks:
    get:
      tags:
      - "RolesResource"
      summary: "Retrieves the stacks log file, if any, for the role's main process."
      description: "Retrieves the stacks log file, if any, for the role's main process.\
        \ Note\nthat not all roles support periodic stacks collection.\n\nThe log\
        \ files are returned as plain text (type \"text/plain\")."
      operationId: "getStacksLog"
      produces:
      - "text/plain"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role to fetch stacks logs from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/logs/stacksBundle:
    get:
      tags:
      - "RolesResource"
      summary: "Download a zip-compressed archive of role stacks logs."
      description: "Download a zip-compressed archive of role stacks logs. Note that\
        \ not all\nroles support periodic stacks collection."
      operationId: "getStacksLogsBundle"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role to fetch the stacks logs bundle from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          examples: {}
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/logs/stderr:
    get:
      tags:
      - "RolesResource"
      summary: "Retrieves the role's standard error output."
      description: "Retrieves the role's standard error output.\n<p>\nIf the role\
        \ is not started, this will be the output associated with\nthe last time the\
        \ role was run.\n<p>\nLog files are returned as plain text (type \"text/plain\"\
        )."
      operationId: "getStandardError"
      produces:
      - "text/plain"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role to fetch stderr from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/roles/{roleName}/logs/stdout:
    get:
      tags:
      - "RolesResource"
      summary: "Retrieves the role's standard output."
      description: "Retrieves the role's standard output.\n<p>\nIf the role is not\
        \ started, this will be the output associated with\nthe last time the role\
        \ was run.\n<p>\nLog files are returned as plain text (type \"text/plain\"\
        )."
      operationId: "getStandardOutput"
      produces:
      - "text/plain"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "roleName"
        in: "path"
        description: "The role to fetch stdout from."
        required: true
        type: "string"
        x-exportParamName: "RoleName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            type: "string"
            description: ""
          examples: {}
          headers: {}
  /clusters/{clusterName}/services:
    get:
      tags:
      - "ServicesResource"
      summary: "Lists all services registered in the cluster."
      description: "Lists all services registered in the cluster."
      operationId: "readServices"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiServiceList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STARTED"
                healthSummary: "HISTORY_NOT_AVAILABLE"
                configStalenessStatus: "STALE"
                clientConfigStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "SERVICE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STARTED"
                  commissionState: "UNKNOWN"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "ROLE"
                  - "CLUSTER"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                  entityStatus: "STOPPING"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "HISTORY_NOT_AVAILABLE"
                  commissionState: "OFFLINED"
                  healthSummary: "DISABLED"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "ACTIVE"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "CLUSTER"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_OBSERVER"
                  entityStatus: "DISABLED_HEALTH"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "YEAR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "YEAR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "STOPPING"
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STARTED"
                healthSummary: "BAD"
                configStalenessStatus: "STALE_REFRESHABLE"
                clientConfigStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "ROLE"
                - "ROLE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "HISTORY_NOT_AVAILABLE"
                  commissionState: "UNKNOWN"
                  healthSummary: "CONCERNING"
                  configStalenessStatus: "STALE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "CLUSTER"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER"
                  entityStatus: "HISTORY_NOT_AVAILABLE"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "UNKNOWN"
                  commissionState: "OFFLINED"
                  healthSummary: "DISABLED"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "CLUSTER"
                  - "SERVICE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_FOLLOWER"
                  entityStatus: "BAD_HEALTH"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "HOUR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MINUTE"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "HISTORY_NOT_AVAILABLE"
          headers: {}
    post:
      tags:
      - "ServicesResource"
      summary: "Creates a list of services."
      description: "Creates a list of services.\n<p>\nThere are typically two service\
        \ creation strategies:\n<ol>\n<li>\nThe caller may choose to set up a new\
        \ service piecemeal, by first\ncreating the service itself (without any roles\
        \ or configuration),\nand then create the roles, and then specify configuration.\n\
        </li>\n<li>\nAlternatively, the caller can pack\nall the information in one\
        \ call, by fully specifying the fields in\nthe com.cloudera.api.model.ApiService\
        \ object, with\n<ul>\n<li>service config and role type config, and</li>\n\
        <li>role to host assignment.</li>\n</ul>\n</li>\n</ol>\n\n<table>\n<thead>\n\
        <tr>\n<th>Cluster Version</th>\n<th>Available Service Types</th>\n</tr>\n\
        </thead>\n<tbody>\n<tr>\n<td>CDH4</td>\n<td>HDFS, MAPREDUCE, HBASE, OOZIE,\
        \ ZOOKEEPER, HUE, YARN, IMPALA, FLUME, HIVE, SOLR, SQOOP, KS_INDEXER</td>\n\
        </tr>\n<tr>\n<td>CDH5</td>\n<td>HDFS, MAPREDUCE, HBASE, OOZIE, ZOOKEEPER,\
        \ HUE, YARN, IMPALA,\nFLUME, HIVE, SOLR, SQOOP, KS_INDEXER, SQOOP_CLIENT,\
        \ SENTRY,\nACCUMULO16, KMS, SPARK_ON_YARN, KAFKA\n</td>\n</tr>\n</tbody>\n\
        </table>\n\nAs of V6, GET /{clusterName}/serviceTypes should be used to get\n\
        the service types available to the cluster."
      operationId: "createServices"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - in: "body"
        name: "body"
        description: "Details of the services to create."
        required: false
        schema:
          $ref: "#/definitions/ApiServiceList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiServiceList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STOPPED"
                healthSummary: "CONCERNING"
                configStalenessStatus: "FRESH"
                clientConfigStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "HOST"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "NA"
                  commissionState: "OFFLINING"
                  healthSummary: "DISABLED"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "SERVICE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                  entityStatus: "STOPPING"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STARTED"
                  commissionState: "OFFLINING"
                  healthSummary: "CONCERNING"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "SERVICE"
                  - "SERVICE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "UNKNOWN"
                  entityStatus: "DISABLED_HEALTH"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "YEAR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "WEEK"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "HISTORY_NOT_AVAILABLE"
              - name: "..."
                type: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceState: "STARTING"
                healthSummary: "GOOD"
                configStalenessStatus: "STALE_REFRESHABLE"
                clientConfigStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                serviceUrl: "..."
                roleInstancesUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "ROLE"
                config:
                  roleTypeConfigs:
                  - {}
                  - {}
                  items:
                  - {}
                  - {}
                roles:
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "STOPPING"
                  commissionState: "OFFLINED"
                  healthSummary: "NOT_AVAILABLE"
                  configStalenessStatus: "FRESH"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "UNKNOWN"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "HOST"
                  - "ROLE"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_FOLLOWER"
                  entityStatus: "DISABLED_HEALTH"
                - name: "..."
                  type: "..."
                  hostRef: {}
                  serviceRef: {}
                  roleState: "HISTORY_NOT_AVAILABLE"
                  commissionState: "OFFLINING"
                  healthSummary: "HISTORY_NOT_AVAILABLE"
                  configStalenessStatus: "STALE_REFRESHABLE"
                  healthChecks:
                  - {}
                  - {}
                  haStatus: "STANDBY"
                  roleUrl: "..."
                  maintenanceMode: true
                  maintenanceOwners:
                  - "CLUSTER"
                  - "HOST"
                  config: {}
                  roleConfigGroupRef: {}
                  zooKeeperServerMode: "REPLICATED_LEADER"
                  entityStatus: "STOPPING"
                displayName: "..."
                roleConfigGroups:
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                - name: "..."
                  roleType: "..."
                  base: true
                  config: {}
                  displayName: "..."
                  serviceRef: {}
                replicationSchedules:
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "MONTH"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                - hdfsArguments: {}
                  hiveArguments: {}
                  hdfsCloudArguments: {}
                  history:
                  - {}
                  - {}
                  active: true
                  hiveCloudArguments: {}
                  id: 12345
                  displayName: "..."
                  description: "..."
                  startTime: "..."
                  endTime: "..."
                  interval: 12345
                  intervalUnit: "YEAR"
                  nextRun: "..."
                  paused: true
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                snapshotPolicies:
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                - name: "..."
                  description: "..."
                  hourlySnapshots: 12345
                  dailySnapshots: 12345
                  weeklySnapshots: 12345
                  monthlySnapshots: 12345
                  yearlySnapshots: 12345
                  minuteOfHour: 12345
                  hoursForHourlySnapshots:
                  - 12345
                  - 12345
                  hourOfDay: 12345
                  dayOfWeek: 12345
                  dayOfMonth: 12345
                  monthOfYear: 12345
                  alertOnStart: true
                  alertOnSuccess: true
                  alertOnFail: true
                  alertOnAbort: true
                  hbaseArguments: {}
                  hdfsArguments: {}
                  lastCommand: {}
                  lastSuccessfulCommand: {}
                  paused: true
                entityStatus: "STOPPING"
          headers: {}
  /clusters/{clusterName}/services/{serviceName}:
    get:
      tags:
      - "ServicesResource"
      summary: "Retrieves details information about a service."
      description: "Retrieves details information about a service."
      operationId: "readService"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "DataView to materialize. Defaults to 'full'."
        required: false
        type: "string"
        default: "full"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiService"
          examples:
            application/json:
              name: "..."
              type: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceState: "UNKNOWN"
              healthSummary: "NOT_AVAILABLE"
              configStalenessStatus: "FRESH"
              clientConfigStalenessStatus: "STALE"
              healthChecks:
              - name: "..."
                summary: "CONCERNING"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "GOOD"
                explanation: "..."
                suppressed: true
              serviceUrl: "..."
              roleInstancesUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "SERVICE"
              - "CLUSTER"
              config:
                roleTypeConfigs:
                - roleType: "..."
                  items:
                  - {}
                  - {}
                - roleType: "..."
                  items:
                  - {}
                  - {}
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roles:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STOPPING"
                commissionState: "DECOMMISSIONED"
                healthSummary: "BAD"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "CONCERNING"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "HOST"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_OBSERVER"
                entityStatus: "CONCERNING_HEALTH"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "HISTORY_NOT_AVAILABLE"
                commissionState: "OFFLINED"
                healthSummary: "CONCERNING"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "ROLE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER"
                entityStatus: "STARTING"
              displayName: "..."
              roleConfigGroups:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              replicationSchedules:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "KEEP_DATA_IN_CLOUD"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "MINUTE"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "KEEP_DATA_IN_CLOUD"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "MINUTE"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              snapshotPolicies:
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "REMOTE_S3"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              entityStatus: "GOOD_HEALTH"
          headers: {}
    put:
      tags:
      - "ServicesResource"
      summary: "Updates service information."
      description: "Updates service information.\n<p/>\nThis method will update only\
        \ writable fields of the service information.\nCurrently this only includes\
        \ the service display name.\n<p/>\nAvailable since API v3."
      operationId: "updateService"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Updated service information."
        required: false
        schema:
          $ref: "#/definitions/ApiService"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiService"
          examples:
            application/json:
              name: "..."
              type: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceState: "NA"
              healthSummary: "DISABLED"
              configStalenessStatus: "FRESH"
              clientConfigStalenessStatus: "STALE_REFRESHABLE"
              healthChecks:
              - name: "..."
                summary: "CONCERNING"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "HISTORY_NOT_AVAILABLE"
                explanation: "..."
                suppressed: true
              serviceUrl: "..."
              roleInstancesUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "CLUSTER"
              - "HOST"
              config:
                roleTypeConfigs:
                - roleType: "..."
                  items:
                  - {}
                  - {}
                - roleType: "..."
                  items:
                  - {}
                  - {}
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roles:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "BUSY"
                commissionState: "COMMISSIONED"
                healthSummary: "HISTORY_NOT_AVAILABLE"
                configStalenessStatus: "STALE_REFRESHABLE"
                healthChecks:
                - name: "..."
                  summary: "BAD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "SERVICE"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
                entityStatus: "STOPPING"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "UNKNOWN"
                commissionState: "UNKNOWN"
                healthSummary: "BAD"
                configStalenessStatus: "FRESH"
                healthChecks:
                - name: "..."
                  summary: "HISTORY_NOT_AVAILABLE"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                haStatus: "UNKNOWN"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_LEADER"
                entityStatus: "UNKNOWN_HEALTH"
              displayName: "..."
              roleConfigGroups:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              replicationSchedules:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_AND_DATA"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "WEEK"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "KEEP_DATA_IN_CLOUD"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "MINUTE"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              snapshotPolicies:
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "REMOTE_S3"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              entityStatus: "UNKNOWN"
          headers: {}
    delete:
      tags:
      - "ServicesResource"
      summary: "Deletes a service from the system."
      description: "Deletes a service from the system."
      operationId: "deleteService"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service to delete."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiService"
          examples:
            application/json:
              name: "..."
              type: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceState: "STARTING"
              healthSummary: "BAD"
              configStalenessStatus: "STALE_REFRESHABLE"
              clientConfigStalenessStatus: "STALE_REFRESHABLE"
              healthChecks:
              - name: "..."
                summary: "BAD"
                explanation: "..."
                suppressed: true
              - name: "..."
                summary: "BAD"
                explanation: "..."
                suppressed: true
              serviceUrl: "..."
              roleInstancesUrl: "..."
              maintenanceMode: true
              maintenanceOwners:
              - "HOST"
              - "SERVICE"
              config:
                roleTypeConfigs:
                - roleType: "..."
                  items:
                  - {}
                  - {}
                - roleType: "..."
                  items:
                  - {}
                  - {}
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              roles:
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "UNKNOWN"
                commissionState: "OFFLINED"
                healthSummary: "DISABLED"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "GOOD"
                  explanation: "..."
                  suppressed: true
                haStatus: "STANDBY"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "HOST"
                - "SERVICE"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_OBSERVER"
                entityStatus: "GOOD_HEALTH"
              - name: "..."
                type: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleState: "STARTING"
                commissionState: "DECOMMISSIONING"
                healthSummary: "CONCERNING"
                configStalenessStatus: "STALE"
                healthChecks:
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                - name: "..."
                  summary: "DISABLED"
                  explanation: "..."
                  suppressed: true
                haStatus: "ACTIVE"
                roleUrl: "..."
                maintenanceMode: true
                maintenanceOwners:
                - "CLUSTER"
                - "CLUSTER"
                config:
                  items:
                  - {}
                  - {}
                roleConfigGroupRef:
                  roleConfigGroupName: "..."
                zooKeeperServerMode: "REPLICATED_OBSERVER"
                entityStatus: "CONCERNING_HEALTH"
              displayName: "..."
              roleConfigGroups:
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              - name: "..."
                roleType: "..."
                base: true
                config:
                  items:
                  - {}
                  - {}
                displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
              replicationSchedules:
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "KEEP_DATA_IN_CLOUD"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "HOUR"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              - hdfsArguments:
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "STATIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                hiveArguments:
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                hdfsCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  sourceService: {}
                  sourcePath: "..."
                  destinationPath: "..."
                  mapreduceServiceName: "..."
                  schedulerPoolName: "..."
                  userName: "..."
                  sourceUser: "..."
                  numMaps: 12345
                  dryRun: true
                  bandwidthPerMap: 12345
                  abortOnError: true
                  removeMissingFiles: true
                  preserveReplicationCount: true
                  preserveBlockSize: true
                  preservePermissions: true
                  logPath: "..."
                  skipChecksumChecks: true
                  skipListingChecksumChecks: true
                  skipTrash: true
                  replicationStrategy: "DYNAMIC"
                  preserveXAttrs: true
                  exclusionFilters:
                  - "..."
                  - "..."
                  raiseSnapshotDiffFailures: true
                  destinationCloudAccount: "..."
                history:
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - hdfsResult: {}
                  hiveResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                active: true
                hiveCloudArguments:
                  sourceAccount: "..."
                  destinationAccount: "..."
                  cloudRootPath: "..."
                  replicationOption: "METADATA_ONLY"
                  sourceService: {}
                  tableFilters:
                  - {}
                  - {}
                  exportDir: "..."
                  force: true
                  replicateData: true
                  hdfsArguments: {}
                  replicateImpalaMetadata: true
                  runInvalidateMetadata: true
                  dryRun: true
                  numThreads: 12345
                id: 12345
                displayName: "..."
                description: "..."
                startTime: "..."
                endTime: "..."
                interval: 12345
                intervalUnit: "MONTH"
                nextRun: "..."
                paused: true
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
              snapshotPolicies:
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              entityStatus: "DOWN"
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/clientConfig:
    get:
      tags:
      - "ServicesResource"
      summary: "Download a zip-compressed archive of the client configuration,\nof\
        \ a specific service."
      description: "Download a zip-compressed archive of the client configuration,\n\
        of a specific service. This resource does not require any authentication."
      operationId: "getClientConfig"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            type: "file"
            description: ""
          examples: {}
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands:
    get:
      tags:
      - "ServicesResource"
      summary: "List active service commands."
      description: "List active service commands."
      operationId: "listActiveCommands"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service to which the role belongs."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommandList"
          examples:
            application/json:
              items:
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commandsByName:
    get:
      tags:
      - "ServicesResource"
      summary: "Lists all the commands that can be executed by name\non the provided\
        \ service."
      description: "Lists all the commands that can be executed by name\non the provided\
        \ service.\n\n<p>\nAvailable since API v6.\n</p>"
      operationId: "listServiceCommands"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommandMetadataList"
          examples:
            application/json:
              items:
              - name: "..."
                argSchema: "..."
              - name: "..."
                argSchema: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/config:
    get:
      tags:
      - "ServicesResource"
      summary: "Retrieves the configuration of a specific service."
      description: "Retrieves the configuration of a specific service.\n<p>\nThe \"\
        summary\" view contains only the configured parameters, and\nconfiguration\
        \ for role types that contain configured parameters.\n<p>\nThe \"full\" view\
        \ contains all available configuration parameters for\nthe service and its\
        \ role types.\nThis mode performs validation on the configuration, which could\
        \ take\na few seconds on a large cluster (around 500 nodes or more)."
      operationId: "readServiceConfig"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service to query."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiServiceConfig"
          examples:
            application/json:
              roleTypeConfigs:
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "ERROR"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
    put:
      tags:
      - "ServicesResource"
      summary: "Updates the service configuration with the given values."
      description: "Updates the service configuration with the given values.\n<p>\n\
        If a value is set in the given configuration, it will be added\nto the service's\
        \ configuration, replacing any existing entries.\nIf a value is unset (its\
        \ value is null), the existing\nconfiguration for the attribute will be erased,\
        \ if any.\n<p>\nAttributes that are not listed in the input will maintain\
        \ their\ncurrent values in the configuration."
      operationId: "updateServiceConfig"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service to modify."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "message"
        in: "query"
        description: "Optional message describing the changes."
        required: false
        type: "string"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      - in: "body"
        name: "body"
        description: "Configuration changes."
        required: false
        schema:
          $ref: "#/definitions/ApiServiceConfig"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiServiceConfig"
          examples:
            application/json:
              roleTypeConfigs:
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "OK"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              - roleType: "..."
                items:
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
                - name: "..."
                  value: "..."
                  required: true
                  default: "..."
                  displayName: "..."
                  description: "..."
                  relatedName: "..."
                  sensitive: true
                  validationState: "WARNING"
                  validationMessage: "..."
                  validationWarningsSuppressed: true
              items:
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "WARNING"
                validationMessage: "..."
                validationWarningsSuppressed: true
              - name: "..."
                value: "..."
                required: true
                default: "..."
                displayName: "..."
                description: "..."
                relatedName: "..."
                sensitive: true
                validationState: "OK"
                validationMessage: "..."
                validationWarningsSuppressed: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/impalaUtilization:
    get:
      tags:
      - "ServicesResource"
      summary: "Provides the resource utilization of the Impala service as well as\
        \ the\nresource utilization per tenant."
      description: "Provides the resource utilization of the Impala service as well\
        \ as the\nresource utilization per tenant. Only available with Cloudera Manager\
        \ Enterprise Edition."
      operationId: "getImpalaUtilization"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "service name"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "daysOfWeek"
        in: "query"
        description: "The days of the week for which the user wants to report utilization.\n\
          Days is a list of number between 1 to 7, where 1 corresponds to Mon. and\
          \ 7 corresponds to Sun.\nAll 7 days are included if this is not specified."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "DaysOfWeek"
      - name: "endHourOfDay"
        in: "query"
        description: "The end hour of a day for which the user wants to report utilization.\n\
          The hour is a number between [0-23]. Default value is 23 if this is not\
          \ specified."
        required: false
        type: "integer"
        default: 23
        x-exportParamName: "EndHourOfDay"
        x-optionalDataType: "Int32"
      - name: "from"
        in: "query"
        description: "Start of the time range to report utilization in ISO 8601 format."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "startHourOfDay"
        in: "query"
        description: "The start hour of a day for which the user wants to report utilization.\n\
          The hour is a number between [0-23]. Default value is 0 if this is not specified."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "StartHourOfDay"
        x-optionalDataType: "Int32"
      - name: "tenantType"
        in: "query"
        description: "The type of the tenant (POOL or USER)."
        required: false
        type: "string"
        default: "POOL"
        x-exportParamName: "TenantType"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "End of the the time range to report utilization in ISO 8601\
          \ format (defaults to now)."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiImpalaUtilization"
          examples:
            application/json:
              totalQueries: 12345.0
              successfulQueries: 12345.0
              oomQueries: 12345.0
              timeOutQueries: 12345.0
              rejectedQueries: 12345.0
              successfulQueriesPercentage: 12345.0
              oomQueriesPercentage: 12345.0
              timeOutQueriesPercentage: 12345.0
              rejectedQueriesPercentage: 12345.0
              avgWaitTimeInQueue: 12345.0
              peakAllocationTimestampMS: 12345
              maxAllocatedMemory: 12345.0
              maxAllocatedMemoryPercentage: 12345.0
              utilizedAtMaxAllocated: 12345.0
              utilizedAtMaxAllocatedPercentage: 12345.0
              peakUsageTimestampMS: 12345
              maxUtilizedMemory: 12345.0
              maxUtilizedMemoryPercentage: 12345.0
              allocatedAtMaxUtilized: 12345.0
              allocatedAtMaxUtilizedPercentage: 12345.0
              distributionUtilizedByImpalaDaemon:
                bins:
                  items:
                  - {}
                  - {}
              distributionAllocatedByImpalaDaemon:
                bins:
                  items:
                  - {}
                  - {}
              tenantUtilizations:
                items:
                - tenantName: "..."
                  totalQueries: 12345.0
                  successfulQueries: 12345.0
                  oomQueries: 12345.0
                  timeOutQueries: 12345.0
                  rejectedQueries: 12345.0
                  avgWaitTimeInQueue: 12345.0
                  peakAllocationTimestampMS: 12345
                  maxAllocatedMemory: 12345.0
                  maxAllocatedMemoryPercentage: 12345.0
                  utilizedAtMaxAllocated: 12345.0
                  utilizedAtMaxAllocatedPercentage: 12345.0
                  peakUsageTimestampMS: 12345
                  maxUtilizedMemory: 12345.0
                  maxUtilizedMemoryPercentage: 12345.0
                  allocatedAtMaxUtilized: 12345.0
                  allocatedAtMaxUtilizedPercentage: 12345.0
                  distributionUtilizedByImpalaDaemon: {}
                  distributionAllocatedByImpalaDaemon: {}
                  avgSpilledMemory: 12345.0
                  maxSpilledMemory: 12345.0
                - tenantName: "..."
                  totalQueries: 12345.0
                  successfulQueries: 12345.0
                  oomQueries: 12345.0
                  timeOutQueries: 12345.0
                  rejectedQueries: 12345.0
                  avgWaitTimeInQueue: 12345.0
                  peakAllocationTimestampMS: 12345
                  maxAllocatedMemory: 12345.0
                  maxAllocatedMemoryPercentage: 12345.0
                  utilizedAtMaxAllocated: 12345.0
                  utilizedAtMaxAllocatedPercentage: 12345.0
                  peakUsageTimestampMS: 12345
                  maxUtilizedMemory: 12345.0
                  maxUtilizedMemoryPercentage: 12345.0
                  allocatedAtMaxUtilized: 12345.0
                  allocatedAtMaxUtilizedPercentage: 12345.0
                  distributionUtilizedByImpalaDaemon: {}
                  distributionAllocatedByImpalaDaemon: {}
                  avgSpilledMemory: 12345.0
                  maxSpilledMemory: 12345.0
              errorMessage: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/metrics:
    get:
      tags:
      - "ServicesResource"
      summary: "Fetch metric readings for a particular service."
      description: "Fetch metric readings for a particular service.\n<p>\nBy default,\
        \ this call will look up all metrics available for the service.\nIf only specific\
        \ metrics are desired, use the <i>metrics</i> parameter.\n<p>\nBy default,\
        \ the returned results correspond to a 5 minute window based on\nthe provided\
        \ end time (which defaults to the current server time). The\n<i>from</i> and\
        \ <i>to</i> parameters can be used to control the window\nbeing queried. A\
        \ maximum window of 3 hours is enforced.\n<p>\nWhen requesting a \"full\"\
        \ view, aside from the extended properties of the\nreturned metric data, the\
        \ collection will also contain information about\nall metrics available for\
        \ the service, even if no readings are available\nin the requested window.\n\
        <p>\nHDFS services that have more than one nameservice will not expose\nany\
        \ metrics. Instead, the nameservices should be queried separately.\n<p/>"
      operationId: "getMetrics"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "from"
        in: "query"
        description: "Start of the period to query."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "metrics"
        in: "query"
        description: "Filter for which metrics to query."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Metrics"
      - name: "to"
        in: "query"
        description: "End of the period to query."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      - name: "view"
        in: "query"
        description: "The view of the data to materialize,\neither \"summary\" or\
          \ \"full\"."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiMetricList"
          examples:
            application/json:
              items:
              - name: "..."
                context: "..."
                unit: "..."
                data:
                - timestamp: "..."
                  value: 12345.0
                - timestamp: "..."
                  value: 12345.0
                displayName: "..."
                description: "..."
              - name: "..."
                context: "..."
                unit: "..."
                data:
                - timestamp: "..."
                  value: 12345.0
                - timestamp: "..."
                  value: 12345.0
                displayName: "..."
                description: "..."
          headers: {}
      deprecated: true
  /clusters/{clusterName}/services/{serviceName}/roleTypes:
    get:
      tags:
      - "ServicesResource"
      summary: "List the supported role types for a service."
      description: "List the supported role types for a service."
      operationId: "listRoleTypes"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service to modify."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiRoleTypeList"
          examples:
            application/json:
              items:
              - "..."
              - "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/yarnUtilization:
    get:
      tags:
      - "ServicesResource"
      summary: "Provides the resource utilization of the yarn service as well as the\n\
        resource utilization per tenant."
      description: "Provides the resource utilization of the yarn service as well\
        \ as the\nresource utilization per tenant. Only available with Cloudera Manager\
        \ Enterprise Edition."
      operationId: "getYarnUtilization"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "service name"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "daysOfWeek"
        in: "query"
        description: "The days of the week for which the user wants to report utilization.\n\
          Days is a list of number between 1 to 7, where 1 corresponds to Mon. and\
          \ 7 corresponds to Sun.\nAll 7 days are included if this is not specified."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "DaysOfWeek"
      - name: "endHourOfDay"
        in: "query"
        description: "The end hour of a day for which the user wants to report utilization.\n\
          The hour is a number between [0-23]. Default value is 23 if this is not\
          \ specified."
        required: false
        type: "integer"
        default: 23
        x-exportParamName: "EndHourOfDay"
        x-optionalDataType: "Int32"
      - name: "from"
        in: "query"
        description: "Start of the time range to report utilization in ISO 8601 format."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "startHourOfDay"
        in: "query"
        description: "The start hour of a day for which the user wants to report utilization.\n\
          The hour is a number between [0-23]. Default value is 0 if this is not specified."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "StartHourOfDay"
        x-optionalDataType: "Int32"
      - name: "tenantType"
        in: "query"
        description: "The type of the tenant (POOL or USER)."
        required: false
        type: "string"
        default: "POOL"
        x-exportParamName: "TenantType"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "End of the the time range to report utilization in ISO 8601\
          \ format (defaults to now)."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiYarnUtilization"
          examples:
            application/json:
              avgCpuUtilization: 12345.0
              maxCpuUtilization: 12345.0
              avgCpuDailyPeak: 12345.0
              maxCpuUtilizationTimestampMs: 12345
              avgCpuUtilizationPercentage: 12345.0
              maxCpuUtilizationPercentage: 12345.0
              avgCpuDailyPeakPercentage: 12345.0
              avgMemoryUtilization: 12345.0
              maxMemoryUtilization: 12345.0
              avgMemoryDailyPeak: 12345.0
              maxMemoryUtilizationTimestampMs: 12345
              avgMemoryUtilizationPercentage: 12345.0
              maxMemoryUtilizationPercentage: 12345.0
              avgMemoryDailyPeakPercentage: 12345.0
              tenantUtilizations:
                items:
                - tenantName: "..."
                  avgYarnCpuAllocation: 12345.0
                  avgYarnCpuUtilization: 12345.0
                  avgYarnCpuUnusedCapacity: 12345.0
                  avgYarnCpuSteadyFairShare: 12345.0
                  avgYarnPoolAllocatedCpuDuringContention: 12345.0
                  avgYarnPoolFairShareCpuDuringContention: 12345.0
                  avgYarnPoolSteadyFairShareCpuDuringContention: 12345.0
                  avgYarnContainerWaitRatio: 12345.0
                  avgYarnMemoryAllocation: 12345.0
                  avgYarnMemoryUtilization: 12345.0
                  avgYarnMemoryUnusedCapacity: 12345.0
                  avgYarnMemorySteadyFairShare: 12345.0
                  avgYarnPoolAllocatedMemoryDuringContention: 12345.0
                  avgYarnPoolFairShareMemoryDuringContention: 12345.0
                  avgYarnPoolSteadyFairShareMemoryDuringContention: 12345.0
                - tenantName: "..."
                  avgYarnCpuAllocation: 12345.0
                  avgYarnCpuUtilization: 12345.0
                  avgYarnCpuUnusedCapacity: 12345.0
                  avgYarnCpuSteadyFairShare: 12345.0
                  avgYarnPoolAllocatedCpuDuringContention: 12345.0
                  avgYarnPoolFairShareCpuDuringContention: 12345.0
                  avgYarnPoolSteadyFairShareCpuDuringContention: 12345.0
                  avgYarnContainerWaitRatio: 12345.0
                  avgYarnMemoryAllocation: 12345.0
                  avgYarnMemoryUtilization: 12345.0
                  avgYarnMemoryUnusedCapacity: 12345.0
                  avgYarnMemorySteadyFairShare: 12345.0
                  avgYarnPoolAllocatedMemoryDuringContention: 12345.0
                  avgYarnPoolFairShareMemoryDuringContention: 12345.0
                  avgYarnPoolSteadyFairShareMemoryDuringContention: 12345.0
              errorMessage: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/createOozieDb:
    post:
      tags:
      - "ServicesResource"
      summary: "Creates the Oozie Database Schema in the configured database."
      description: "Creates the Oozie Database Schema in the configured database.\n\
        This command does not create database. This command creates only tables\n\
        required by Oozie. To create database, please refer to oozieCreateEmbeddedDatabase()\n\
        \n<p>\nAvailable since API v2.\n</p>"
      operationId: "createOozieDb"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Oozie service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/createSolrHdfsHomeDir:
    post:
      tags:
      - "ServicesResource"
      summary: "Creates the home directory of a Solr service in HDFS."
      description: "Creates the home directory of a Solr service in HDFS.\n\n<p>\n\
        Available since API v4."
      operationId: "createSolrHdfsHomeDirCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Solr service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/createSqoopUserDir:
    post:
      tags:
      - "ServicesResource"
      summary: "Creates the user directory of a Sqoop service in HDFS."
      description: "Creates the user directory of a Sqoop service in HDFS.\n\n<p>\n\
        Available since API v4."
      operationId: "createSqoopUserDirCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Sqoop service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/decommission:
    post:
      tags:
      - "ServicesResource"
      summary: "Decommission roles of a service."
      description: "Decommission roles of a service.\n<p>\nFor HBase services, the\
        \ list should contain names of RegionServers to\ndecommission.\n<p>\nFor HDFS\
        \ services, the list should contain names of DataNodes to\ndecommission."
      operationId: "decommissionCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HBase service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "List of role names to decommision."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/deployClientConfig:
    post:
      tags:
      - "ServicesResource"
      summary: "Deploy a service's client configuration."
      description: "Deploy a service's client configuration.\n<p>\nThe client configuration\
        \ is deployed to the hosts where the given roles\nare running.\n<p/>\nAdded\
        \ in v3: passing null for the role name list will deploy client configs\n\
        to all known service roles.\nAdded in v6: passing an empty role name list\
        \ will deploy client configs\nto all known service roles.\n<p/>\nIn Cloudera\
        \ Manager 5.3 and newer, client configurations are fully managed,\nmeaning\
        \ that the server maintains state about which client configurations\nshould\
        \ exist and be managed by alternatives, and the agents actively\nrectify their\
        \ hosts with this state. Consequently, if this API call is made\nwith a specific\
        \ set of roles, Cloudera Manager will deactivate, from\nalternatives, any\
        \ deployed client configs from any non-gateway roles that\nare <em>not</em>\
        \ specified as arguments. Gateway roles are always preserved,\nand calling\
        \ this API with an empty or null argument continues to deploy to\nall roles.\n\
        <p/>"
      operationId: "deployClientConfigCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "List of role names."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/disableJtHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Disable high availability (HA) for JobTracker."
      description: "Disable high availability (HA) for JobTracker.\n\nAs part of disabling\
        \ HA, any services that depend on the MapReduce service\nbeing modified will\
        \ be stopped. The command arguments provide options to\nspecify name of JobTracker\
        \ that will be preserved. The Command will\nredeploy the client configurations\
        \ for services of the cluster after HA\nhas been disabled."
      operationId: "disableJtHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The MapReduce service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiDisableJtHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/disableRmHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Disable high availability (HA) for ResourceManager."
      description: "Disable high availability (HA) for ResourceManager.\n\nAs part\
        \ of disabling HA, any services that depend on the YARN service\nbeing modified\
        \ will be stopped. The command arguments provide options to\nspecify name\
        \ of ResourceManager that will be preserved. The command will\nredeploy the\
        \ client configurations for services of the cluster after HA\nhas been disabled."
      operationId: "disableRmHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The YARN service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiDisableRmHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/disableSentryHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Disable high availability (HA) for Sentry service."
      description: "Disable high availability (HA) for Sentry service.\n<p>\nThis\
        \ command only applies to CDH 5.13+ Sentry services.\n<p>\nThe command will\
        \ keep exactly one Sentry server, on the specified host,\nand update the ZooKeeper\
        \ configs needed for Sentry.\n<p>\nAll services that depend on HDFS will be\
        \ restarted after enabling Sentry HA.\n<p>\nNote: Sentry doesn't support Rolling\
        \ Restart."
      operationId: "disableSentryHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "A String representing the Sentry service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "An instance of ApiDisableSentryHaArgs\nrepresenting the arguments\
          \ to the command."
        required: false
        schema:
          $ref: "#/definitions/ApiDisableSentryHaArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/enableJtHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Enable high availability (HA) for a JobTracker."
      description: "Enable high availability (HA) for a JobTracker.\n<p>\nThis command\
        \ only applies to CDH4 MapReduce services.\n<p>\nThe command will create a\
        \ new JobTracker on the specified host and then\ncreate an active/standby\
        \ pair with the existing JobTracker. Autofailover\nwill be enabled using ZooKeeper.\
        \ A ZNode will be created for this purpose.\nCommand arguments provide option\
        \ to forcefully create this ZNode if one\nalready exists. A node may already\
        \ exists if JobTracker was previously\nenabled in HA mode but HA mode was\
        \ disabled later on. The ZNode is not\ndeleted when HA is disabled.\n<p>\n\
        As part of enabling HA, any services that depends on the MapReduce service\n\
        being modified will be stopped. Command will redeploy the client\nconfigurations\
        \ for services of the cluster after HA has been enabled."
      operationId: "enableJtHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The MapReduce service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiEnableJtHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/enableRmHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Enable high availability (HA) for a YARN ResourceManager."
      description: "Enable high availability (HA) for a YARN ResourceManager.\n<p>\n\
        This command only applies to CDH5+ YARN services.\n<p>\nThe command will create\
        \ a new ResourceManager on the specified host and then\ncreate an active/standby\
        \ pair with the existing ResourceManager. Autofailover\nwill be enabled using\
        \ ZooKeeper.\n<p>\nAs part of enabling HA, any services that depends on the\
        \ YARN service\nbeing modified will be stopped. Command will redeploy the\
        \ client\nconfigurations for services of the cluster after HA has been enabled."
      operationId: "enableRmHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The YARN service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiEnableRmHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/enableSentryHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Enable high availability (HA) for Sentry service."
      description: "Enable high availability (HA) for Sentry service.\n<p>\nThis command\
        \ only applies to CDH 5.13+ Sentry services.\n<p>\nThe command will create\
        \ a new Sentry server on the specified host\nand set the ZooKeeper configs\
        \ needed for Sentry HA.\n<p>\nAs part of enabling HA, all services that depend\
        \ on HDFS will be\nrestarted after enabling Sentry HA.\n<p>\nNote: Sentry\
        \ doesn't support Rolling Restart."
      operationId: "enableSentryHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "A String representing the Sentry service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "An instance of ApiEnableSentryHaArgs\nrepresenting the arguments\
          \ to the command."
        required: false
        schema:
          $ref: "#/definitions/ApiEnableSentryHaArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/enterMaintenanceMode:
    post:
      tags:
      - "ServicesResource"
      summary: "Put the service into maintenance mode."
      description: "Put the service into maintenance mode. This is a synchronous command.\
        \ The\nresult is known immediately upon return.\n\n<p>\nAvailable since API\
        \ v2.\n</p>"
      operationId: "enterMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/exitMaintenanceMode:
    post:
      tags:
      - "ServicesResource"
      summary: "Take the service out of maintenance mode."
      description: "Take the service out of maintenance mode. This is a synchronous\
        \ command.\nThe result is known immediately upon return.\n\n<p>\nAvailable\
        \ since API v2.\n</p>"
      operationId: "exitMaintenanceMode"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/firstRun:
    post:
      tags:
      - "ServicesResource"
      summary: "Prepare and start a service."
      description: "Prepare and start a service.\n\n<p>\nPerform all the steps needed\
        \ to prepare the service and start it.\n</p>\n\n<p>\nAvailable since API v7.\n\
        </p>"
      operationId: "firstRun"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the cluster."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hbaseCreateRoot:
    post:
      tags:
      - "ServicesResource"
      summary: "Creates the root directory of an HBase service."
      description: "Creates the root directory of an HBase service."
      operationId: "createHBaseRootCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HBase service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hbaseUpgrade:
    post:
      tags:
      - "ServicesResource"
      summary: "Upgrade HBase data in HDFS and ZooKeeper as part of upgrade from CDH4\
        \ to CDH5."
      description: "Upgrade HBase data in HDFS and ZooKeeper as part of upgrade from\
        \ CDH4 to CDH5.\n<p/>\nThis is required in order to run HBase after upgrade.\n\
        <p/>\nAvailable since API v6."
      operationId: "hbaseUpgradeCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HBase service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hdfsCreateTmpDir:
    post:
      tags:
      - "ServicesResource"
      summary: "Creates a tmp directory on the HDFS filesystem."
      description: "Creates a tmp directory on the HDFS filesystem.\n<p>\nAvailable\
        \ since API v2.\n</p>"
      operationId: "hdfsCreateTmpDir"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the HDFS service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hdfsDisableAutoFailover:
    post:
      tags:
      - "ServicesResource"
      summary: "Disable auto-failover for a highly available HDFS nameservice."
      description: "Disable auto-failover for a highly available HDFS nameservice.\n\
        <p>\nThe command will modify the nameservice's NameNodes configuration to\n\
        disable automatic failover, and delete the existing failover controllers.\n\
        <p>\nThe ZooKeeper dependency of the service will not be removed."
      operationId: "hdfsDisableAutoFailoverCommand"
      consumes:
      - "application/json"
      - "text/plain"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HDFS service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The nameservice name."
        required: false
        schema:
          type: "string"
          description: ""
        x-exportParamName: "Body"
        x-optionalDataType: "String"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
      deprecated: true
  /clusters/{clusterName}/services/{serviceName}/commands/hdfsDisableHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Disable high availability (HA) for an HDFS NameNode."
      description: "Disable high availability (HA) for an HDFS NameNode.\n<p>\nThe\
        \ NameNode to be kept must be running before HA can be disabled.\n<p>\nAs\
        \ part of disabling HA, any services that depend on the HDFS service being\n\
        modified will be stopped. The command arguments provide options to\nre-start\
        \ these services and to re-deploy the client configurations for\nservices\
        \ of the cluster after HA has been disabled."
      operationId: "hdfsDisableHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HDFS service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiHdfsDisableHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
      deprecated: true
  /clusters/{clusterName}/services/{serviceName}/commands/hdfsDisableNnHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Disable High Availability (HA) with Automatic Failover for an HDFS\
        \ NameNode."
      description: "Disable High Availability (HA) with Automatic Failover for an\
        \ HDFS NameNode.\n<p>\nAs part of disabling HA, any services that depend on\
        \ the HDFS service being\nmodified will be stopped. The command will delete\
        \ the Standby NameNode\nassociated with the specified NameNode. Any FailoverControllers\
        \ associated\nwith the NameNode's nameservice are also deleted. A SecondaryNameNode\n\
        is created on the host specified by the arugments.\n<p>\nIf no nameservices\
        \ uses Quorum Journal after HA is disabled for the specified\nnameservice,\
        \ then all JournalNodes are also deleted.\n<p>\nThen, HDFS service is restarted\
        \ and all services that were stopped\nare started again afterwards.\nFinally,\
        \ client configs for HDFS and its depedents will be re-deployed."
      operationId: "hdfsDisableNnHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HDFS service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiDisableNnHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hdfsEnableAutoFailover:
    post:
      tags:
      - "ServicesResource"
      summary: "Enable auto-failover for an HDFS nameservice."
      description: "Enable auto-failover for an HDFS nameservice.\n<p>\nThis command\
        \ requires that the nameservice exists, and HA has been\nconfigured for that\
        \ nameservice.\n<p>\nThe command will create the needed failover controllers,\
        \ perform the\nneeded initialization and configuration, and will start the\
        \ new roles.\nThe existing NameNodes which are part of the nameservice will\
        \ be\nre-started in the process.\n<p>\nThis process may require changing the\
        \ service's configuration, to add a\ndependency on the provided ZooKeeper\
        \ service. This will be done if such a\ndependency has not been configured\
        \ yet, and will cause roles that are\nnot affected by this command to show\
        \ an \"outdated configuration\" status.\n<p>\nIf a ZooKeeper dependency has\
        \ already been set up by some other means,\nit does not need to be provided\
        \ in the command arguments."
      operationId: "hdfsEnableAutoFailoverCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HDFS service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiHdfsFailoverArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
      deprecated: true
  /clusters/{clusterName}/services/{serviceName}/commands/hdfsEnableHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Enable high availability (HA) for an HDFS NameNode."
      description: "Enable high availability (HA) for an HDFS NameNode.\n<p>\nThe\
        \ command will set up the given \"active\" and \"stand-by\" NameNodes as\n\
        an HA pair. Both nodes need to already exist.\n<p>\nIf there is a SecondaryNameNode\
        \ associated with either given NameNode\ninstance, it will be deleted.\n<p>\n\
        Note that while the shared edits path may be different for both nodes,\nthey\
        \ need to point to the same underlying storage (e.g., an NFS share).\n<p>\n\
        As part of enabling HA, any services that depend on the HDFS service being\n\
        modified will be stopped. The command arguments provide options to\nre-start\
        \ these services and to re-deploy the client configurations for\nservices\
        \ of the cluster after HA has been enabled."
      operationId: "hdfsEnableHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HDFS service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiHdfsHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
      deprecated: true
  /clusters/{clusterName}/services/{serviceName}/commands/hdfsEnableNnHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Enable High Availability (HA) with Automatic Failover for an HDFS\
        \ NameNode."
      description: "Enable High Availability (HA) with Automatic Failover for an HDFS\
        \ NameNode.\n<p>\nThe command will create a Standby NameNode for the given\
        \ nameservice\nand create FailoverControllers for both Active and Standby\
        \ NameNodes.\nThe SecondaryNameNode associated with the Active NameNode will\
        \ be deleted.\n<p>\nThe command will also create JournalNodes needed for HDFS\
        \ HA if they\ndo not already exist.\n<p>\nAs part of enabling HA, any services\
        \ that depend on the HDFS service being\nmodified will be stopped. They will\
        \ be restarted after HA has been enabled.\nFinally, client configs for HDFS\
        \ and its depedents will be re-deployed."
      operationId: "hdfsEnableNnHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HDFS service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiEnableNnHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hdfsFailover:
    post:
      tags:
      - "ServicesResource"
      summary: "Initiate a failover in an HDFS HA NameNode pair."
      description: "Initiate a failover in an HDFS HA NameNode pair.\n<p>\nThe arguments\
        \ should contain the names of the two NameNodes in\nthe HA pair. The first\
        \ one should be the currently active NameNode,\nthe second one the NameNode\
        \ to be made active."
      operationId: "hdfsFailoverCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HDFS service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "force"
        in: "query"
        description: "Whether to force failover."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "Force"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "body"
        description: "Names of the NameNodes in the HA pair."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hdfsFinalizeRollingUpgrade:
    post:
      tags:
      - "ServicesResource"
      summary: "Finalizes the rolling upgrade for HDFS by updating the NameNode\n\
        metadata permanently to the next version."
      description: "Finalizes the rolling upgrade for HDFS by updating the NameNode\n\
        metadata permanently to the next version. Should be done after\ndoing a rolling\
        \ upgrade to a CDH version >= 5.2.0.\n<p>\nAvailable since API v8."
      operationId: "hdfsFinalizeRollingUpgrade"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HDFS service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hdfsRollEdits:
    post:
      tags:
      - "ServicesResource"
      summary: "Roll the edits of an HDFS NameNode or Nameservice."
      description: "Roll the edits of an HDFS NameNode or Nameservice.\n<p>\nAvailable\
        \ since API v3."
      operationId: "hdfsRollEditsCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HDFS service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments to the Roll Edits command."
        required: false
        schema:
          $ref: "#/definitions/ApiRollEditsArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hdfsUpgradeMetadata:
    post:
      tags:
      - "ServicesResource"
      summary: "Upgrade HDFS Metadata as part of a major version upgrade."
      description: "Upgrade HDFS Metadata as part of a major version upgrade.\n<p/>\n\
        When doing a major version upgrade for HDFS, it is necessary to start HDFS\n\
        in a special mode where it will do any necessary upgrades of stored\nmetadata.\
        \ Trying to start HDFS normally will result in an error message and\nthe NameNode(s)\
        \ failing to start.\n<p/>\nThe metadata upgrade must eventually be finalized,\
        \ using the\nhdfsFinalizeMetadataUpgrade command on the NameNode.\n<p/>\n\
        Available since API v6."
      operationId: "hdfsUpgradeMetadataCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HDFS service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hiveCreateHiveUserDir:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Hive user directory."
      description: "Create the Hive user directory\n<p>\nAvailable since API v4.\n\
        </p>"
      operationId: "createHiveUserDirCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Hive service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hiveCreateHiveWarehouse:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Hive warehouse directory, on Hive services."
      description: "Create the Hive warehouse directory, on Hive services.\n<p>\n\
        Available since API v3.\n</p>"
      operationId: "createHiveWarehouseCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Hive service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hiveCreateMetastoreDatabase:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Hive Metastore Database."
      description: "Create the Hive Metastore Database. Only works with embedded postgresql\n\
        database.\n<p>\nThis command is to be run whenever a new user and database\
        \ needs to be\ncreated in the embedded postgresql database for a Hive service.\
        \ This\ncommand should usually be followed by a call to\nhiveCreateMetastoreDatabaseTables.\n\
        <p>\nAvailable since API v4."
      operationId: "hiveCreateMetastoreDatabaseCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Hive service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hiveCreateMetastoreDatabaseTables:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Hive Metastore Database tables."
      description: "Create the Hive Metastore Database tables.\n<p>\nThis command\
        \ is to be run whenever a new database has been specified. Will\ndo nothing\
        \ if tables already exist. Will not perform an upgrade. Only\nAvailable when\
        \ all Hive Metastore Servers are stopped.\n<p>\nAvailable since API v3."
      operationId: "hiveCreateMetastoreDatabaseTablesCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Hive service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hiveUpdateMetastoreNamenodes:
    post:
      tags:
      - "ServicesResource"
      summary: "Update Hive Metastore to point to a NameNode's Nameservice name instead\
        \ of\nhostname."
      description: "Update Hive Metastore to point to a NameNode's Nameservice name\
        \ instead of\nhostname.\n<p>\n<strong>Back up the Hive Metastore Database\
        \ before running this command.</strong>\n<p>\nThis command is to be run after\
        \ enabling HDFS High Availability. Only\navailable when all Hive Metastore\
        \ Servers are stopped.\n<p>\nAvailable since API v4."
      operationId: "hiveUpdateMetastoreNamenodesCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Hive service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hiveUpgradeMetastore:
    post:
      tags:
      - "ServicesResource"
      summary: "Upgrade Hive Metastore as part of a major version upgrade."
      description: "Upgrade Hive Metastore as part of a major version upgrade.\n<p/>\n\
        When doing a major version upgrade for Hive, it is necessary to upgrade\n\
        data in the metastore database.\n<p/>\nAvailable since API v6."
      operationId: "hiveUpgradeMetastoreCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Hive service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hiveValidateMetastoreSchema:
    post:
      tags:
      - "ServicesResource"
      summary: "Validate the Hive Metastore Schema."
      description: "Validate the Hive Metastore Schema.\n<p>\nThis command checks\
        \ the Hive metastore schema for any errors and corruptions.\nThis command\
        \ is to be run on two instances:\n<li>After the Hive Metastore database tables\
        \ are created.</li>\n<li>Both before and after upgrading the Hive metastore\
        \ database schema./li>\n* <p>\nAvailable since API v17."
      operationId: "hiveValidateMetastoreSchemaCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Hive service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hueCreateHiveWarehouse:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Beeswax role's Hive warehouse directory, on Hue services."
      description: "Create the Beeswax role's Hive warehouse directory, on Hue services."
      operationId: "createBeeswaxWarehouseCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Hue service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
      deprecated: true
  /clusters/{clusterName}/services/{serviceName}/commands/hueDumpDb:
    post:
      tags:
      - "ServicesResource"
      summary: "Runs Hue's dumpdata command."
      description: "Runs Hue's dumpdata command.\n\nAvailable since API v10."
      operationId: "hueDumpDbCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hueLoadDb:
    post:
      tags:
      - "ServicesResource"
      summary: "Runs Hue's loaddata command."
      description: "Runs Hue's loaddata command.\n\nAvailable since API v10."
      operationId: "hueLoadDbCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/hueSyncDb:
    post:
      tags:
      - "ServicesResource"
      summary: "Runs Hue's syncdb command."
      description: "Runs Hue's syncdb command.\n\nAvailable since API v10."
      operationId: "hueSyncDbCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/impalaCreateCatalogDatabase:
    post:
      tags:
      - "ServicesResource"
      summary: "."
      description: "<strong>Not needed in CM 5.0.0 Release, since Impala Catalog Database\n\
        is not yet available in CDH as of this release.</strong>\nCreate the Impala\
        \ Catalog Database. Only works with embedded postgresql\ndatabase.\n<p>\n\
        This command is to be run whenever a new user and database needs to be\ncreated\
        \ in the embedded postgresql database for the Impala Catalog Server.\nThis\
        \ command should usually be followed by a call to\nimpalaCreateCatalogDatabaseTables.\n\
        <p>\nAvailable since API v6."
      operationId: "impalaCreateCatalogDatabaseCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Impala service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/impalaCreateCatalogDatabaseTables:
    post:
      tags:
      - "ServicesResource"
      summary: "."
      description: "<strong>Not needed in CM 5.0.0 Release, since Impala Catalog Database\n\
        is not yet available in CDH as of this release.</strong>\nCreate the Impala\
        \ Catalog Database tables.\n<p>\nThis command is to be run whenever a new\
        \ database has been specified. Will\ndo nothing if tables already exist. Will\
        \ not perform an upgrade. Only\navailable when all Impala Catalog Servers\
        \ are stopped.\n<p>\nAvailable since API v6."
      operationId: "impalaCreateCatalogDatabaseTablesCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Impala service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/impalaCreateUserDir:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Impala user directory."
      description: "Create the Impala user directory\n<p>\nAvailable since API v6.\n\
        </p>"
      operationId: "createImpalaUserDirCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Impala service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/impalaDisableLlamaHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Not Supported."
      description: "Not Supported. Llama was removed."
      operationId: "disableLlamaHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiDisableLlamaHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
      deprecated: true
  /clusters/{clusterName}/services/{serviceName}/commands/impalaDisableLlamaRm:
    post:
      tags:
      - "ServicesResource"
      summary: "Not Supported."
      description: "Not Supported. Llama was removed."
      operationId: "disableLlamaRmCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
      deprecated: true
  /clusters/{clusterName}/services/{serviceName}/commands/impalaEnableLlamaHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Not Supported."
      description: "Not Supported. Llama was removed."
      operationId: "enableLlamaHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiEnableLlamaHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
      deprecated: true
  /clusters/{clusterName}/services/{serviceName}/commands/impalaEnableLlamaRm:
    post:
      tags:
      - "ServicesResource"
      summary: "Not Supported."
      description: "Not Supported. Llama was removed."
      operationId: "enableLlamaRmCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiEnableLlamaRmArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
      deprecated: true
  /clusters/{clusterName}/services/{serviceName}/commands/importMrConfigsIntoYarn:
    post:
      tags:
      - "ServicesResource"
      summary: "Import MapReduce configuration into Yarn, overwriting Yarn configuration."
      description: "Import MapReduce configuration into Yarn, overwriting Yarn configuration.\n\
        <p>\nYou will lose existing Yarn configuration. Read all MapReduce\nconfiguration,\
        \ role assignments, and role configuration groups and update\nYarn with corresponding\
        \ values. MR1 configuration will be converted into\nthe equivalent MR2 configuration.\n\
        <p>\nBefore running this command, Yarn must be stopped and MapReduce must\
        \ exist\nwith valid configuration.\n<p>\nAvailable since API v6."
      operationId: "importMrConfigsIntoYarn"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Yarn service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/initSolr:
    post:
      tags:
      - "ServicesResource"
      summary: "Initializes the Solr service in Zookeeper."
      description: "Initializes the Solr service in Zookeeper.\n\n<p>\nAvailable since\
        \ API v4."
      operationId: "initSolrCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Solr service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/installMrFrameworkJars:
    post:
      tags:
      - "ServicesResource"
      summary: "Creates an HDFS directory to hold the MapReduce2 framework JARs\n\
        (if necessary), and uploads the framework JARs to it."
      description: "Creates an HDFS directory to hold the MapReduce2 framework JARs\n\
        (if necessary), and uploads the framework JARs to it.\n<p>\nThis command is\
        \ run automatically when starting a YARN service for\nthe first time, or when\
        \ upgrading an existing YARN service. It can\nalso be run manually to ensure\
        \ that the latest version of the framework\nJARS is installed.\n<p>\nAvailable\
        \ since API v30.\n<p>"
      operationId: "installMrFrameworkJars"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the YARN service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/installOozieShareLib:
    post:
      tags:
      - "ServicesResource"
      summary: "Creates directory for Oozie user in HDFS and installs the ShareLib\
        \ in it."
      description: "Creates directory for Oozie user in HDFS and installs the ShareLib\
        \ in it.\n<p/>\nThis command should be re-run after a major version upgrade\
        \ to refresh the\nShareLib to the latest version.\n<p/>\nAvailable since API\
        \ v3.\n<p/>"
      operationId: "installOozieShareLib"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Oozie service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/migrateToSentry:
    post:
      tags:
      - "ServicesResource"
      summary: "Migrates the HBase Indexer policy-based permissions to Sentry,\nby\
        \ invoking the SentryConfigToolIndexer."
      description: "Migrates the HBase Indexer policy-based permissions to Sentry,\n\
        by invoking the SentryConfigToolIndexer.\n<p>\nNote:\n<li>\n<ul>KeyStore Indexer\
        \ service should be in Stopped state.</ul>\n<ul>This is only needed for upgrading\
        \ to CDH6.0.</ul>\n<p>\nAvailable since API v30."
      operationId: "ksMigrateToSentry"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "A String representing the KeyStore Indexer service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/offline:
    post:
      tags:
      - "ServicesResource"
      summary: "Offline roles of a service."
      description: "Offline roles of a service.\n<p>\nCurrently the offline operation\
        \ is only supported by HDFS.\n<p>\nFor HDFS, the offline operation will put\
        \ DataNodes into <em>HDFS IN MAINTENANCE</em> state which\nprevents unnecessary\
        \ re-replication which could occur if decommissioned.\n<p>\nThe <em>timeout</em>\
        \ parameter is used to specify a timeout for offline. For HDFS, when the\n\
        timeout expires, the DataNode will automatically transition out of <em>HDFS\
        \ IN MAINTENANCE</em>\nstate, back to <em>HDFS IN SERVICE</em> state.\n<p>"
      operationId: "offlineCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "timeout"
        in: "query"
        description: "Offline timeout in seconds. Offlined roles will automatically\
          \ transition from offline\nstate to normal state after timeout.\nSpecify\
          \ as null to get the default timeout (4 hours)."
        required: false
        type: "number"
        x-exportParamName: "Timeout"
        x-optionalDataType: "Float32"
      - in: "body"
        name: "body"
        description: "List of role names to offline."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/oozieCreateEmbeddedDatabase:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Oozie Server Database."
      description: "Create the Oozie Server Database. Only works with embedded postgresql\n\
        database.\n<p>\nThis command is to be run whenever a new user and database\
        \ need to be\ncreated in the embedded postgresql database for an Oozie service.\
        \ This\ncommand should usually be followed by a call to createOozieDb.\n<p>\n\
        Available since API v10."
      operationId: "oozieCreateEmbeddedDatabaseCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Oozie service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/oozieDisableHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Disable high availability (HA) for Oozie."
      description: "Disable high availability (HA) for Oozie.\n\nAs part of disabling\
        \ HA, any services that depend on the Oozie service\nbeing modified will be\
        \ stopped. The command arguments provide options to\nspecify name of Oozie\
        \ Server that will be preserved. After deleting,\nother Oozie servers, all\
        \ the services that were stopped are restarted."
      operationId: "disableOozieHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Oozie service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiDisableOozieHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/oozieDumpDatabase:
    post:
      tags:
      - "ServicesResource"
      summary: "Dump the Oozie Server Database."
      description: "Dump the Oozie Server Database."
      operationId: "oozieDumpDatabaseCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/oozieEnableHa:
    post:
      tags:
      - "ServicesResource"
      summary: "Enable high availability (HA) for Oozie service."
      description: "Enable high availability (HA) for Oozie service.\n<p>\nThis command\
        \ only applies to CDH5+ Oozie services.\n<p>\nThe command will create new\
        \ Oozie Servers on the specified hosts and\nset the ZooKeeper and Load Balancer\
        \ configs needed for Oozie HA.\n<p>\nAs part of enabling HA, any services\
        \ that depends on the Oozie service\nbeing modified will be stopped and restarted\
        \ after enabling Oozie HA."
      operationId: "enableOozieHaCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Oozie service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments for the command."
        required: false
        schema:
          $ref: "#/definitions/ApiEnableOozieHaArguments"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/oozieLoadDatabase:
    post:
      tags:
      - "ServicesResource"
      summary: "Load the Oozie Server Database from dump."
      description: "Load the Oozie Server Database from dump."
      operationId: "oozieLoadDatabaseCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/oozieUpgradeDb:
    post:
      tags:
      - "ServicesResource"
      summary: "Upgrade Oozie Database schema as part of a major version upgrade."
      description: "Upgrade Oozie Database schema as part of a major version upgrade.\n\
        <p/>\nWhen doing a major version upgrade for Oozie, it is necessary to upgrade\n\
        the schema of its database before Oozie can run successfully.\n<p/>\nAvailable\
        \ since API v6."
      operationId: "oozieUpgradeDbCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Oozie service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/recommission:
    post:
      tags:
      - "ServicesResource"
      summary: "Recommission roles of a service."
      description: "Recommission roles of a service.\n<p>\nThe list should contain\
        \ names of slave roles to recommission.\n</p>\n\n<p>\nAvailable since API\
        \ v2.\n</p>"
      operationId: "recommissionCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "List of role names to recommision."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/recommissionWithStart:
    post:
      tags:
      - "ServicesResource"
      summary: "Start and recommission roles of a service."
      description: "Start and recommission roles of a service.\n<p>\nThe list should\
        \ contain names of slave roles to start and recommission.\n</p>\n\n<p>\nWarning:\
        \ Evolving. This method may change in the future and does not offer standard\
        \ compatibility guarantees.\nOnly support by HDFS.\nDo not use without guidance\
        \ from Cloudera.\n</p>\n\n<p>\nAvailable since API v15.\n</p>"
      operationId: "recommissionWithStartCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "List of role names to recommision."
        required: false
        schema:
          $ref: "#/definitions/ApiRoleNameList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/restart:
    post:
      tags:
      - "ServicesResource"
      summary: "Restart the service."
      description: "Restart the service."
      operationId: "restartCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service to start."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/rollingRestart:
    post:
      tags:
      - "ServicesResource"
      summary: "Command to run rolling restart of roles in a service."
      description: "Command to run rolling restart of roles in a service. The sequence\
        \ is:\n<ol>\n<li>Restart all the non-slave roles\n<li>If slaves are present\
        \ restart them in batches of size specified in RollingRestartCmdArgs\n<li>Perform\
        \ any post-command needed after rolling restart\n</ol>\n<p>\nAvailable since\
        \ API v3. Only available with Cloudera Manager Enterprise\nEdition."
      operationId: "rollingRestart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: ""
        required: false
        schema:
          $ref: "#/definitions/ApiRollingRestartArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/sentryCreateDatabase:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Sentry Server Database."
      description: "Create the Sentry Server Database. Only works with embedded postgresql\n\
        database.\n<p>\nThis command is to be run whenever a new user and database\
        \ need to be\ncreated in the embedded postgresql database for a Sentry service.\
        \ This\ncommand should usually be followed by a call to sentryCreateDatabaseTables.\n\
        <p>\nAvailable since API v7."
      operationId: "sentryCreateDatabaseCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Sentry service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/sentryCreateDatabaseTables:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Sentry Server Database tables."
      description: "Create the Sentry Server Database tables.\n<p>\nThis command is\
        \ to be run whenever a new database has been specified. Will\ndo nothing if\
        \ tables already exist. Will not perform an upgrade. Only\nAvailable when\
        \ Sentry Server is stopped.\n<p>\nAvailable since API v7."
      operationId: "sentryCreateDatabaseTablesCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Sentry service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/sentryUpgradeDatabaseTables:
    post:
      tags:
      - "ServicesResource"
      summary: "Upgrade the Sentry Server Database tables."
      description: "Upgrade the Sentry Server Database tables.\n<p>\nThis command\
        \ is to be run whenever Sentry requires an upgrade to its\ndatabase tables.\n\
        <p>\nAvailable since API v8."
      operationId: "sentryUpgradeDatabaseTablesCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Sentry service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/solrBootstrapCollections:
    post:
      tags:
      - "ServicesResource"
      summary: "Bootstraps Solr Collections after the CDH upgrade."
      description: "Bootstraps Solr Collections after the CDH upgrade.\n<p>\nNote:\
        \ This is only needed for upgrading to CDH6.0.\n<p>\nAvailable since API v30."
      operationId: "solrBootstrapCollectionsCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "A String representing the Solr service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/solrBootstrapConfig:
    post:
      tags:
      - "ServicesResource"
      summary: "Bootstraps Solr config during the CDH upgrade."
      description: "Bootstraps Solr config during the CDH upgrade.\n<p>\nNote: This\
        \ is only needed for upgrading to CDH6.0.\n<p>\nAvailable since API v30."
      operationId: "solrBootstrapConfigCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "A String representing the Solr service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/solrConfigBackup:
    post:
      tags:
      - "ServicesResource"
      summary: "Backs up Solr configuration metadata before CDH upgrade."
      description: "Backs up Solr configuration metadata before CDH upgrade.\n<p>\n\
        Note:\n<li>\n<ul>Solr service should be in Stopped state.</ul>\n<ul>HDFS and\
        \ Zookeeper services should in Running state.</ul>\n<ul>This is only needed\
        \ for upgrading to CDH6.0.</ul>\n</p>\nAvailable since API v30."
      operationId: "solrConfigBackupCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "A String representing the Solr service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/solrMigrateSentryPrivilegesCommand:
    post:
      tags:
      - "ServicesResource"
      summary: "Migrates Sentry privileges to new model compatible to support\nmore\
        \ granular permissions if Solr is configured with a\nSentry service."
      description: "Migrates Sentry privileges to new model compatible to support\n\
        more granular permissions if Solr is configured with a\nSentry service.\n\
        <p>\nNote:\n<li>\n<ul>Solr service should be in Stopped state.</ul>\n<ul>HDFS,\
        \ Zookeeper, and Sentry services should in Running state.</ul>\n<ul>This is\
        \ only needed for upgrading to CDH6.0.</ul>\n<p>\nAvailable since API v30."
      operationId: "solrMigrateSentryPrivilegesCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "A String representing the Solr service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/solrReinitializeStateForUpgrade:
    post:
      tags:
      - "ServicesResource"
      summary: "Reinitializes the Solr state by clearing the Solr HDFS\ndata directory,\
        \ the Solr data directory, and the Zookeeper\nstate."
      description: "Reinitializes the Solr state by clearing the Solr HDFS\ndata directory,\
        \ the Solr data directory, and the Zookeeper\nstate.\n<p>\nNote:\n<li>\n<ul>Solr\
        \ service should be in Stopped state.</ul>\n<ul>HDFS and Zookeeper services\
        \ should in Running state.</ul>\n<ul>This is only needed for upgrading to\
        \ CDH6.0.</ul>\n<p>\nAvailable since API v30."
      operationId: "solrReinitializeStateForUpgradeCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "A String representing the Solr service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/solrValidateMetadata:
    post:
      tags:
      - "ServicesResource"
      summary: "Validates Solr metadata and configurations."
      description: "Validates Solr metadata and configurations.\n<p>\nNote: This is\
        \ only needed for upgrading to CDH6.0.\n<p>\nAvailable since API v30."
      operationId: "solrValidateMetadataCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "A String representing the Solr service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/sqoopCreateDatabaseTables:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Sqoop2 Server Database tables."
      description: "Create the Sqoop2 Server Database tables.\n<p>\nThis command is\
        \ to be run whenever a new database has been specified. Will\ndo nothing if\
        \ tables already exist. Will not perform an upgrade. Only\navailable when\
        \ Sqoop2 Server is stopped.\n<p>\nAvailable since API v10."
      operationId: "sqoopCreateDatabaseTablesCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Sentry service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/sqoopUpgradeDb:
    post:
      tags:
      - "ServicesResource"
      summary: "Upgrade Sqoop Database schema as part of a major version upgrade."
      description: "Upgrade Sqoop Database schema as part of a major version upgrade.\n\
        <p/>\nWhen doing a major version upgrade for Sqoop, it is necessary to upgrade\n\
        the schema of its database before Sqoop can run successfully.\n<p/>\nAvailable\
        \ since API v6."
      operationId: "sqoopUpgradeDbCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The Sqoop service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/start:
    post:
      tags:
      - "ServicesResource"
      summary: "Start the service."
      description: "Start the service."
      operationId: "startCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service to start."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/stop:
    post:
      tags:
      - "ServicesResource"
      summary: "Stop the service."
      description: "Stop the service."
      operationId: "stopCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service to stop."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/switchToMr2:
    post:
      tags:
      - "ServicesResource"
      summary: "Change the cluster to use MR2 instead of MR1."
      description: "Change the cluster to use MR2 instead of MR1. Services will be\
        \ restarted.\n<p>\nWill perform the following steps:\n<ul>\n<li>Update all\
        \ services that depend on MapReduce to instead depend on Yarn.\n</li>\n<li>Stop\
        \ MapReduce</li>\n<li>Start Yarn (MR2 Included)</li>\n<li>Deploy Yarn (MR2)\
        \ Client Configuration</li>\n</ul>\n<p>\nAvailable since API v6."
      operationId: "switchToMr2"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the Yarn service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/yarnApplicationDiagnosticsCollection:
    post:
      tags:
      - "ServicesResource"
      summary: "Collect the Diagnostics data for Yarn applications."
      description: "Collect the Diagnostics data for Yarn applications\n<p>\nAvailable\
        \ since API v8."
      operationId: "collectYarnApplicationDiagnostics"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "Name of the YARN service on which to run the command."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Arguments used for collecting diagnostics data for Yarn applications"
        required: false
        schema:
          $ref: "#/definitions/ApiYarnApplicationDiagnosticsCollectionArgs"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/yarnCreateCmContainerUsageInputDirCommand:
    post:
      tags:
      - "ServicesResource"
      summary: "Creates the HDFS directory where YARN container usage metrics are\n\
        stored by NodeManagers for CM to read and aggregate into app usage metrics."
      description: "Creates the HDFS directory where YARN container usage metrics\
        \ are\nstored by NodeManagers for CM to read and aggregate into app usage\
        \ metrics.\n<p>\nAvailable since API v13.\n</p>"
      operationId: "createYarnCmContainerUsageInputDirCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The YARN service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/yarnCreateJobHistoryDirCommand:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Yarn job history directory."
      description: "Create the Yarn job history directory\n<p>\nAvailable since API\
        \ v6.\n</p>"
      operationId: "createYarnJobHistoryDirCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The YARN service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/yarnFormatStateStore:
    post:
      tags:
      - "ServicesResource"
      summary: "Formats the state store in ZooKeeper used for Resource Manager\nHigh\
        \ Availability."
      description: "Formats the state store in ZooKeeper used for Resource Manager\n\
        High Availability. Typically used while moving from non-secure\nto secure\
        \ cluster or vice-versa.\n<p>\nAvailable since API v8."
      operationId: "yarnFormatStateStore"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The YARN service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/yarnNodeManagerRemoteAppLogDirCommand:
    post:
      tags:
      - "ServicesResource"
      summary: "Create the Yarn NodeManager remote application log directory."
      description: "Create the Yarn NodeManager remote application log directory\n\
        <p>\nAvailable since API v6.\n</p>"
      operationId: "createYarnNodeManagerRemoteAppLogDirCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The YARN service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/zooKeeperCleanup:
    post:
      tags:
      - "ServicesResource"
      summary: "Clean up all running server instances of a ZooKeeper service."
      description: "Clean up all running server instances of a ZooKeeper service.\n\
        <p>\nThis command removes snapshots and transaction log files kept by\nZooKeeper\
        \ for backup purposes. Refer to the ZooKeeper documentation\nfor more details."
      operationId: "zooKeeperCleanupCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service to start."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/zooKeeperInit:
    post:
      tags:
      - "ServicesResource"
      summary: "Initializes all the server instances of a ZooKeeper service."
      description: "Initializes all the server instances of a ZooKeeper service.\n\
        <p>\nZooKeeper server roles need to be initialized before they\ncan be used."
      operationId: "zooKeeperInitCommand"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service to start."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/commands/{commandName}:
    post:
      tags:
      - "ServicesResource"
      summary: "Executes a command on the service specified\nby name."
      description: "Executes a command on the service specified\nby name.\n<p>\nAvailable\
        \ since API v6.\n</p>"
      operationId: "serviceCommandByName"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "commandName"
        in: "path"
        description: "The command name."
        required: true
        type: "string"
        x-exportParamName: "CommandName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiCommand"
          examples:
            application/json:
              id: 12345
              name: "..."
              startTime: "..."
              endTime: "..."
              active: true
              success: true
              resultMessage: "..."
              resultDataUrl: "..."
              clusterRef:
                clusterName: "..."
                displayName: "..."
              serviceRef:
                peerName: "..."
                clusterName: "..."
                serviceName: "..."
                serviceDisplayName: "..."
                serviceType: "..."
              roleRef:
                clusterName: "..."
                serviceName: "..."
                roleName: "..."
              hostRef:
                hostId: "..."
                hostname: "..."
              parent:
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent: {}
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              children:
                items:
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                - id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
              canRetry: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/reports/hdfsUsageReport:
    get:
      tags:
      - "ServicesResource"
      summary: "Fetch the HDFS usage report."
      description: "Fetch the HDFS usage report. For the requested time range, at\
        \ the\nspecified aggregation intervals, the report shows HDFS disk usages\n\
        per user.\n<p>\nThis call supports returning JSON or CSV, as determined by\
        \ the\n\"Accept\" header of application/json or text/csv.\n<p>\nAvailable\
        \ since API v4. Only available with Cloudera Manager Enterprise\nEdition."
      operationId: "getHdfsUsageReport"
      produces:
      - "application/json"
      - "text/csv"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The HDFS service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "aggregation"
        in: "query"
        description: "The (optional) aggregation period for the data.\nSupports \"\
          hourly\", \"daily\" (default) and \"weekly\"."
        required: false
        type: "string"
        default: "daily"
        enum:
        - "DAILY"
        - "HOURLY"
        - "WEEKLY"
        x-exportParamName: "Aggregation"
        x-optionalDataType: "String"
      - name: "from"
        in: "query"
        description: "The (optional) start time of the report in ISO 8601 format (\n\
          defaults to 24 hours before \"to\" time)."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "nameservice"
        in: "query"
        description: "The (optional) HDFS nameservice. Required for HA setup."
        required: false
        type: "string"
        x-exportParamName: "Nameservice"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "The (optional) end time of the report in ISO 8601 format (\n\
          defaults to now)."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiHdfsUsageReport"
          examples:
            application/json:
              lastUpdateTime: "..."
              items:
              - date: "..."
                user: "..."
                size: 12345
                rawSize: 12345
                numFiles: 12345
              - date: "..."
                user: "..."
                size: 12345
                rawSize: 12345
                numFiles: 12345
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/reports/mrUsageReport:
    get:
      tags:
      - "ServicesResource"
      summary: "Fetch the MR usage report."
      description: "Fetch the MR usage report. For the requested time range, at the\n\
        specified aggregation intervals, the report shows job CPU usages (and other\n\
        metrics) per user.\n<p>\nThis call supports returning JSON or CSV, as determined\
        \ by the\n\"Accept\" header of application/json or text/csv.\n<p>\nAvailable\
        \ since API v4. Only available with Cloudera Manager Enterprise\nEdition."
      operationId: "getMrUsageReport"
      produces:
      - "application/json"
      - "text/csv"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The MR service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "aggregation"
        in: "query"
        description: "The (optional) aggregation period for the data.\nSupports \"\
          hourly\", \"daily\" (default) and \"weekly\"."
        required: false
        type: "string"
        default: "daily"
        enum:
        - "DAILY"
        - "HOURLY"
        - "WEEKLY"
        x-exportParamName: "Aggregation"
        x-optionalDataType: "String"
      - name: "from"
        in: "query"
        description: "The (optional) start time of the report in ISO 8601 format\n\
          (defaults to 24 hours before \"to\" time)."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "The (optional) end time of the report in ISO 8601 format (defaults\n\
          to now)."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiMrUsageReport"
          examples:
            application/json:
              items:
              - timePeriod: "..."
                user: "..."
                group: "..."
                cpuSec: 12345
                memoryBytes: 12345
                jobCount: 12345
                taskCount: 12345
                durationSec: 12345
                failedMaps: 12345
                totalMaps: 12345
                failedReduces: 12345
                totalReduces: 12345
                mapInputBytes: 12345
                mapOutputBytes: 12345
                hdfsBytesRead: 12345
                hdfsBytesWritten: 12345
                localBytesRead: 12345
                localBytesWritten: 12345
                dataLocalMaps: 12345
                rackLocalMaps: 12345
              - timePeriod: "..."
                user: "..."
                group: "..."
                cpuSec: 12345
                memoryBytes: 12345
                jobCount: 12345
                taskCount: 12345
                durationSec: 12345
                failedMaps: 12345
                totalMaps: 12345
                failedReduces: 12345
                totalReduces: 12345
                mapInputBytes: 12345
                mapOutputBytes: 12345
                hdfsBytesRead: 12345
                hdfsBytesWritten: 12345
                localBytesRead: 12345
                localBytesWritten: 12345
                dataLocalMaps: 12345
                rackLocalMaps: 12345
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/snapshots/policies:
    get:
      tags:
      - "SnapshotsResource"
      summary: "Returns information for all snapshot policies."
      description: "Returns information for all snapshot policies."
      operationId: "readPolicies"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view to materialize."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiSnapshotPolicyList"
          examples:
            application/json:
              items:
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "REMOTE_S3"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
          headers: {}
    post:
      tags:
      - "SnapshotsResource"
      summary: "Creates one or more snapshot policies."
      description: "Creates one or more snapshot policies."
      operationId: "createPolicies"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "List of the snapshot policies to create."
        required: false
        schema:
          $ref: "#/definitions/ApiSnapshotPolicyList"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiSnapshotPolicyList"
          examples:
            application/json:
              items:
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "REMOTE_S3"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
              - name: "..."
                description: "..."
                hourlySnapshots: 12345
                dailySnapshots: 12345
                weeklySnapshots: 12345
                monthlySnapshots: 12345
                yearlySnapshots: 12345
                minuteOfHour: 12345
                hoursForHourlySnapshots:
                - 12345
                - 12345
                hourOfDay: 12345
                dayOfWeek: 12345
                dayOfMonth: 12345
                monthOfYear: 12345
                alertOnStart: true
                alertOnSuccess: true
                alertOnFail: true
                alertOnAbort: true
                hbaseArguments:
                  tableRegExps:
                  - "..."
                  - "..."
                  storage: "LOCAL"
                hdfsArguments:
                  pathPatterns:
                  - "..."
                  - "..."
                lastCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                lastSuccessfulCommand:
                  hbaseResult: {}
                  hdfsResult: {}
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                paused: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}:
    get:
      tags:
      - "SnapshotsResource"
      summary: "Returns information for a specific snapshot policy."
      description: "Returns information for a specific snapshot policy."
      operationId: "readPolicy"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "policyName"
        in: "path"
        description: "Name of an existing snapshot policy."
        required: true
        type: "string"
        x-exportParamName: "PolicyName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "view"
        in: "query"
        description: "The view to materialize."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiSnapshotPolicy"
          examples:
            application/json:
              name: "..."
              description: "..."
              hourlySnapshots: 12345
              dailySnapshots: 12345
              weeklySnapshots: 12345
              monthlySnapshots: 12345
              yearlySnapshots: 12345
              minuteOfHour: 12345
              hoursForHourlySnapshots:
              - 12345
              - 12345
              hourOfDay: 12345
              dayOfWeek: 12345
              dayOfMonth: 12345
              monthOfYear: 12345
              alertOnStart: true
              alertOnSuccess: true
              alertOnFail: true
              alertOnAbort: true
              hbaseArguments:
                tableRegExps:
                - "..."
                - "..."
                storage: "LOCAL"
              hdfsArguments:
                pathPatterns:
                - "..."
                - "..."
              lastCommand:
                hbaseResult:
                  processedTableCount: 12345
                  processedTables:
                  - "..."
                  - "..."
                  unprocessedTableCount: 12345
                  unprocessedTables:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                hdfsResult:
                  processedPathCount: 12345
                  processedPaths:
                  - "..."
                  - "..."
                  unprocessedPathCount: 12345
                  unprocessedPaths:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              lastSuccessfulCommand:
                hbaseResult:
                  processedTableCount: 12345
                  processedTables:
                  - "..."
                  - "..."
                  unprocessedTableCount: 12345
                  unprocessedTables:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                hdfsResult:
                  processedPathCount: 12345
                  processedPaths:
                  - "..."
                  - "..."
                  unprocessedPathCount: 12345
                  unprocessedPaths:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              paused: true
          headers: {}
    put:
      tags:
      - "SnapshotsResource"
      summary: "Updates an existing snapshot policy."
      description: "Updates an existing snapshot policy."
      operationId: "updatePolicy"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "policyName"
        in: "path"
        description: "Name of an existing snapshot policy."
        required: true
        type: "string"
        x-exportParamName: "PolicyName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "Modified policy."
        required: false
        schema:
          $ref: "#/definitions/ApiSnapshotPolicy"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiSnapshotPolicy"
          examples:
            application/json:
              name: "..."
              description: "..."
              hourlySnapshots: 12345
              dailySnapshots: 12345
              weeklySnapshots: 12345
              monthlySnapshots: 12345
              yearlySnapshots: 12345
              minuteOfHour: 12345
              hoursForHourlySnapshots:
              - 12345
              - 12345
              hourOfDay: 12345
              dayOfWeek: 12345
              dayOfMonth: 12345
              monthOfYear: 12345
              alertOnStart: true
              alertOnSuccess: true
              alertOnFail: true
              alertOnAbort: true
              hbaseArguments:
                tableRegExps:
                - "..."
                - "..."
                storage: "REMOTE_S3"
              hdfsArguments:
                pathPatterns:
                - "..."
                - "..."
              lastCommand:
                hbaseResult:
                  processedTableCount: 12345
                  processedTables:
                  - "..."
                  - "..."
                  unprocessedTableCount: 12345
                  unprocessedTables:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                hdfsResult:
                  processedPathCount: 12345
                  processedPaths:
                  - "..."
                  - "..."
                  unprocessedPathCount: 12345
                  unprocessedPaths:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              lastSuccessfulCommand:
                hbaseResult:
                  processedTableCount: 12345
                  processedTables:
                  - "..."
                  - "..."
                  unprocessedTableCount: 12345
                  unprocessedTables:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                hdfsResult:
                  processedPathCount: 12345
                  processedPaths:
                  - "..."
                  - "..."
                  unprocessedPathCount: 12345
                  unprocessedPaths:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              paused: true
          headers: {}
    delete:
      tags:
      - "SnapshotsResource"
      summary: "Deletes an existing snapshot policy."
      description: "Deletes an existing snapshot policy."
      operationId: "deletePolicy"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "policyName"
        in: "path"
        description: "Name of an existing snapshot policy."
        required: true
        type: "string"
        x-exportParamName: "PolicyName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiSnapshotPolicy"
          examples:
            application/json:
              name: "..."
              description: "..."
              hourlySnapshots: 12345
              dailySnapshots: 12345
              weeklySnapshots: 12345
              monthlySnapshots: 12345
              yearlySnapshots: 12345
              minuteOfHour: 12345
              hoursForHourlySnapshots:
              - 12345
              - 12345
              hourOfDay: 12345
              dayOfWeek: 12345
              dayOfMonth: 12345
              monthOfYear: 12345
              alertOnStart: true
              alertOnSuccess: true
              alertOnFail: true
              alertOnAbort: true
              hbaseArguments:
                tableRegExps:
                - "..."
                - "..."
                storage: "LOCAL"
              hdfsArguments:
                pathPatterns:
                - "..."
                - "..."
              lastCommand:
                hbaseResult:
                  processedTableCount: 12345
                  processedTables:
                  - "..."
                  - "..."
                  unprocessedTableCount: 12345
                  unprocessedTables:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                hdfsResult:
                  processedPathCount: 12345
                  processedPaths:
                  - "..."
                  - "..."
                  unprocessedPathCount: 12345
                  unprocessedPaths:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              lastSuccessfulCommand:
                hbaseResult:
                  processedTableCount: 12345
                  processedTables:
                  - "..."
                  - "..."
                  unprocessedTableCount: 12345
                  unprocessedTables:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                hdfsResult:
                  processedPathCount: 12345
                  processedPaths:
                  - "..."
                  - "..."
                  unprocessedPathCount: 12345
                  unprocessedPaths:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              paused: true
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}/history:
    get:
      tags:
      - "SnapshotsResource"
      summary: "Returns a list of commands triggered by a snapshot policy."
      description: "Returns a list of commands triggered by a snapshot policy."
      operationId: "readHistory"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "policyName"
        in: "path"
        description: "Name of an existing snapshot policy."
        required: true
        type: "string"
        x-exportParamName: "PolicyName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "limit"
        in: "query"
        description: "Maximum number of commands to retrieve."
        required: false
        type: "integer"
        default: 20
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "offset"
        in: "query"
        description: "Index of first command to retrieve."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "view"
        in: "query"
        description: "The view to materialize."
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiSnapshotCommandList"
          examples:
            application/json:
              items:
              - hbaseResult:
                  processedTableCount: 12345
                  processedTables:
                  - "..."
                  - "..."
                  unprocessedTableCount: 12345
                  unprocessedTables:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                hdfsResult:
                  processedPathCount: 12345
                  processedPaths:
                  - "..."
                  - "..."
                  unprocessedPathCount: 12345
                  unprocessedPaths:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
              - hbaseResult:
                  processedTableCount: 12345
                  processedTables:
                  - "..."
                  - "..."
                  unprocessedTableCount: 12345
                  unprocessedTables:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                hdfsResult:
                  processedPathCount: 12345
                  processedPaths:
                  - "..."
                  - "..."
                  unprocessedPathCount: 12345
                  unprocessedPaths:
                  - "..."
                  - "..."
                  createdSnapshotCount: 12345
                  createdSnapshots:
                  - {}
                  - {}
                  deletedSnapshotCount: 12345
                  deletedSnapshots:
                  - {}
                  - {}
                  creationErrorCount: 12345
                  creationErrors:
                  - {}
                  - {}
                  deletionErrorCount: 12345
                  deletionErrors:
                  - {}
                  - {}
                id: 12345
                name: "..."
                startTime: "..."
                endTime: "..."
                active: true
                success: true
                resultMessage: "..."
                resultDataUrl: "..."
                clusterRef:
                  clusterName: "..."
                  displayName: "..."
                serviceRef:
                  peerName: "..."
                  clusterName: "..."
                  serviceName: "..."
                  serviceDisplayName: "..."
                  serviceType: "..."
                roleRef:
                  clusterName: "..."
                  serviceName: "..."
                  roleName: "..."
                hostRef:
                  hostId: "..."
                  hostname: "..."
                parent:
                  id: 12345
                  name: "..."
                  startTime: "..."
                  endTime: "..."
                  active: true
                  success: true
                  resultMessage: "..."
                  resultDataUrl: "..."
                  clusterRef: {}
                  serviceRef: {}
                  roleRef: {}
                  hostRef: {}
                  parent: {}
                  children: {}
                  canRetry: true
                children:
                  items:
                  - {}
                  - {}
                canRetry: true
          headers: {}
  /timeseries:
    get:
      tags:
      - "TimeSeriesResource"
      summary: "Retrieve time-series data from the Cloudera Manager (CM) time-series\n\
        data store using a tsquery."
      description: "Retrieve time-series data from the Cloudera Manager (CM) time-series\n\
        data store using a tsquery.\n\nPlease see the\n<a href=\"http://tiny.cloudera.com/cm_tsquery\"\
        >\ntsquery language documentation</a>.\n<p/>\nAvailable since API v6."
      operationId: "queryTimeSeries"
      produces:
      - "application/json"
      parameters:
      - name: "contentType"
        in: "query"
        description: "to return the response in. The content types\n\"application/json\"\
          \ and \"text/csv\" are supported. This defaults to\n\"application/json\"\
          . If \"text/csv\" is specified then we return one row\nper time series data\
          \ point, and we don't return any of the metadata."
        required: false
        type: "string"
        default: "application/json"
        x-exportParamName: "ContentType"
        x-optionalDataType: "String"
      - name: "desiredRollup"
        in: "query"
        description: "Aggregate rollup level desired for the response data.\nValid\
          \ values are RAW, TEN_MINUTELY, HOURLY, SIX_HOURLY, DAILY, and WEEKLY.\n\
          Note that if the mustUseDesiredRollup parameter is not set, then the\nmonitoring\
          \ server can decide to return a different rollup level."
        required: false
        type: "string"
        default: "RAW"
        x-exportParamName: "DesiredRollup"
        x-optionalDataType: "String"
      - name: "from"
        in: "query"
        description: "Start of the period to query in ISO 8601 format (defaults to\
          \ 5\nminutes before the end of the period)."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "mustUseDesiredRollup"
        in: "query"
        description: "If set then the tsquery will return\ndata with the desired aggregate\
          \ rollup level."
        required: false
        type: "boolean"
        default: false
        x-exportParamName: "MustUseDesiredRollup"
        x-optionalDataType: "Bool"
      - name: "query"
        in: "query"
        description: "Tsquery to run against the CM time-series data store."
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "to"
        in: "query"
        description: "End of the period to query in ISO 8601 format (defaults to\n\
          current time)."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiTimeSeriesResponseList"
          examples:
            application/json:
              items:
              - timeSeries:
                - metadata: {}
                  data:
                  - {}
                  - {}
                - metadata: {}
                  data:
                  - {}
                  - {}
                warnings:
                - "..."
                - "..."
                timeSeriesQuery: "..."
              - timeSeries:
                - metadata: {}
                  data:
                  - {}
                  - {}
                - metadata: {}
                  data:
                  - {}
                  - {}
                warnings:
                - "..."
                - "..."
                timeSeriesQuery: "..."
          headers: {}
    post:
      tags:
      - "TimeSeriesResource"
      summary: "Retrieve time-series data from the Cloudera Manager (CM) time-series\n\
        data store accepting HTTP POST request."
      description: "Retrieve time-series data from the Cloudera Manager (CM) time-series\n\
        data store accepting HTTP POST request. This method differs\nfrom queryTimeSeries()\
        \ in v6 that this could accept query strings that are\nlonger than HTTP GET\
        \ request limit.\n\nAvailable since API v11."
      operationId: "queryTimeSeries"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request object containing information used when\nretrieving\
          \ timeseries data."
        required: false
        schema:
          $ref: "#/definitions/ApiTimeSeriesRequest"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiTimeSeriesResponseList"
          examples:
            application/json:
              items:
              - timeSeries:
                - metadata: {}
                  data:
                  - {}
                  - {}
                - metadata: {}
                  data:
                  - {}
                  - {}
                warnings:
                - "..."
                - "..."
                timeSeriesQuery: "..."
              - timeSeries:
                - metadata: {}
                  data:
                  - {}
                  - {}
                - metadata: {}
                  data:
                  - {}
                  - {}
                warnings:
                - "..."
                - "..."
                timeSeriesQuery: "..."
          headers: {}
  /timeseries/entityTypeAttributes:
    get:
      tags:
      - "TimeSeriesResource"
      summary: "Retrieve all metric entity type attributes monitored by Cloudera Manager."
      description: "Retrieve all metric entity type attributes monitored by Cloudera\
        \ Manager.\n<p/>\nAvailable since API v11."
      operationId: "getEntityTypeAttributes"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiTimeSeriesEntityAttributeList"
          examples:
            application/json:
              items:
              - name: "..."
                displayName: "..."
                description: "..."
                isValueCaseSensitive: true
              - name: "..."
                displayName: "..."
                description: "..."
                isValueCaseSensitive: true
          headers: {}
  /timeseries/entityTypes:
    get:
      tags:
      - "TimeSeriesResource"
      summary: "Retrieve all metric entity types monitored by Cloudera Manager."
      description: "Retrieve all metric entity types monitored by Cloudera Manager.\n\
        It is guaranteed that parent types appear before their children.\n<p/>\nAvailable\
        \ since API v11."
      operationId: "getEntityTypes"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiTimeSeriesEntityTypeList"
          examples:
            application/json:
              items:
              - name: "..."
                category: "..."
                nameForCrossEntityAggregateMetrics: "..."
                displayName: "..."
                description: "..."
                immutableAttributeNames:
                - "..."
                - "..."
                mutableAttributeNames:
                - "..."
                - "..."
                entityNameFormat:
                - "..."
                - "..."
                entityDisplayNameFormat: "..."
                parentMetricEntityTypeNames:
                - "..."
                - "..."
              - name: "..."
                category: "..."
                nameForCrossEntityAggregateMetrics: "..."
                displayName: "..."
                description: "..."
                immutableAttributeNames:
                - "..."
                - "..."
                mutableAttributeNames:
                - "..."
                - "..."
                entityNameFormat:
                - "..."
                - "..."
                entityDisplayNameFormat: "..."
                parentMetricEntityTypeNames:
                - "..."
                - "..."
          headers: {}
  /timeseries/schema:
    get:
      tags:
      - "TimeSeriesResource"
      summary: "Retrieve schema for all metrics."
      description: "Retrieve schema for all metrics\n<p/>\nThe schema is fixed for\
        \ a product version.\nThe schema may change for an API versions\n<p/>\nAvailable\
        \ since API v4."
      operationId: "getMetricSchema"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiMetricSchemaList"
          examples:
            application/json:
              items:
              - name: "..."
                displayName: "..."
                description: "..."
                isCounter: true
                unitNumerator: "..."
                unitDenominator: "..."
                aliases:
                - "..."
                - "..."
                sources:
                  property1:
                  - "..."
                  - "..."
                  property2:
                  - "..."
                  - "..."
              - name: "..."
                displayName: "..."
                description: "..."
                isCounter: true
                unitNumerator: "..."
                unitDenominator: "..."
                aliases:
                - "..."
                - "..."
                sources:
                  property1:
                  - "..."
                  - "..."
                  property2:
                  - "..."
                  - "..."
          headers: {}
  /tools/echo:
    get:
      tags:
      - "ToolsResource"
      summary: "Echoes the provided message back to the caller."
      description: "Echoes the provided message back to the caller."
      operationId: "echo"
      produces:
      - "application/json"
      parameters:
      - name: "message"
        in: "query"
        description: "The message to echo back"
        required: false
        type: "string"
        default: "Hello, World!"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiEcho"
          examples:
            application/json:
              message: "..."
          headers: {}
  /tools/echoError:
    get:
      tags:
      - "ToolsResource"
      summary: "Throws an error containing the given input message."
      description: "Throws an error containing the given input message. This is\n\
        what an error response looks like.\n\n<pre>\n   {\n     \"message\": \"An\
        \ error message\",\n     \"causes\": [ \"A list of causes\", \"Potentially\
        \ null\" ]\n   }\n </pre>\n\n<p>The <em>message</em> field contains a description\
        \ of the error.\nThe <em>causes</em> field, if not null, contains a list of\
        \ causes\nfor the error.\n</p>\n\n<p>Note that this <strong>never</strong>\
        \ returns an echoMessage.\nInstead, the result (and all error results) has\
        \ the above structure.\n</p>"
      operationId: "echoError"
      produces:
      - "application/json"
      parameters:
      - name: "message"
        in: "query"
        description: "The error message to echo"
        required: false
        type: "string"
        default: "Default error message"
        x-exportParamName: "Message"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiEcho"
          examples:
            application/json:
              message: "..."
          headers: {}
  /users:
    get:
      tags:
      - "UsersResource"
      summary: "Returns a list of the user names configured in the system."
      description: "Returns a list of the user names configured in the system."
      operationId: "readUsers2"
      produces:
      - "application/json"
      parameters:
      - name: "view"
        in: "query"
        description: ""
        required: false
        type: "string"
        default: "summary"
        enum:
        - "EXPORT"
        - "EXPORT_REDACTED"
        - "FULL"
        - "FULL_WITH_HEALTH_CHECK_EXPLANATION"
        - "SUMMARY"
        x-exportParamName: "View"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiUser2List"
          examples:
            application/json:
              items:
              - name: "..."
                password: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                pwHash: "..."
                pwSalt: 12345
                pwLogin: true
              - name: "..."
                password: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                pwHash: "..."
                pwSalt: 12345
                pwLogin: true
          headers: {}
    post:
      tags:
      - "UsersResource"
      summary: "Creates a list of users."
      description: "Creates a list of users.\n<p>\nWhen creating new users, the <i>password</i>\
        \ property of each user should\nbe their plain text password. The returned\
        \ user information will not\ncontain any password information.\n<p/>"
      operationId: "createUsers2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of users to create."
        required: false
        schema:
          $ref: "#/definitions/ApiUser2List"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiUser2List"
          examples:
            application/json:
              items:
              - name: "..."
                password: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                pwHash: "..."
                pwSalt: 12345
                pwLogin: true
              - name: "..."
                password: "..."
                authRoles:
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                - displayName: "..."
                  name: "..."
                  uuid: "..."
                pwHash: "..."
                pwSalt: 12345
                pwLogin: true
          headers: {}
  /users/sessions:
    get:
      tags:
      - "UsersResource"
      summary: "Return a list of the sessions associated with interactive authenticated\n\
        users in Cloudera Manager."
      description: "Return a list of the sessions associated with interactive authenticated\n\
        users in Cloudera Manager.\n<p>\nNote that these sessions are only associated\
        \ with users who log into the\nweb interface. API users will not appear."
      operationId: "getSessions"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiUserSessionList"
          examples:
            application/json:
              items:
              - name: "..."
                remoteAddr: "..."
                lastRequest: "..."
              - name: "..."
                remoteAddr: "..."
                lastRequest: "..."
          headers: {}
  /users/{userName}:
    get:
      tags:
      - "UsersResource"
      summary: "Returns detailed information about a user."
      description: "Returns detailed information about a user."
      operationId: "readUser2"
      produces:
      - "application/json"
      parameters:
      - name: "userName"
        in: "path"
        description: "The user to read."
        required: true
        type: "string"
        x-exportParamName: "UserName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiUser2"
          examples:
            application/json:
              name: "..."
              password: "..."
              authRoles:
              - displayName: "..."
                name: "..."
                uuid: "..."
              - displayName: "..."
                name: "..."
                uuid: "..."
              pwHash: "..."
              pwSalt: 12345
              pwLogin: true
          headers: {}
    put:
      tags:
      - "UsersResource"
      summary: "Updates the given user's information."
      description: "Updates the given user's information. Note that the user's name\
        \ cannot\nbe changed."
      operationId: "updateUser2"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userName"
        in: "path"
        description: "User name being updated."
        required: true
        type: "string"
        x-exportParamName: "UserName"
      - in: "body"
        name: "body"
        description: "The user information."
        required: false
        schema:
          $ref: "#/definitions/ApiUser2"
        x-exportParamName: "Body"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiUser2"
          examples:
            application/json:
              name: "..."
              password: "..."
              authRoles:
              - displayName: "..."
                name: "..."
                uuid: "..."
              - displayName: "..."
                name: "..."
                uuid: "..."
              pwHash: "..."
              pwSalt: 12345
              pwLogin: true
          headers: {}
    delete:
      tags:
      - "UsersResource"
      summary: "Deletes a user from the system."
      description: "Deletes a user from the system.\n<p/>"
      operationId: "deleteUser2"
      produces:
      - "application/json"
      parameters:
      - name: "userName"
        in: "path"
        description: "The name of the user to delete."
        required: true
        type: "string"
        x-exportParamName: "UserName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiUser2"
          examples:
            application/json:
              name: "..."
              password: "..."
              authRoles:
              - displayName: "..."
                name: "..."
                uuid: "..."
              - displayName: "..."
                name: "..."
                uuid: "..."
              pwHash: "..."
              pwSalt: 12345
              pwLogin: true
          headers: {}
  /users/expireSessions/{userName}:
    post:
      tags:
      - "UsersResource"
      summary: "Expires the sessions associated with interactive authenticated\nuser\
        \ in Cloudera Manager."
      description: "Expires the sessions associated with interactive authenticated\n\
        user in Cloudera Manager. This can be used by Full Admin/User Admin users\
        \ only.\n<p>\nNote that these sessions are only associated with a user who\
        \ log into the\nweb interface. Sessions of an API user will not be affected."
      operationId: "expireSessions"
      parameters:
      - name: "userName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "UserName"
      responses:
        201:
          description: "Success"
          examples: {}
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/watcheddir:
    get:
      tags:
      - "WatchedDirResource"
      summary: "Lists all the watched directories."
      description: "Lists all the watched directories.\n<p>\nAvailable since API v14.\
        \ Only available with Cloudera Manager Enterprise\nEdition.\n<p>"
      operationId: "listWatchedDirectories"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiWatchedDirList"
          examples:
            application/json:
              items:
              - path: "..."
              - path: "..."
          headers: {}
    post:
      tags:
      - "WatchedDirResource"
      summary: "Adds a directory to the watching list."
      description: "Adds a directory to the watching list.\n<p>\nAvailable since API\
        \ v14. Only available with Cloudera Manager Enterprise\nEdition.\n<p>"
      operationId: "addWatchedDirectory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - in: "body"
        name: "body"
        description: "The directory to be added."
        required: false
        schema:
          $ref: "#/definitions/ApiWatchedDir"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiWatchedDir"
          examples:
            application/json:
              path: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/watcheddir/{directoryPath}:
    delete:
      tags:
      - "WatchedDirResource"
      summary: "Removes a directory from the watching list."
      description: "Removes a directory from the watching list.\n<p>\nAvailable since\
        \ API v14. Only available with Cloudera Manager Enterprise\nEdition.\n<p>"
      operationId: "removeWatchedDirectory"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "directoryPath"
        in: "path"
        description: "The directory path to be removed."
        required: true
        type: "string"
        x-exportParamName: "DirectoryPath"
      - name: "serviceName"
        in: "path"
        description: "The service name."
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        204:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiWatchedDir"
          examples:
            application/json:
              path: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/yarnApplications:
    get:
      tags:
      - "YarnApplicationsResource"
      summary: "Returns a list of applications that satisfy the filter."
      description: "Returns a list of applications that satisfy the filter\n<p>\n\
        Available since API v6."
      operationId: "getYarnApplications"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      - name: "filter"
        in: "query"
        description: "A filter to apply to the applications. A basic filter tests\
          \ the\nvalue of an attribute and looks something like 'executing = true'\
          \ or\n'user = root'. Multiple basic filters can be combined into a complex\n\
          expression using standard and / or boolean logic and parenthesis.\nAn example\
          \ of a complex filter is: 'application_duration > 5s and (user = root or\n\
          user = myUserName')."
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "from"
        in: "query"
        description: "Start of the period to query in ISO 8601 format (defaults to\
          \ 5\nminutes before the 'to' time)."
        required: false
        type: "string"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of applications to return. Applications will\
          \ be\nreturned in the following order:\n<ul>\n<li> All executing applications,\
          \ ordered from longest to shortest running </li>\n<li> All completed applications\
          \ order by end time descending. </li>\n</ul>"
        required: false
        type: "integer"
        default: 100
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "offset"
        in: "query"
        description: "The offset to start returning applications from. This is useful\n\
          for paging through lists of applications. Note that this has non-deterministic\n\
          behavior if executing applications are included in the response because\
          \ they\ncan disappear from the list while paging. To exclude executing applications\n\
          from the response and a 'executing = false' clause to your filter."
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "to"
        in: "query"
        description: "End of the period to query in ISO 8601 format (defaults to now)."
        required: false
        type: "string"
        default: "now"
        x-exportParamName: "To"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiYarnApplicationResponse"
          examples:
            application/json:
              applications:
              - allocatedMB: 12345
                allocatedVCores: 12345
                runningContainers: 12345
                applicationTags:
                - "..."
                - "..."
                allocatedMemorySeconds: 12345
                allocatedVcoreSeconds: 12345
                applicationId: "..."
                name: "..."
                startTime: "..."
                endTime: "..."
                user: "..."
                pool: "..."
                progress: 12345.0
                attributes:
                  property1: "..."
                  property2: "..."
                mr2AppInformation:
                  jobState: "..."
                state: "..."
                containerUsedMemorySeconds: 12345.0
                containerUsedMemoryMax: 12345.0
                containerUsedCpuSeconds: 12345.0
                containerUsedVcoreSeconds: 12345.0
                containerAllocatedMemorySeconds: 12345.0
                containerAllocatedVcoreSeconds: 12345.0
              - allocatedMB: 12345
                allocatedVCores: 12345
                runningContainers: 12345
                applicationTags:
                - "..."
                - "..."
                allocatedMemorySeconds: 12345
                allocatedVcoreSeconds: 12345
                applicationId: "..."
                name: "..."
                startTime: "..."
                endTime: "..."
                user: "..."
                pool: "..."
                progress: 12345.0
                attributes:
                  property1: "..."
                  property2: "..."
                mr2AppInformation:
                  jobState: "..."
                state: "..."
                containerUsedMemorySeconds: 12345.0
                containerUsedMemoryMax: 12345.0
                containerUsedCpuSeconds: 12345.0
                containerUsedVcoreSeconds: 12345.0
                containerAllocatedMemorySeconds: 12345.0
                containerAllocatedVcoreSeconds: 12345.0
              warnings:
              - "..."
              - "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/yarnApplications/attributes:
    get:
      tags:
      - "YarnApplicationsResource"
      summary: "Returns the list of all attributes that the Service Monitor can associate\n\
        with YARN applications."
      description: "Returns the list of all attributes that the Service Monitor can\
        \ associate\nwith YARN applications.\n<p>\nExamples of attributes include\
        \ the user who ran the application and the\nnumber of maps completed by the\
        \ application.\n<p>\nThese attributes can be used to search for specific YARN\
        \ applications through\nthe getYarnApplications API. For example the 'user'\
        \ attribute could be used\nin the search 'user = root'. If the attribute is\
        \ numeric it can also be used\nas a metric in a tsquery (ie, 'select maps_completed\
        \ from YARN_APPLICATIONS').\n<p>\nNote that this response is identical for\
        \ all YARN services.\n<p>\nAvailable since API v6."
      operationId: "getYarnApplicationAttributes"
      produces:
      - "application/json"
      parameters:
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiYarnApplicationAttributeList"
          examples:
            application/json:
              items:
              - name: "..."
                type: "..."
                displayName: "..."
                supportsHistograms: true
                description: "..."
              - name: "..."
                type: "..."
                displayName: "..."
                supportsHistograms: true
                description: "..."
          headers: {}
  /clusters/{clusterName}/services/{serviceName}/yarnApplications/{applicationId}/kill:
    post:
      tags:
      - "YarnApplicationsResource"
      summary: "Kills an YARN Application."
      description: "Kills an YARN Application\n<p>\nAvailable since API v6."
      operationId: "killYarnApplication"
      produces:
      - "application/json"
      parameters:
      - name: "applicationId"
        in: "path"
        description: "The applicationId to kill"
        required: true
        type: "string"
        x-exportParamName: "ApplicationId"
      - name: "clusterName"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ClusterName"
      - name: "serviceName"
        in: "path"
        description: "The name of the service"
        required: true
        type: "string"
        x-exportParamName: "ServiceName"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiYarnKillResponse"
          examples:
            application/json:
              warning: "..."
          headers: {}
securityDefinitions:
  basic:
    type: "basic"
definitions:
  ApiActivity:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Activity name."
      type:
        description: "Activity type. Whether it's an MR job, a Pig job, a Hive query,\
          \ etc."
        $ref: "#/definitions/ApiActivityType"
      parent:
        type: "string"
        example: "null"
        description: "The name of the parent activity."
      startTime:
        type: "string"
        example: "null"
        description: "The start time of this activity."
      finishTime:
        type: "string"
        example: "null"
        description: "The finish time of this activity."
      id:
        type: "string"
        example: "null"
        description: "Activity id, which is unique within a MapReduce service."
      status:
        description: "Activity status."
        $ref: "#/definitions/ApiActivityStatus"
      user:
        type: "string"
        example: "null"
        description: "The user who submitted this activity."
      group:
        type: "string"
        example: "null"
        description: "The user-group of this activity."
      inputDir:
        type: "string"
        example: "null"
        description: "The input data directory of the activity. An HDFS url."
      outputDir:
        type: "string"
        example: "null"
        description: "The output result directory of the activity. An HDFS url."
      mapper:
        type: "string"
        example: "null"
        description: "The mapper class."
      combiner:
        type: "string"
        example: "null"
        description: "The combiner class."
      reducer:
        type: "string"
        example: "null"
        description: "The reducer class."
      queueName:
        type: "string"
        example: "null"
        description: "The scheduler queue this activity is in."
      schedulerPriority:
        type: "string"
        example: "null"
        description: "The scheduler priority of this activity."
    title: "ApiActivity"
    description: "Represents a user activity, such as a MapReduce job, a Hive query,\
      \ an Oozie\nworkflow, etc."
    example:
      name: "..."
      type: "MR"
      parent: "..."
      startTime: "..."
      finishTime: "..."
      id: "..."
      status: "SUSPENDED"
      user: "..."
      group: "..."
      inputDir: "..."
      outputDir: "..."
      mapper: "..."
      combiner: "..."
      reducer: "..."
      queueName: "..."
      schedulerPriority: "..."
  ApiActivityList:
    title: "ApiActivityList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiActivity"
    description: "A generic list."
  ApiActivityStatus:
    type: "string"
    title: "ApiActivityStatus"
    description: ""
    enum:
    - "UNKNOWN"
    - "SUBMITTED"
    - "STARTED"
    - "SUSPENDED"
    - "FAILED"
    - "KILLED"
    - "SUCCEEDED"
    - "ASSUMED_SUCCEEDED"
  ApiActivityType:
    type: "string"
    title: "ApiActivityType"
    description: ""
    enum:
    - "UNKNOWN"
    - "OOZIE"
    - "PIG"
    - "HIVE"
    - "MR"
    - "STREAMING"
  ApiAddCustomCertsArguments:
    type: "object"
    properties:
      location:
        type: "string"
        example: "/opt/cloudera/CMCA"
        description: "The location on disk to store the CMCA directory. If there is\
          \ already a CMCA created there,\nit will be backed up, and a new one will\
          \ be created in its place."
      interpretAsFilenames:
        type: "boolean"
        example: true
        description: "Whether the following arguments are interpreted as filenames\
          \ local to the Cloudera Manager\nhost (true, default) or as the actual data\
          \ for that argument:\n* hostCerts.hostCert\n* hostCerts.hostKey\n\nIf HTTPS\
          \ has not been enabled on the Cloudera Manager Admin Console and API, we\n\
          *strongly* recommend that you pass the arguments as filenames local to the\
          \ Cloudera Manager\nhost (i.e. set to true) to avoid leaking sensitive information\
          \ over the wire in plaintext."
      hostCerts:
        type: "array"
        description: "A list of HostCertInfo objects, which associate a hostname with\
          \ the corresponding\ncertificate and private key. Only used if customCA\
          \ == true."
        items:
          $ref: "#/definitions/ApiHostCertInfo"
    title: "ApiAddCustomCertsArguments"
    description: "Arguments to add custom certificates to the Auto-TLS certificate\
      \ database"
    example:
      location: "/opt/cloudera/CMCA"
      interpretAsFilenames: true
      hostCerts:
      - hostname: "..."
        certificate: "host-cert.pem"
        key: "host-key.pem"
      - hostname: "..."
        certificate: "..."
        key: "..."
  ApiAudit:
    type: "object"
    properties:
      timestamp:
        type: "string"
        example: "null"
        description: "When the audit event was captured."
      service:
        type: "string"
        example: "null"
        description: "Service name associated with this audit."
      username:
        type: "string"
        example: "null"
        description: "The user who performed this operation."
      impersonator:
        type: "string"
        example: "null"
        description: "The impersonating user (or the proxy user) who submitted this\
          \ operation.\nThis is usually applicable when using services like Oozie\
          \ or Hue, who\ncan be configured to impersonate other users and submit jobs."
      ipAddress:
        type: "string"
        example: "null"
        description: "The IP address that the client connected from."
      command:
        type: "string"
        example: "null"
        description: "The command/operation that was requested."
      resource:
        type: "string"
        example: "null"
        description: "The resource that the operation was performed on."
      operationText:
        type: "string"
        example: "null"
        description: "The full text of the requested operation. E.g. the full Hive\
          \ query.\n<p>\nAvailable since API v5."
      allowed:
        type: "boolean"
        description: "Whether the operation was allowed or denied by the authorization\
          \ system."
    title: "ApiAudit"
    description: "Models audit events from both CM and CM managed services like HDFS,\
      \ HBase\nand Hive. Audits for CM managed services are retrieved from Cloudera\
      \ Navigator\nserver."
    example:
      timestamp: "..."
      service: "..."
      username: "..."
      impersonator: "..."
      ipAddress: "..."
      command: "..."
      resource: "..."
      operationText: "..."
      allowed: true
  ApiAuditList:
    title: "ApiAuditList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiAudit"
    description: "A generic list."
  ApiAuthRole:
    type: "object"
    properties:
      displayName:
        type: "string"
        example: "null"
        description: ""
      name:
        type: "string"
        example: "null"
        description: ""
      clusters:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiClusterRef"
      users:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiUser2Ref"
      externalUserMappings:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiExternalUserMappingRef"
      baseRole:
        description: "A role this user possesses.\nIn Cloudera Enterprise Datahub\
          \ Edition, possible values are:\n<ul>\n<li><b>ROLE_ADMIN</b></li>\n<li><b>ROLE_USER</b></li>\n\
          <li><b>ROLE_LIMITED</b>: Added in Cloudera Manager 5.0</li>\n<li><b>ROLE_OPERATOR</b>:\
          \ Added in Cloudera Manager 5.1</li>\n<li><b>ROLE_CONFIGURATOR</b>: Added\
          \ in Cloudera Manager 5.1</li>\n<li><b>ROLE_CLUSTER_ADMIN</b>: Added in\
          \ Cloudera Manager 5.2</li>\n<li><b>ROLE_BDR_ADMIN</b>: Added in Cloudera\
          \ Manager 5.2</li>\n<li><b>ROLE_NAVIGATOR_ADMIN</b>: Added in Cloudera Manager\
          \ 5.2</li>\n<li><b>ROLE_USER_ADMIN</b>: Added in Cloudera Manager 5.2</li>\n\
          <li><b>ROLE_KEY_ADMIN</b>: Added in Cloudera Manager 5.5</li>\n</ul>\nAn\
          \ empty role implies ROLE_USER.\n<p>"
        $ref: "#/definitions/ApiAuthRoleRef"
      uuid:
        type: "string"
        example: "null"
        description: "Readonly. The UUID of the authRole.\n<p>"
      isCustom:
        type: "boolean"
        description: ""
    title: "ApiAuthRole"
    description: "This is the model for user role scope in the API since v18.\nThis\
      \ is used to support granular permissions."
    example:
      displayName: "..."
      name: "..."
      clusters:
      - clusterName: "..."
        displayName: "..."
      - clusterName: "..."
        displayName: "..."
      users:
      - name: "..."
      - name: "..."
      externalUserMappings:
      - uuid: "..."
        name: "..."
        type: "SAML_SCRIPT"
      - uuid: "..."
        name: "..."
        type: "LDAP"
      baseRole:
        displayName: "..."
        name: "..."
        uuid: "..."
      uuid: "..."
      isCustom: true
  ApiAuthRoleAuthority:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The name of the authority."
      description:
        type: "string"
        example: "null"
        description: "The description of the authority."
    title: "ApiAuthRoleAuthority"
    description: "This represents an authority with a name\nand description."
    example:
      name: "..."
      description: "..."
  ApiAuthRoleList:
    title: "ApiAuthRoleList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiAuthRole"
    description: "A list of auth roles."
  ApiAuthRoleMetadata:
    type: "object"
    properties:
      displayName:
        type: "string"
        example: "null"
        description: ""
      uuid:
        type: "string"
        example: "null"
        description: ""
      role:
        type: "string"
        example: "null"
        description: ""
      authorities:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiAuthRoleAuthority"
      allowedScopes:
        type: "array"
        example: "null"
        description: ""
        items:
          type: "string"
    title: "ApiAuthRoleMetadata"
    description: "This is the model for auth role metadata"
    example:
      displayName: "..."
      uuid: "..."
      role: "..."
      authorities:
      - name: "..."
        description: "..."
      - name: "..."
        description: "..."
      allowedScopes:
      - "..."
      - "..."
  ApiAuthRoleMetadataList:
    title: "ApiAuthRoleMetadataList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiAuthRoleMetadata"
    description: "A list of auth roles metadata."
  ApiAuthRoleRef:
    type: "object"
    properties:
      displayName:
        type: "string"
        example: "null"
        description: "The display name of the authRole.\ndisplayName is optional.\
          \ If a changed displayName is passed\nin, it will be ignored."
      name:
        type: "string"
        example: "null"
        description: "The name of the authRole.\nname is available from v32. It is\
          \ optional, and cannot be\nmodified. Name takes precedence over uuid. If\
          \ name is absent,\nuuid will be used for look up."
      uuid:
        type: "string"
        example: "null"
        description: "The uuid of the authRole, which uniquely identifies it in a\
          \ CM installation."
    title: "ApiAuthRoleRef"
    description: "An authRoleRef to operate on ApiAuthRole object"
    example:
      displayName: "..."
      name: "..."
      uuid: "..."
  ApiBatchRequest:
    title: "ApiBatchRequest"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiBatchRequestElement"
    description: "A batch request, comprised of one or more request elements."
  ApiBatchRequestElement:
    type: "object"
    properties:
      method:
        description: "The type of request (e.g. POST, GET, etc.)."
        $ref: "#/definitions/HTTPMethod"
      url:
        type: "string"
        example: "null"
        description: "The URL of the request. Must not have a scheme, host, or port.\
          \ The path\nshould be prefixed with \"/api/\", and should include path and\
          \ query\nparameters."
      body:
        type: "object"
        description: "Optional body of the request. Must be serialized in accordance\
          \ with\n#getContentType(). For application/json, use\ncom.cloudera.api.ApiObjectMapper."
        properties: {}
      contentType:
        type: "string"
        example: "null"
        description: "Content-Type header of the request element. If unset, the element\
          \ will be\ntreated as if the wildcard type had been specified unless it\
          \ has a body,\nin which case it will fall back to application/json."
      acceptType:
        type: "string"
        example: "null"
        description: "Accept header of the request element. The response body (if\
          \ it exists)\nwill be in this representation. If unset, the element will\
          \ be treated as\nif the wildcard type had been requested."
    title: "ApiBatchRequestElement"
    description: "A single element of a batch request, often part of a list with other\n\
      elements."
    example:
      method: "PUT"
      url: "..."
      body: {}
      contentType: "..."
      acceptType: "..."
  ApiBatchResponse:
    title: "ApiBatchResponse"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiBatchResponseElement"
        success:
          type: "boolean"
          description: "Read-only. True if every response element's\nApiBatchResponseElement#getStatusCode()\
            \ is in the range [200, 300),\nfalse otherwise."
    description: "A batch response, comprised of one or more response elements."
  ApiBatchResponseElement:
    type: "object"
    properties:
      statusCode:
        type: "number"
        description: "Read-only. The HTTP status code of the response."
      response:
        type: "object"
        description: "Read-only. The (optional) serialized body of the response, in\
          \ the\nrepresentation produced by the corresponding API endpoint, such as\n\
          application/json."
        properties: {}
    title: "ApiBatchResponseElement"
    description: "A single element of a batch response, often part of a list with\
      \ other\nelements."
    example:
      statusCode: 12345
      response: {}
  ApiBulkCommandList:
    title: "ApiBulkCommandList"
    allOf:
    - $ref: "#/definitions/ApiCommandList"
    - properties:
        errors:
          type: "array"
          example: "null"
          description: "Errors that occurred when issuing individual commands."
          items:
            type: "string"
    description: "A list of commands.\n<p>\nThis list is returned whenever commands\
      \ are issued in bulk, and contains a\nsecond list with information about errors\
      \ issuing specific commands."
  ApiCdhUpgradeArgs:
    type: "object"
    properties:
      cdhParcelVersion:
        type: "string"
        example: "null"
        description: "If using parcels, the full version of an already distributed\n\
          parcel for the next major CDH version. Default is null, which\nindicates\
          \ this is a package upgrade. Example versions are:\n'5.0.0-1.cdh5.0.0.p0.11'\
          \ or '5.0.2-1.cdh5.0.2.p0.32'"
      cdhPackageVersion:
        type: "string"
        example: "null"
        description: "If using packages, the full version of the CDH packages being\
          \ upgraded to,\nsuch as \"5.1.2\". These packages must already be installed\
          \ on the cluster\nbefore running the upgrade command. For backwards compatibility,\
          \ if\n\"5.0.0\" is specified here, then the upgrade command will relax validation\n\
          of installed packages to match v6 behavior, only checking major version.\n\
          <p>\nIntroduced in v9. Has no effect in older API versions, which assume\n\
          \"5.0.0\""
      rollingRestartArgs:
        description: "If provided and rolling restart is available, will perform\n\
          rolling restart with the requested arguments. If provided and\nrolling restart\
          \ is not available, errors. If omitted, will do a\nregular restart.\n<p>\n\
          Introduced in v9. Has no effect in older API versions, which must\nalways\
          \ do a hard restart."
        $ref: "#/definitions/ApiRollingUpgradeClusterArgs"
      deployClientConfig:
        type: "boolean"
        description: "Not used starting in v9 - Client config is always deployed as\
          \ part of\nupgrade. For older versions, determines whether client configuration\n\
          should be deployed as part of upgrade. Default is true."
      startAllServices:
        type: "boolean"
        description: "Not used starting in v9 - All servies are always started as\
          \ part of\nupgrade. For older versions, determines whether all services\
          \ should be\nstarted should be deployed as part of upgrade. Default is true."
    title: "ApiCdhUpgradeArgs"
    description: "Arguments used for the CDH Upgrade command."
    example:
      cdhParcelVersion: "..."
      cdhPackageVersion: "..."
      rollingRestartArgs:
        slaveBatchSize: 12345
        sleepSeconds: 12345
        slaveFailCountThreshold: 12345
  ApiCluster:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The name of the cluster.\n<p>\nImmutable since API v6.\n<p>\n\
          Prior to API v6, will contain the display name of the cluster."
      displayName:
        type: "string"
        example: "null"
        description: "The display name of the cluster that is shown in the UI.\n<p>\n\
          Available since API v6."
      version:
        description: "The CDH version of the cluster."
        $ref: "#/definitions/ApiClusterVersion"
      fullVersion:
        type: "string"
        example: "null"
        description: "The full CDH version of the cluster. The expected format is\
          \ three dot\nseparated version numbers, e.g. \"4.2.1\" or \"5.0.0\". The\
          \ full version takes\nprecedence over the version field during cluster creation.\n\
          <p>\nAvailable since API v6."
      maintenanceMode:
        type: "boolean"
        description: "Readonly. Whether the cluster is in maintenance mode.\nAvailable\
          \ since API v2."
      maintenanceOwners:
        type: "array"
        example: "null"
        description: "Readonly. The list of objects that trigger this cluster to be\
          \ in\nmaintenance mode.\nAvailable since API v2."
        items:
          $ref: "#/definitions/ApiEntityType"
      services:
        type: "array"
        description: "Optional. Used during import/export of settings."
        items:
          $ref: "#/definitions/ApiService"
      parcels:
        type: "array"
        description: "Optional. Used during import/export of settings.\nAvailable\
          \ since API v4."
        items:
          $ref: "#/definitions/ApiParcel"
      clusterUrl:
        type: "string"
        example: "null"
        description: "Readonly. Link into the Cloudera Manager web UI for this specific\
          \ cluster.\n<p>\nAvailable since API v10."
      hostsUrl:
        type: "string"
        example: "null"
        description: "Readonly. Link into the Cloudera Manager web UI for host table\
          \ for this cluster.\n<p>\nAvailable since API v11."
      entityStatus:
        description: "Readonly. The entity status for this cluster.\nAvailable since\
          \ API v11."
        $ref: "#/definitions/ApiEntityStatus"
      uuid:
        type: "string"
        example: "null"
        description: "Readonly. The UUID of the cluster.\n<p>\nAvailable since API\
          \ v15."
      dataContextRefs:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiDataContextRef"
      clusterType:
        type: "string"
        example: "null"
        description: "Readonly. The type of cluster.\nAvailable since APIv32."
    title: "ApiCluster"
    description: "A cluster represents a set of interdependent services running on\
      \ a set\nof hosts. All services on a given cluster are of the same software\
      \ version\n(e.g. CDH4 or CDH5)."
    example:
      name: "..."
      displayName: "..."
      fullVersion: "..."
      maintenanceMode: true
      maintenanceOwners:
      - "HOST"
      - "CLUSTER"
      services:
      - name: "..."
        type: "..."
        clusterRef:
          clusterName: "..."
          displayName: "..."
        serviceState: "STARTED"
        healthSummary: "GOOD"
        configStalenessStatus: "STALE_REFRESHABLE"
        clientConfigStalenessStatus: "STALE"
        healthChecks:
        - name: "..."
          summary: "NOT_AVAILABLE"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "BAD"
          explanation: "..."
          suppressed: true
        serviceUrl: "..."
        roleInstancesUrl: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "SERVICE"
        - "SERVICE"
        config:
          roleTypeConfigs:
          - {}
          - {}
          items:
          - {}
          - {}
        roles:
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "UNKNOWN"
          commissionState: "DECOMMISSIONING"
          healthSummary: "CONCERNING"
          configStalenessStatus: "FRESH"
          healthChecks:
          - {}
          - {}
          haStatus: "UNKNOWN"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "SERVICE"
          - "CLUSTER"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "STANDALONE"
          entityStatus: "NONE"
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "NA"
          commissionState: "COMMISSIONED"
          healthSummary: "HISTORY_NOT_AVAILABLE"
          configStalenessStatus: "STALE"
          healthChecks:
          - {}
          - {}
          haStatus: "STANDBY"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "SERVICE"
          - "SERVICE"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
          entityStatus: "GOOD_HEALTH"
        displayName: "..."
        roleConfigGroups:
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        replicationSchedules:
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "MONTH"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "YEAR"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        snapshotPolicies:
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        entityStatus: "HISTORY_NOT_AVAILABLE"
      - name: "..."
        type: "..."
        clusterRef:
          clusterName: "..."
          displayName: "..."
        serviceState: "HISTORY_NOT_AVAILABLE"
        healthSummary: "CONCERNING"
        configStalenessStatus: "STALE_REFRESHABLE"
        clientConfigStalenessStatus: "STALE_REFRESHABLE"
        healthChecks:
        - name: "..."
          summary: "BAD"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "NOT_AVAILABLE"
          explanation: "..."
          suppressed: true
        serviceUrl: "..."
        roleInstancesUrl: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "ROLE"
        - "ROLE"
        config:
          roleTypeConfigs:
          - {}
          - {}
          items:
          - {}
          - {}
        roles:
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "STOPPING"
          commissionState: "DECOMMISSIONING"
          healthSummary: "NOT_AVAILABLE"
          configStalenessStatus: "FRESH"
          healthChecks:
          - {}
          - {}
          haStatus: "ACTIVE"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "CLUSTER"
          - "SERVICE"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "UNKNOWN"
          entityStatus: "DOWN"
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "HISTORY_NOT_AVAILABLE"
          commissionState: "UNKNOWN"
          healthSummary: "BAD"
          configStalenessStatus: "FRESH"
          healthChecks:
          - {}
          - {}
          haStatus: "STANDBY"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "CLUSTER"
          - "ROLE"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "REPLICATED_FOLLOWER"
          entityStatus: "DISABLED_HEALTH"
        displayName: "..."
        roleConfigGroups:
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        replicationSchedules:
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "YEAR"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "WEEK"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        snapshotPolicies:
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        entityStatus: "HISTORY_NOT_AVAILABLE"
      parcels:
      - product: "..."
        version: "..."
        stage: "..."
        state:
          progress: 12345
          totalProgress: 12345
          count: 12345
          totalCount: 12345
          errors:
          - "..."
          - "..."
          warnings:
          - "..."
          - "..."
        clusterRef:
          clusterName: "..."
          displayName: "..."
      - product: "..."
        version: "..."
        stage: "..."
        state:
          progress: 12345
          totalProgress: 12345
          count: 12345
          totalCount: 12345
          errors:
          - "..."
          - "..."
          warnings:
          - "..."
          - "..."
        clusterRef:
          clusterName: "..."
          displayName: "..."
      clusterUrl: "..."
      hostsUrl: "..."
      entityStatus: "DOWN"
      uuid: "..."
      dataContextRefs:
      - name: "..."
      - name: "..."
      clusterType: "..."
  ApiClusterList:
    title: "ApiClusterList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiCluster"
    description: "A list of clusters."
  ApiClusterNameList:
    title: "ApiClusterNameList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          example: "null"
          description: ""
          items:
            type: "string"
    description: "A list of cluster names."
  ApiClusterPerfInspectorArgs:
    type: "object"
    properties:
      pingArgs:
        description: "Optional ping request arguments.\nIf not specified, default\
          \ arguments will be used for ping test."
        $ref: "#/definitions/ApiPerfInspectorPingArgs"
    title: "ApiClusterPerfInspectorArgs"
    description: "Arguments used for the Cluster Performance Inspector"
    example:
      pingArgs:
        pingTimeoutSecs: 10
        pingCount: 10
        pingPacketSizeBytes: 56
  ApiClusterRef:
    type: "object"
    properties:
      clusterName:
        type: "string"
        example: "null"
        description: "The name of the cluster, which uniquely identifies it in a CM\
          \ installation."
      displayName:
        type: "string"
        example: "null"
        description: "The display name of the cluster. This is available from v30."
    title: "ApiClusterRef"
    description: "A clusterRef references a cluster. To operate on the cluster object,\n\
      use the cluster API with the clusterName as the parameter."
    example:
      clusterName: "..."
      displayName: "..."
  ApiClusterTemplate:
    type: "object"
    properties:
      cdhVersion:
        type: "string"
        example: "null"
        description: ""
      products:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiProductVersion"
      services:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiClusterTemplateService"
      hostTemplates:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiClusterTemplateHostTemplate"
      displayName:
        type: "string"
        example: "null"
        description: ""
      cmVersion:
        type: "string"
        example: "null"
        description: ""
      instantiator:
        description: ""
        $ref: "#/definitions/ApiClusterTemplateInstantiator"
      repositories:
        type: "array"
        example: "null"
        description: ""
        items:
          type: "string"
      clusterSpec:
        description: ""
        $ref: "#/definitions/ApiClusterTemplateClusterSpec"
    title: "ApiClusterTemplate"
    description: "Details of cluster template"
    example:
      cdhVersion: "..."
      products:
      - version: "..."
        product: "..."
      - version: "..."
        product: "..."
      services:
      - refName: "..."
        serviceType: "..."
        serviceConfigs:
        - name: "..."
          value: "..."
          ref: "..."
          variable: "..."
          autoConfig: true
        - name: "..."
          value: "..."
          ref: "..."
          variable: "..."
          autoConfig: true
        roleConfigGroups:
        - refName: "..."
          roleType: "..."
          base: true
          displayName: "..."
          configs:
          - {}
          - {}
        - refName: "..."
          roleType: "..."
          base: true
          displayName: "..."
          configs:
          - {}
          - {}
        roles:
        - refName: "..."
          roleType: "..."
        - refName: "..."
          roleType: "..."
        displayName: "..."
      - refName: "..."
        serviceType: "..."
        serviceConfigs:
        - name: "..."
          value: "..."
          ref: "..."
          variable: "..."
          autoConfig: true
        - name: "..."
          value: "..."
          ref: "..."
          variable: "..."
          autoConfig: true
        roleConfigGroups:
        - refName: "..."
          roleType: "..."
          base: true
          displayName: "..."
          configs:
          - {}
          - {}
        - refName: "..."
          roleType: "..."
          base: true
          displayName: "..."
          configs:
          - {}
          - {}
        roles:
        - refName: "..."
          roleType: "..."
        - refName: "..."
          roleType: "..."
        displayName: "..."
      hostTemplates:
      - refName: "..."
        roleConfigGroupsRefNames:
        - "..."
        - "..."
        cardinality: 12345
      - refName: "..."
        roleConfigGroupsRefNames:
        - "..."
        - "..."
        cardinality: 12345
      displayName: "..."
      cmVersion: "..."
      instantiator:
        clusterName: "..."
        hosts:
        - hostName: "..."
          hostNameRange: "..."
          rackId: "..."
          hostTemplateRefName: "..."
          roleRefNames:
          - "..."
          - "..."
        - hostName: "..."
          hostNameRange: "..."
          rackId: "..."
          hostTemplateRefName: "..."
          roleRefNames:
          - "..."
          - "..."
        variables:
        - name: "..."
          value: "..."
        - name: "..."
          value: "..."
        roleConfigGroups:
        - rcgRefName: "..."
          name: "..."
        - rcgRefName: "..."
          name: "..."
        clusterSpec:
          dataContextRefs:
          - {}
          - {}
      repositories:
      - "..."
      - "..."
      clusterSpec:
        dataContextRefs:
        - name: "..."
        - name: "..."
  ApiClusterTemplateClusterSpec:
    type: "object"
    properties:
      dataContextRefs:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiDataContextRef"
    title: "ApiClusterTemplateClusterSpec"
    description: "Specify type of cluster to create. If one or more ApiDataContextRef\
      \ are specified, the created cluster\nupon import will be a cluster with clusterType\
      \ \"COMPUTE\"."
    example:
      dataContextRefs:
      - name: "..."
      - name: "..."
  ApiClusterTemplateConfig:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: ""
      value:
        type: "string"
        example: "null"
        description: ""
      ref:
        type: "string"
        example: "null"
        description: ""
      variable:
        type: "string"
        example: "null"
        description: ""
      autoConfig:
        type: "boolean"
        description: ""
    title: "ApiClusterTemplateConfig"
    description: "Config Details: The config can either have a value or ref or variable."
    example:
      name: "..."
      value: "..."
      ref: "..."
      variable: "..."
      autoConfig: true
  ApiClusterTemplateHostInfo:
    type: "object"
    properties:
      hostName:
        type: "string"
        example: "null"
        description: ""
      hostNameRange:
        type: "string"
        example: "null"
        description: ""
      rackId:
        type: "string"
        example: "null"
        description: ""
      hostTemplateRefName:
        type: "string"
        example: "null"
        description: ""
      roleRefNames:
        type: "array"
        example: "null"
        description: ""
        items:
          type: "string"
    title: "ApiClusterTemplateHostInfo"
    description: "This contains information about the host or host range on which\
      \ provided\nhost template will be applied."
    example:
      hostName: "..."
      hostNameRange: "..."
      rackId: "..."
      hostTemplateRefName: "..."
      roleRefNames:
      - "..."
      - "..."
  ApiClusterTemplateHostTemplate:
    type: "object"
    properties:
      refName:
        type: "string"
        example: "null"
        description: ""
      roleConfigGroupsRefNames:
        type: "array"
        example: "null"
        description: ""
        items:
          type: "string"
      cardinality:
        type: "number"
        description: ""
    title: "ApiClusterTemplateHostTemplate"
    description: "Host templates will contain information about the role config groups\
      \ that\nshould be applied to a host. This basically means a host will have a\
      \ role\ncorresponding to each config group."
    example:
      refName: "..."
      roleConfigGroupsRefNames:
      - "..."
      - "..."
      cardinality: 12345
  ApiClusterTemplateInstantiator:
    type: "object"
    properties:
      clusterName:
        type: "string"
        example: "null"
        description: ""
      hosts:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiClusterTemplateHostInfo"
      variables:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiClusterTemplateVariable"
      roleConfigGroups:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiClusterTemplateRoleConfigGroupInfo"
      clusterSpec:
        description: ""
        $ref: "#/definitions/ApiClusterTemplateClusterSpec"
    title: "ApiClusterTemplateInstantiator"
    description: "Details of cluster template"
    example:
      clusterName: "..."
      hosts:
      - hostName: "..."
        hostNameRange: "..."
        rackId: "..."
        hostTemplateRefName: "..."
        roleRefNames:
        - "..."
        - "..."
      - hostName: "..."
        hostNameRange: "..."
        rackId: "..."
        hostTemplateRefName: "..."
        roleRefNames:
        - "..."
        - "..."
      variables:
      - name: "..."
        value: "..."
      - name: "..."
        value: "..."
      roleConfigGroups:
      - rcgRefName: "..."
        name: "..."
      - rcgRefName: "..."
        name: "..."
      clusterSpec:
        dataContextRefs:
        - name: "..."
        - name: "..."
  ApiClusterTemplateRole:
    type: "object"
    properties:
      refName:
        type: "string"
        example: "null"
        description: ""
      roleType:
        type: "string"
        example: "null"
        description: ""
    title: "ApiClusterTemplateRole"
    description: "Role info: This will contain information related to a role referred\
      \ by some\nconfiguration. During import type this role must be materizalized."
    example:
      refName: "..."
      roleType: "..."
  ApiClusterTemplateRoleConfigGroup:
    type: "object"
    properties:
      refName:
        type: "string"
        example: "null"
        description: ""
      roleType:
        type: "string"
        example: "null"
        description: ""
      base:
        type: "boolean"
        description: ""
      displayName:
        type: "string"
        example: "null"
        description: ""
      configs:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiClusterTemplateConfig"
    title: "ApiClusterTemplateRoleConfigGroup"
    description: "Role config group info."
    example:
      refName: "..."
      roleType: "..."
      base: true
      displayName: "..."
      configs:
      - name: "..."
        value: "..."
        ref: "..."
        variable: "..."
        autoConfig: true
      - name: "..."
        value: "..."
        ref: "..."
        variable: "..."
        autoConfig: true
  ApiClusterTemplateRoleConfigGroupInfo:
    type: "object"
    properties:
      rcgRefName:
        type: "string"
        example: "null"
        description: ""
      name:
        type: "string"
        example: "null"
        description: ""
    title: "ApiClusterTemplateRoleConfigGroupInfo"
    description: "During import time information related to all the non-base config\
      \ groups\nmust be provided."
    example:
      rcgRefName: "..."
      name: "..."
  ApiClusterTemplateService:
    type: "object"
    properties:
      refName:
        type: "string"
        example: "null"
        description: ""
      serviceType:
        type: "string"
        example: "null"
        description: ""
      serviceConfigs:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiClusterTemplateConfig"
      roleConfigGroups:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiClusterTemplateRoleConfigGroup"
      roles:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiClusterTemplateRole"
      displayName:
        type: "string"
        example: "null"
        description: ""
    title: "ApiClusterTemplateService"
    description: "Service information"
    example:
      refName: "..."
      serviceType: "..."
      serviceConfigs:
      - name: "..."
        value: "..."
        ref: "..."
        variable: "..."
        autoConfig: true
      - name: "..."
        value: "..."
        ref: "..."
        variable: "..."
        autoConfig: true
      roleConfigGroups:
      - refName: "..."
        roleType: "..."
        base: true
        displayName: "..."
        configs:
        - name: "..."
          value: "..."
          ref: "..."
          variable: "..."
          autoConfig: true
        - name: "..."
          value: "..."
          ref: "..."
          variable: "..."
          autoConfig: true
      - refName: "..."
        roleType: "..."
        base: true
        displayName: "..."
        configs:
        - name: "..."
          value: "..."
          ref: "..."
          variable: "..."
          autoConfig: true
        - name: "..."
          value: "..."
          ref: "..."
          variable: "..."
          autoConfig: true
      roles:
      - refName: "..."
        roleType: "..."
      - refName: "..."
        roleType: "..."
      displayName: "..."
  ApiClusterTemplateVariable:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: ""
      value:
        type: "string"
        example: "null"
        description: ""
    title: "ApiClusterTemplateVariable"
    description: "Variable that is referred in cluster template."
    example:
      name: "..."
      value: "..."
  ApiClusterUtilization:
    type: "object"
    properties:
      totalCpuCores:
        type: "number"
        description: "Average number of CPU cores available in the cluster during\
          \ the report window."
      avgCpuUtilization:
        type: "number"
        description: "Average CPU consumption for the entire cluster during the report\
          \ window.\nThis includes consumption by user workloads in YARN and Impala,\
          \ as well as\nconsumption by all services running in the cluster."
      maxCpuUtilization:
        type: "number"
        description: "Maximum CPU consumption for the entire cluster during the report\
          \ window.\nThis includes consumption by user workloads in YARN and Impala,\
          \ as well as\nconsumption by all services running in the cluster."
      avgCpuDailyPeak:
        type: "number"
        description: "Average daily peak CPU consumption for the entire cluster during\
          \ the report\nwindow. This includes consumption by user workloads in YARN\
          \ and Impala, as\nwell as consumption by all services running in the cluster."
      avgWorkloadCpu:
        type: "number"
        description: "Average CPU consumption by workloads that ran on the cluster\
          \ during the\nreport window. This includes consumption by user workloads\
          \ in YARN and\nImpala."
      maxWorkloadCpu:
        type: "number"
        description: "Maximum CPU consumption by workloads that ran on the cluster\
          \ during the\nreport window. This includes consumption by user workloads\
          \ in YARN and\nImpala."
      avgWorkloadCpuDailyPeak:
        type: "number"
        description: "Average daily peak CPU consumption by workloads that ran on\
          \ the cluster\nduring the report window. This includes consumption by user\
          \ workloads in\nYARN and Impala."
      totalMemory:
        type: "number"
        description: "Average physical memory (in bytes) available in the cluster\
          \ during the\nreport window. This includes consumption by user workloads\
          \ in YARN and\nImpala, as well as consumption by all services running in\
          \ the cluster."
      avgMemoryUtilization:
        type: "number"
        description: "Average memory consumption (as percentage of total memory) for\
          \ the entire\ncluster during the report window. This includes consumption\
          \ by user\nworkloads in YARN and Impala, as well as consumption by all services\n\
          running in the cluster."
      maxMemoryUtilization:
        type: "number"
        description: "Maximum memory consumption (as percentage of total memory) for\
          \ the entire\ncluster during the report window. This includes consumption\
          \ by user\nworkloads in YARN and Impala, as well as consumption by all services\n\
          running in the cluster."
      avgMemoryDailyPeak:
        type: "number"
        description: "Average daily peak memory consumption (as percentage of total\
          \ memory) for\nthe entire cluster during the report window. This includes\
          \ consumption by\nuser workloads in YARN and Impala, as well as consumption\
          \ by all services\nrunning in the cluster."
      avgWorkloadMemory:
        type: "number"
        description: "Average memory consumption (as percentage of total memory) by\
          \ workloads\nthat ran on the cluster during the report window. This includes\
          \ consumption\nby user workloads in YARN and Impala."
      maxWorkloadMemory:
        type: "number"
        description: "Maximum memory consumption (as percentage of total memory) by\
          \ workloads\nthat ran on the cluster. This includes consumption by user\
          \ workloads in\nYARN and Impala"
      avgWorkloadMemoryDailyPeak:
        type: "number"
        description: "Average daily peak memory consumption (as percentage of total\
          \ memory) by\nworkloads that ran on the cluster during the report window.\
          \ This includes\nconsumption by user workloads in YARN and Impala."
      tenantUtilizations:
        description: "A list of tenant utilization reports."
        $ref: "#/definitions/ApiTenantUtilizationList"
      maxCpuUtilizationTimestampMs:
        type: "number"
        description: "Timestamp corresponding to maximum CPU utilization for the entire\
          \ cluster\nduring the report window."
      maxMemoryUtilizationTimestampMs:
        type: "number"
        description: "Timestamp corresponding to maximum memory utilization for the\
          \ entire\ncluster during the report window."
      maxWorkloadCpuTimestampMs:
        type: "number"
        description: "Timestamp corresponds to maximum CPU consumption by workloads\
          \ that\nran on the cluster during the report window."
      maxWorkloadMemoryTimestampMs:
        type: "number"
        description: "Timestamp corresponds to maximum memory resource consumption\
          \ by workloads that\nran on the cluster during the report window."
      errorMessage:
        type: "string"
        example: "null"
        description: "Error message while generating utilization report."
    title: "ApiClusterUtilization"
    description: "Utilization report information of a Cluster."
    example:
      totalCpuCores: 12345.0
      avgCpuUtilization: 12345.0
      maxCpuUtilization: 12345.0
      avgCpuDailyPeak: 12345.0
      avgWorkloadCpu: 12345.0
      maxWorkloadCpu: 12345.0
      avgWorkloadCpuDailyPeak: 12345.0
      totalMemory: 12345.0
      avgMemoryUtilization: 12345.0
      maxMemoryUtilization: 12345.0
      avgMemoryDailyPeak: 12345.0
      avgWorkloadMemory: 12345.0
      maxWorkloadMemory: 12345.0
      avgWorkloadMemoryDailyPeak: 12345.0
      tenantUtilizations:
        items:
        - tenantName: "..."
          cpuUtilizationPercentage: 12345.0
          memoryUtilizationPercentage: 12345.0
        - tenantName: "..."
          cpuUtilizationPercentage: 12345.0
          memoryUtilizationPercentage: 12345.0
      maxCpuUtilizationTimestampMs: 12345
      maxMemoryUtilizationTimestampMs: 12345
      maxWorkloadCpuTimestampMs: 12345
      maxWorkloadMemoryTimestampMs: 12345
      errorMessage: "..."
  ApiClusterVersion:
    type: "string"
    title: "ApiClusterVersion"
    description: "The CDH version of the cluster."
    enum:
    - "CDH3"
    - "CDH3u4X"
    - "CDH4"
    - "CDH5"
    - "CDH6"
    - "UNKNOWN"
  ApiClustersPerfInspectorArgs:
    type: "object"
    properties:
      sourceCluster:
        type: "string"
        example: "null"
        description: "Required name of the source cluster to run network diagnostics\
          \ test."
      targetCluster:
        type: "string"
        example: "null"
        description: "Required name of the target cluster to run network diagnostics\
          \ test."
      pingArgs:
        description: "Optional ping request arguments.\nIf not specified, default\
          \ arguments will be used for ping test."
        $ref: "#/definitions/ApiPerfInspectorPingArgs"
      bandwidthArgs:
        description: "Optional bandwidth test request arguments.\nIf not specified,\
          \ default arguments will be used for bandwidth test.\nApplicable since version\
          \ v32."
        $ref: "#/definitions/ApiPerfInspectorBandwidthArgs"
      policyType:
        description: "Optional type of performance diagnostics to run.\nIf not specified,\
          \ defaults to FULL policy type.\nApplicable since version v32."
        $ref: "#/definitions/PerfInspectorPolicyType"
    title: "ApiClustersPerfInspectorArgs"
    description: "Arguments used for the Cloudera Manager level performance inspector.\n\
      Network diagnostics will be run from every host in sourceCluster to every host\n\
      in targetCluster."
    example:
      sourceCluster: "..."
      targetCluster: "..."
      pingArgs:
        pingTimeoutSecs: 10
        pingCount: 10
        pingPacketSizeBytes: 56
      bandwidthArgs:
        runBandwidthDiagnostics: false
        bandwidthTimeoutSecs: 10
      policyType: "FULL"
  ApiCmPeer:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The name of the remote CM instance. Immutable during update."
      type:
        description: "The type of the remote CM instance. Immutable during update.\n\
          \nAvailable since API v11."
        $ref: "#/definitions/ApiCmPeerType"
      url:
        type: "string"
        example: "null"
        description: "The URL of the remote CM instance. Mutable during update."
      username:
        type: "string"
        example: "null"
        description: "When creating peers, if 'clouderaManagerCreatedUser' is true,\
          \ this should be\nthe remote admin username for creating a user in remote\
          \ Cloudera Manager. The\ncreated remote user will then be stored in the\
          \ local Cloudera Manager DB and\nused in later communication. If 'clouderaManagerCreatedUser'\
          \ is false, which\nis not applicable to REPLICATION peer type, Cloudera\
          \ Manager will store this\nusername in the local DB directly and use it\
          \ together with 'password' for\ncommunication.\n\nMutable during update.\n\
          When set during update, if 'clouderaManagerCreatedUser' is true, a new user\n\
          in remote Cloudera Manager is created, the newly created remote user will\
          \ be\nstored in the local DB. An attempt to delete the previously created\
          \ remote\nuser will be made; If 'clouderaManagerCreatedUser' is false, the\n\
          username/password in the local DB will be updated."
      password:
        type: "string"
        example: "null"
        description: "When creating peers, if 'clouderaManagerCreatedUser' is true,\
          \ this should be\nthe remote admin password for creating a user in remote\
          \ Cloudera Manager. The\ncreated remote user will then be stored in the\
          \ local Cloudera Manager DB and\nused in later communication. If 'clouderaManagerCreatedUser'\
          \ is false, which\nis not applicable to REPLICATION peer type, Cloudera\
          \ Manager will store this\npassword in the local DB directly and use it\
          \ together with 'username' for\ncommunication.\n\nMutable during update.\n\
          When set during update, if 'clouderaManagerCreatedUser' is true, a new user\n\
          in remote Cloudera Manager is created, the newly created remote user will\
          \ be\nstored in the local DB. An attempt to delete the previously created\
          \ remote\nuser will be made; If 'clouderaManagerCreatedUser' is false, the\n\
          username/password in the local DB will be updated."
      clouderaManagerCreatedUser:
        type: "boolean"
        description: "If true, Cloudera Manager creates a remote user using the given\n\
          username/password and stores the created user in local DB for use in later\n\
          communication. Cloudera Manager will also try to delete the created remote\n\
          user when deleting such peers.\n\nIf false, Cloudera Manager will store\
          \ the provided username/password in\nthe local DB and use them in later\
          \ communication. 'false' value on this\nfield is not applicable to REPLICATION\
          \ peer type.\n\nAvailable since API v11.\n\nImmutable during update. Should\
          \ not be set when updating peers."
    title: "ApiCmPeer"
    description: "Information about a Cloudera Manager peer instance.\n<p>\nThe requirement\
      \ and usage of <i>username</i> and <i>password</i> properties\nare dependent\
      \ on the <i>clouderaManagerCreatedUser</i> flag.\n<p>\nWhen creating peers,\
      \ if 'clouderaManagerCreatedUser' is true, the\nusername/password should be\
      \ the credentials of a user with administrator\nprivileges on the remote Cloudera\
      \ Manager. These credentials are not stored,\nthey are used to connect to the\
      \ peer and create a user in that peer. The\nnewly created user is stored and\
      \ used for communication with that peer.\nIf 'clouderaManagerCreatedUser' is\
      \ false, which is not applicable to\nREPLICATION peer type, the username/password\
      \ to the remote Cloudera Manager\nare directly stored and used for all communications\
      \ with that peer.\n<p>\nWhen updating peers, if 'clouderaManagerCreatedUser'\
      \ is true and\nusername/password are set, a new remote user will be created.\
      \ If\n'clouderaManagerCreatedUser' is false and username/password are set, the\n\
      stored username/password will be updated."
    example:
      name: "..."
      type: "STATUS_AGGREGATION"
      url: "..."
      username: "..."
      password: "..."
      clouderaManagerCreatedUser: true
  ApiCmPeerList:
    title: "ApiCmPeerList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiCmPeer"
    description: "A list of Cloudera Manager peers."
  ApiCmPeerType:
    type: "string"
    title: "ApiCmPeerType"
    description: "Enum for CM peer types."
    enum:
    - "REPLICATION"
    - "STATUS_AGGREGATION"
  ApiCollectDiagnosticDataArguments:
    type: "object"
    properties:
      bundleSizeBytes:
        type: "number"
        description: "The maximum approximate bundle size of the output file"
      startTime:
        type: "string"
        example: "null"
        description: "This parameter is ignored between CM 4.5 and CM 5.7 versions.\n\
          For versions from CM 4.5 to CM 5.7, use endTime and\nbundleSizeBytes instead.\n\
          \nFor CM 5.7+ versions, startTime is an optional parameter that\nis with\
          \ endTime and bundleSizeBytes. This was introduced\nto perform diagnostic\
          \ data estimation and collection of global\ndiagnostics data for a certain\
          \ time range.\nThe start time (in ISO 8601 format)\nof the period to collection\
          \ statistics for."
      endTime:
        type: "string"
        example: "null"
        description: "The end time (in ISO 8601 format)\nof the period to collection\
          \ statistics for."
      includeInfoLog:
        type: "boolean"
        description: "This parameter is ignored as of CM 4.5.\nINFO logs are always\
          \ collected.\nWhether to include INFO level logs.\nWARN, ERROR, and FATAL\
          \ level logs are always included."
      ticketNumber:
        type: "string"
        example: "null"
        description: "The support ticket number to attach to this data collection."
      comments:
        type: "string"
        example: "null"
        description: "Comments to include with this data collection."
      clusterName:
        type: "string"
        example: "null"
        description: "Name of the cluster to collect. If null, collects from all clusters."
      enableMonitorMetricsCollection:
        type: "boolean"
        description: "Flag to enable collection of metrics for chart display."
      roles:
        type: "array"
        example: "null"
        description: "List of roles for which to get logs and metrics.\n\nIf set,\
          \ this restricts the roles for log and metrics collection\nto the list specified.\n\
          \nIf empty, the default is to get logs for all roles (in the selected\n\
          cluster, if one is selected).\n\nIntroduced in API v10 of the API."
        items:
          type: "string"
    title: "ApiCollectDiagnosticDataArguments"
    description: "Arguments used for the collectDiagnosticData command."
    example:
      bundleSizeBytes: 12345
      startTime: "..."
      endTime: "..."
      ticketNumber: "..."
      comments: "..."
      clusterName: "..."
      enableMonitorMetricsCollection: true
      roles:
      - "..."
      - "..."
  ApiCommand:
    type: "object"
    properties:
      id:
        type: "number"
        description: "The command ID."
      name:
        type: "string"
        example: "null"
        description: "The command name."
      startTime:
        type: "string"
        example: "null"
        description: "The start time."
      endTime:
        type: "string"
        example: "null"
        description: "The end time, if the command is finished."
      active:
        type: "boolean"
        description: "Whether the command is currently active."
      success:
        type: "boolean"
        description: "If the command is finished, whether it was successful."
      resultMessage:
        type: "string"
        example: "null"
        description: "If the command is finished, the result message."
      resultDataUrl:
        type: "string"
        example: "null"
        description: "URL to the command's downloadable result data, if any exists."
      clusterRef:
        description: "Reference to the cluster (for cluster commands only)."
        $ref: "#/definitions/ApiClusterRef"
      serviceRef:
        description: "Reference to the service (for service commands only)."
        $ref: "#/definitions/ApiServiceRef"
      roleRef:
        description: "Reference to the role (for role commands only)."
        $ref: "#/definitions/ApiRoleRef"
      hostRef:
        description: "Reference to the host (for host commands only)."
        $ref: "#/definitions/ApiHostRef"
      parent:
        description: "Reference to the parent command, if any."
        $ref: "#/definitions/ApiCommand"
      children:
        description: "List of child commands. Only available in the full view.\n<p>\n\
          The list contains only the summary view of the children."
        $ref: "#/definitions/ApiCommandList"
      canRetry:
        type: "boolean"
        description: "If the command can be retried. Available since V11"
    title: "ApiCommand"
    description: "Provides detailed information about a submitted command.\n\n<p>There\
      \ are two types of commands: synchronous and asynchronous.\nSynchronous commands\
      \ complete immediately, and their results are passed\nback in the returned command\
      \ object after the execution of an API call.\nOutside of that returned object,\
      \ there is no way to check the result of a\nsynchronous command.</p>\n\n<p>Asynchronous\
      \ commands have unique non-negative IDs. They may still be\nrunning when the\
      \ API call returns. Clients can check the status of such\ncommands using the\
      \ API.</p>"
    example:
      id: 12345
      name: "..."
      startTime: "..."
      endTime: "..."
      active: true
      success: true
      resultMessage: "..."
      resultDataUrl: "..."
      clusterRef:
        clusterName: "..."
        displayName: "..."
      serviceRef:
        peerName: "..."
        clusterName: "..."
        serviceName: "..."
        serviceDisplayName: "..."
        serviceType: "..."
      roleRef:
        clusterName: "..."
        serviceName: "..."
        roleName: "..."
      hostRef:
        hostId: "..."
        hostname: "..."
      parent:
        id: 12345
        name: "..."
        startTime: "..."
        endTime: "..."
        active: true
        success: true
        resultMessage: "..."
        resultDataUrl: "..."
        clusterRef:
          clusterName: "..."
          displayName: "..."
        serviceRef:
          peerName: "..."
          clusterName: "..."
          serviceName: "..."
          serviceDisplayName: "..."
          serviceType: "..."
        roleRef:
          clusterName: "..."
          serviceName: "..."
          roleName: "..."
        hostRef:
          hostId: "..."
          hostname: "..."
        parent: {}
        children:
          items:
          - {}
          - {}
        canRetry: true
      children:
        items:
        - id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        - id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
      canRetry: true
  ApiCommandList:
    title: "ApiCommandList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiCommand"
    description: "A list of commands."
  ApiCommandMetadata:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The name of of the command."
      argSchema:
        type: "string"
        example: "null"
        description: "The command arguments schema.\n\nThis is in the form of json\
          \ schema and\ndescribes the structure of the command\narguments. If null,\
          \ the command does not\ntake arguments."
    title: "ApiCommandMetadata"
    description: "Provides metadata information about a command."
    example:
      name: "..."
      argSchema: "..."
  ApiCommandMetadataList:
    title: "ApiCommandMetadataList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: "The list of command metadata objects."
          items:
            $ref: "#/definitions/ApiCommandMetadata"
    description: "A list of command metadata."
  ApiCommissionState:
    type: "string"
    title: "ApiCommissionState"
    description: "Represents the Commission state of an entity."
    enum:
    - "COMMISSIONED"
    - "DECOMMISSIONING"
    - "DECOMMISSIONED"
    - "UNKNOWN"
    - "OFFLINING"
    - "OFFLINED"
  ApiConfig:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Readonly. The canonical name that identifies this configuration\
          \ parameter."
      value:
        type: "string"
        example: "null"
        description: "The user-defined value. When absent, the default value (if any)\n\
          will be used. Can also be absent, when enumerating allowed configs."
      required:
        type: "boolean"
        description: "Readonly. Requires \"full\" view.\nWhether this configuration\
          \ is required for the object. If\nany required configuration is not set,\
          \ operations on the object may not\nwork."
      default:
        type: "string"
        example: "null"
        description: "Readonly. Requires \"full\" view. The default value."
      displayName:
        type: "string"
        example: "null"
        description: "Readonly. Requires \"full\" view. A user-friendly name of the\
          \ parameters,\nas would have been shown in the web UI."
      description:
        type: "string"
        example: "null"
        description: "Readonly. Requires \"full\" view. A textual description of the\
          \ parameter."
      relatedName:
        type: "string"
        example: "null"
        description: "Readonly. Requires \"full\" view. If applicable, contains the\
          \ related\nconfiguration variable used by the source project."
      sensitive:
        type: "boolean"
        description: "Readonly.\nWhether this configuration is sensitive, i.e. contains\
          \ information such as passwords, which\nmight affect how the value of this\
          \ configuration might be shared by the caller.\n\nAvailable since v14."
      validationState:
        description: "Readonly. Requires \"full\" view.\nState of the configuration\
          \ parameter after validation."
        $ref: "#/definitions/ValidationState"
      validationMessage:
        type: "string"
        example: "null"
        description: "Readonly. Requires \"full\" view.\nA message explaining the\
          \ parameter's validation state."
      validationWarningsSuppressed:
        type: "boolean"
        description: "Readonly. Requires \"full\" view.\nWhether validation warnings\
          \ associated with this parameter are suppressed.\nIn general, suppressed\
          \ validation warnings are hidden in the Cloudera\nManager UI. Configurations\
          \ that do not produce warnings will not contain\nthis field."
    title: "ApiConfig"
    description: "Model for a configuration parameter.\n\nWhen an entry's <i>value</i>\
      \ property is not available, it means the\nentry is not configured. This means\
      \ that the default value for the entry,\nif any, will be used. Setting a value\
      \ to <i>null</i> also can be used\nto unset any previously set value for the\
      \ parameter, reverting to\nthe default value (if any)."
    example:
      name: "..."
      value: "..."
      required: true
      default: "..."
      displayName: "..."
      description: "..."
      relatedName: "..."
      sensitive: true
      validationState: "ERROR"
      validationMessage: "..."
      validationWarningsSuppressed: true
  ApiConfigList:
    title: "ApiConfigList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiConfig"
    description: "A list of configuration data."
  ApiConfigStalenessStatus:
    type: "string"
    title: "ApiConfigStalenessStatus"
    description: "Represents the configuration staleness status of an entity."
    enum:
    - "FRESH"
    - "STALE_REFRESHABLE"
    - "STALE"
  ApiConfigureForKerberosArguments:
    type: "object"
    properties:
      datanodeTransceiverPort:
        type: "number"
        description: "The HDFS DataNode transceiver port to use. This will be applied\
          \ to all DataNode\nrole configuration groups. If not specified, this will\
          \ default to 1004."
      datanodeWebPort:
        type: "number"
        description: "The HDFS DataNode web port to use.  This will be applied to\
          \ all DataNode\nrole configuration groups. If not specified, this will default\
          \ to 1006."
    title: "ApiConfigureForKerberosArguments"
    description: "Arguments used to configure a cluster for Kerberos."
    example:
      datanodeTransceiverPort: 12345
      datanodeWebPort: 12345
  ApiDashboard:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Returns the dashboard name."
      json:
        type: "string"
        example: "null"
        description: "Returns the json structure for the dashboard. This should be\
          \ treated as\nan opaque blob."
    title: "ApiDashboard"
    description: "A dashboard definition. Dashboards are composed of tsquery-based\
      \ charts."
    example:
      name: "..."
      json: "..."
  ApiDashboardList:
    title: "ApiDashboardList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiDashboard"
    description: "A list of dashboard definitions."
  ApiDataContext:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: ""
      displayName:
        type: "string"
        example: "null"
        description: ""
      nameservice:
        type: "string"
        example: "null"
        description: ""
      createdTime:
        type: "string"
        example: "null"
        description: ""
      lastModifiedTime:
        type: "string"
        example: "null"
        description: ""
      services:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiServiceRef"
      servicesDetails:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiService"
      supportedServiceTypes:
        type: "array"
        example: "null"
        description: ""
        items:
          type: "string"
      allowedClusterVersions:
        type: "array"
        description: ""
        items:
          $ref: "#/definitions/ApiMapEntry"
      configStalenessStatus:
        description: ""
        $ref: "#/definitions/ApiConfigStalenessStatus"
      clientConfigStalenessStatus:
        description: ""
        $ref: "#/definitions/ApiConfigStalenessStatus"
      healthSummary:
        description: ""
        $ref: "#/definitions/ApiHealthSummary"
    title: "ApiDataContext"
    description: "ApiDataContext is the persistent storage/services context exported\
      \ by the base cluster to be\nconsumed by the compute cluster."
    example:
      name: "..."
      displayName: "..."
      nameservice: "..."
      createdTime: "..."
      lastModifiedTime: "..."
      services:
      - peerName: "..."
        clusterName: "..."
        serviceName: "..."
        serviceDisplayName: "..."
        serviceType: "..."
      - peerName: "..."
        clusterName: "..."
        serviceName: "..."
        serviceDisplayName: "..."
        serviceType: "..."
      servicesDetails:
      - name: "..."
        type: "..."
        clusterRef:
          clusterName: "..."
          displayName: "..."
        serviceState: "STOPPING"
        healthSummary: "CONCERNING"
        configStalenessStatus: "STALE_REFRESHABLE"
        clientConfigStalenessStatus: "STALE"
        healthChecks:
        - name: "..."
          summary: "CONCERNING"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "NOT_AVAILABLE"
          explanation: "..."
          suppressed: true
        serviceUrl: "..."
        roleInstancesUrl: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "HOST"
        - "CLUSTER"
        config:
          roleTypeConfigs:
          - {}
          - {}
          items:
          - {}
          - {}
        roles:
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "STARTED"
          commissionState: "COMMISSIONED"
          healthSummary: "CONCERNING"
          configStalenessStatus: "STALE"
          healthChecks:
          - {}
          - {}
          haStatus: "UNKNOWN"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "CLUSTER"
          - "HOST"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "UNKNOWN"
          entityStatus: "STARTING"
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "NA"
          commissionState: "OFFLINING"
          healthSummary: "NOT_AVAILABLE"
          configStalenessStatus: "STALE"
          healthChecks:
          - {}
          - {}
          haStatus: "UNKNOWN"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "HOST"
          - "SERVICE"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "REPLICATED_FOLLOWER"
          entityStatus: "UNKNOWN_HEALTH"
        displayName: "..."
        roleConfigGroups:
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        replicationSchedules:
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "YEAR"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "HOUR"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        snapshotPolicies:
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        entityStatus: "DOWN"
      - name: "..."
        type: "..."
        clusterRef:
          clusterName: "..."
          displayName: "..."
        serviceState: "NA"
        healthSummary: "CONCERNING"
        configStalenessStatus: "STALE"
        clientConfigStalenessStatus: "FRESH"
        healthChecks:
        - name: "..."
          summary: "CONCERNING"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "NOT_AVAILABLE"
          explanation: "..."
          suppressed: true
        serviceUrl: "..."
        roleInstancesUrl: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "ROLE"
        - "ROLE"
        config:
          roleTypeConfigs:
          - {}
          - {}
          items:
          - {}
          - {}
        roles:
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "NA"
          commissionState: "OFFLINING"
          healthSummary: "GOOD"
          configStalenessStatus: "FRESH"
          healthChecks:
          - {}
          - {}
          haStatus: "UNKNOWN"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "CLUSTER"
          - "SERVICE"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "REPLICATED_OBSERVER"
          entityStatus: "UNKNOWN"
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "NA"
          commissionState: "UNKNOWN"
          healthSummary: "DISABLED"
          configStalenessStatus: "FRESH"
          healthChecks:
          - {}
          - {}
          haStatus: "STANDBY"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "HOST"
          - "ROLE"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
          entityStatus: "NONE"
        displayName: "..."
        roleConfigGroups:
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        replicationSchedules:
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "HOUR"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "YEAR"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        snapshotPolicies:
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        entityStatus: "DOWN"
      supportedServiceTypes:
      - "..."
      - "..."
      allowedClusterVersions:
      - key: "..."
        value: "..."
      - key: "..."
        value: "..."
      configStalenessStatus: "STALE_REFRESHABLE"
      clientConfigStalenessStatus: "STALE_REFRESHABLE"
      healthSummary: "HISTORY_NOT_AVAILABLE"
  ApiDataContextList:
    title: "ApiDataContextList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiDataContext"
    description: "List of ApiDataContext"
  ApiDataContextRef:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: ""
    title: "ApiDataContextRef"
    description: "Reference to an ApiDataContext object. More properties can be added\
      \ to this object when we\nsupport mutable datacontexts, but for MVP datacontexts\
      \ are immutable."
    example:
      name: "..."
  ApiDeployment:
    type: "object"
    properties:
      timestamp:
        type: "string"
        example: "null"
        description: "Readonly. This timestamp is provided when you request a deployment\
          \ and\nis not required (or even read) when creating a deployment. This\n\
          timestamp is useful if you have multiple deployments saved and\nwant to\
          \ determine which one to use as a restore point."
      clusters:
        type: "array"
        description: "List of clusters in the system including their services, roles\
          \ and\ncomplete config values."
        items:
          $ref: "#/definitions/ApiCluster"
      hosts:
        type: "array"
        description: "List of hosts in the system"
        items:
          $ref: "#/definitions/ApiHost"
      users:
        type: "array"
        description: "List of all users in the system"
        items:
          $ref: "#/definitions/ApiUser"
      versionInfo:
        description: "Full version information about the running Cloudera Manager\
          \ instance"
        $ref: "#/definitions/ApiVersionInfo"
      managementService:
        description: "The full configuration of the Cloudera Manager management service\n\
          including all the management roles and their config values"
        $ref: "#/definitions/ApiService"
      managerSettings:
        description: "The full configuration of Cloudera Manager itself including\
          \ licensing info"
        $ref: "#/definitions/ApiConfigList"
      allHostsConfig:
        description: "Configuration parameters that apply to all hosts, unless overridden\
          \ at\nthe host level. Available since API v3."
        $ref: "#/definitions/ApiConfigList"
      peers:
        type: "array"
        description: "The list of peers configured in Cloudera Manager.\nAvailable\
          \ since API v3."
        items:
          $ref: "#/definitions/ApiCmPeer"
      hostTemplates:
        description: "The list of all host templates in Cloudera Manager."
        $ref: "#/definitions/ApiHostTemplateList"
    title: "ApiDeployment"
    description: "This objects represents a deployment including all clusters, hosts,\n\
      services, roles, etc in the system.  It can be used to save and restore\nall\
      \ settings."
    example:
      timestamp: "..."
      clusters:
      - name: "..."
        displayName: "..."
        fullVersion: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "SERVICE"
        - "ROLE"
        services:
        - name: "..."
          type: "..."
          clusterRef: {}
          serviceState: "NA"
          healthSummary: "NOT_AVAILABLE"
          configStalenessStatus: "FRESH"
          clientConfigStalenessStatus: "STALE"
          healthChecks:
          - {}
          - {}
          serviceUrl: "..."
          roleInstancesUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "ROLE"
          - "SERVICE"
          config: {}
          roles:
          - {}
          - {}
          displayName: "..."
          roleConfigGroups:
          - {}
          - {}
          replicationSchedules:
          - {}
          - {}
          snapshotPolicies:
          - {}
          - {}
          entityStatus: "STARTING"
        - name: "..."
          type: "..."
          clusterRef: {}
          serviceState: "STARTED"
          healthSummary: "HISTORY_NOT_AVAILABLE"
          configStalenessStatus: "STALE"
          clientConfigStalenessStatus: "FRESH"
          healthChecks:
          - {}
          - {}
          serviceUrl: "..."
          roleInstancesUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "ROLE"
          - "ROLE"
          config: {}
          roles:
          - {}
          - {}
          displayName: "..."
          roleConfigGroups:
          - {}
          - {}
          replicationSchedules:
          - {}
          - {}
          snapshotPolicies:
          - {}
          - {}
          entityStatus: "UNKNOWN_HEALTH"
        parcels:
        - product: "..."
          version: "..."
          stage: "..."
          state: {}
          clusterRef: {}
        - product: "..."
          version: "..."
          stage: "..."
          state: {}
          clusterRef: {}
        clusterUrl: "..."
        hostsUrl: "..."
        entityStatus: "DOWN"
        uuid: "..."
        dataContextRefs:
        - name: "..."
        - name: "..."
        clusterType: "..."
      - name: "..."
        displayName: "..."
        fullVersion: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "ROLE"
        - "CLUSTER"
        services:
        - name: "..."
          type: "..."
          clusterRef: {}
          serviceState: "STOPPING"
          healthSummary: "NOT_AVAILABLE"
          configStalenessStatus: "FRESH"
          clientConfigStalenessStatus: "FRESH"
          healthChecks:
          - {}
          - {}
          serviceUrl: "..."
          roleInstancesUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "ROLE"
          - "CLUSTER"
          config: {}
          roles:
          - {}
          - {}
          displayName: "..."
          roleConfigGroups:
          - {}
          - {}
          replicationSchedules:
          - {}
          - {}
          snapshotPolicies:
          - {}
          - {}
          entityStatus: "UNKNOWN_HEALTH"
        - name: "..."
          type: "..."
          clusterRef: {}
          serviceState: "STOPPING"
          healthSummary: "GOOD"
          configStalenessStatus: "FRESH"
          clientConfigStalenessStatus: "STALE_REFRESHABLE"
          healthChecks:
          - {}
          - {}
          serviceUrl: "..."
          roleInstancesUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "ROLE"
          - "HOST"
          config: {}
          roles:
          - {}
          - {}
          displayName: "..."
          roleConfigGroups:
          - {}
          - {}
          replicationSchedules:
          - {}
          - {}
          snapshotPolicies:
          - {}
          - {}
          entityStatus: "DISABLED_HEALTH"
        parcels:
        - product: "..."
          version: "..."
          stage: "..."
          state: {}
          clusterRef: {}
        - product: "..."
          version: "..."
          stage: "..."
          state: {}
          clusterRef: {}
        clusterUrl: "..."
        hostsUrl: "..."
        entityStatus: "CONCERNING_HEALTH"
        uuid: "..."
        dataContextRefs:
        - name: "..."
        - name: "..."
        clusterType: "..."
      hosts:
      - hostId: "..."
        ipAddress: "..."
        hostname: "..."
        rackId: "..."
        lastHeartbeat: "..."
        roleRefs:
        - clusterName: "..."
          serviceName: "..."
          roleName: "..."
        - clusterName: "..."
          serviceName: "..."
          roleName: "..."
        healthSummary: "CONCERNING"
        healthChecks:
        - name: "..."
          summary: "HISTORY_NOT_AVAILABLE"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "DISABLED"
          explanation: "..."
          suppressed: true
        hostUrl: "..."
        maintenanceMode: true
        commissionState: "OFFLINED"
        maintenanceOwners:
        - "HOST"
        - "ROLE"
        config:
          items:
          - {}
          - {}
        numCores: 12345
        numPhysicalCores: 12345
        totalPhysMemBytes: 12345
        entityStatus: "STOPPED"
        clusterRef:
          clusterName: "..."
          displayName: "..."
      - hostId: "..."
        ipAddress: "..."
        hostname: "..."
        rackId: "..."
        lastHeartbeat: "..."
        roleRefs:
        - clusterName: "..."
          serviceName: "..."
          roleName: "..."
        - clusterName: "..."
          serviceName: "..."
          roleName: "..."
        healthSummary: "GOOD"
        healthChecks:
        - name: "..."
          summary: "NOT_AVAILABLE"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "BAD"
          explanation: "..."
          suppressed: true
        hostUrl: "..."
        maintenanceMode: true
        commissionState: "OFFLINING"
        maintenanceOwners:
        - "ROLE"
        - "CLUSTER"
        config:
          items:
          - {}
          - {}
        numCores: 12345
        numPhysicalCores: 12345
        totalPhysMemBytes: 12345
        entityStatus: "HISTORY_NOT_AVAILABLE"
        clusterRef:
          clusterName: "..."
          displayName: "..."
      users:
      - name: "..."
        password: "..."
        roles:
        - "..."
        - "..."
        pwHash: "..."
        pwSalt: 12345
        pwLogin: true
      - name: "..."
        password: "..."
        roles:
        - "..."
        - "..."
        pwHash: "..."
        pwSalt: 12345
        pwLogin: true
      versionInfo:
        version: "..."
        snapshot: true
        buildUser: "..."
        buildTimestamp: "..."
        gitHash: "..."
      managementService:
        name: "..."
        type: "..."
        clusterRef:
          clusterName: "..."
          displayName: "..."
        serviceState: "STARTED"
        healthSummary: "CONCERNING"
        configStalenessStatus: "STALE"
        clientConfigStalenessStatus: "FRESH"
        healthChecks:
        - name: "..."
          summary: "BAD"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "DISABLED"
          explanation: "..."
          suppressed: true
        serviceUrl: "..."
        roleInstancesUrl: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "HOST"
        - "HOST"
        config:
          roleTypeConfigs:
          - {}
          - {}
          items:
          - {}
          - {}
        roles:
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "STARTED"
          commissionState: "DECOMMISSIONED"
          healthSummary: "NOT_AVAILABLE"
          configStalenessStatus: "STALE_REFRESHABLE"
          healthChecks:
          - {}
          - {}
          haStatus: "ACTIVE"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "ROLE"
          - "SERVICE"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "REPLICATED_LEADER"
          entityStatus: "STOPPING"
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "BUSY"
          commissionState: "DECOMMISSIONED"
          healthSummary: "CONCERNING"
          configStalenessStatus: "STALE_REFRESHABLE"
          healthChecks:
          - {}
          - {}
          haStatus: "STANDBY"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "SERVICE"
          - "SERVICE"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "STANDALONE"
          entityStatus: "GOOD_HEALTH"
        displayName: "..."
        roleConfigGroups:
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        replicationSchedules:
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "HOUR"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "MONTH"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        snapshotPolicies:
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        entityStatus: "STOPPING"
      managerSettings:
        items:
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "ERROR"
          validationMessage: "..."
          validationWarningsSuppressed: true
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "WARNING"
          validationMessage: "..."
          validationWarningsSuppressed: true
      allHostsConfig:
        items:
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "ERROR"
          validationMessage: "..."
          validationWarningsSuppressed: true
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "WARNING"
          validationMessage: "..."
          validationWarningsSuppressed: true
      peers:
      - name: "..."
        type: "REPLICATION"
        url: "..."
        username: "..."
        password: "..."
        clouderaManagerCreatedUser: true
      - name: "..."
        type: "STATUS_AGGREGATION"
        url: "..."
        username: "..."
        password: "..."
        clouderaManagerCreatedUser: true
      hostTemplates:
        items:
        - name: "..."
          clusterRef: {}
          roleConfigGroupRefs:
          - {}
          - {}
        - name: "..."
          clusterRef: {}
          roleConfigGroupRefs:
          - {}
          - {}
  ApiDeployment2:
    type: "object"
    properties:
      timestamp:
        type: "string"
        example: "null"
        description: "Readonly. This timestamp is provided when you request a deployment\
          \ and\nis not required (or even read) when creating a deployment. This\n\
          timestamp is useful if you have multiple deployments saved and\nwant to\
          \ determine which one to use as a restore point."
      clusters:
        type: "array"
        description: "List of clusters in the system including their services, roles\
          \ and\ncomplete config values."
        items:
          $ref: "#/definitions/ApiCluster"
      hosts:
        type: "array"
        description: "List of hosts in the system"
        items:
          $ref: "#/definitions/ApiHost"
      authRoles:
        type: "array"
        description: "List of all auth roles in the system\nAvailable from v32"
        items:
          $ref: "#/definitions/ApiAuthRole"
      externalUserMappings:
        type: "array"
        description: "List of all external user mappings in the system\nAvailable\
          \ from v32"
        items:
          $ref: "#/definitions/ApiExternalUserMapping"
      users:
        type: "array"
        description: "List of all users in the system"
        items:
          $ref: "#/definitions/ApiUser2"
      versionInfo:
        description: "Full version information about the running Cloudera Manager\
          \ instance"
        $ref: "#/definitions/ApiVersionInfo"
      managementService:
        description: "The full configuration of the Cloudera Manager management service\n\
          including all the management roles and their config values"
        $ref: "#/definitions/ApiService"
      managerSettings:
        description: "The full configuration of Cloudera Manager itself including\
          \ licensing info"
        $ref: "#/definitions/ApiConfigList"
      allHostsConfig:
        description: "Configuration parameters that apply to all hosts, unless overridden\
          \ at\nthe host level. Available since API v3."
        $ref: "#/definitions/ApiConfigList"
      peers:
        type: "array"
        description: "The list of peers configured in Cloudera Manager.\nAvailable\
          \ since API v3."
        items:
          $ref: "#/definitions/ApiCmPeer"
      hostTemplates:
        description: "The list of all host templates in Cloudera Manager."
        $ref: "#/definitions/ApiHostTemplateList"
      dataContexts:
        description: "The list of all the data contexts in the Cloudera Manager."
        $ref: "#/definitions/ApiDataContextList"
    title: "ApiDeployment2"
    description: "This objects represents a deployment including all clusters, hosts,\n\
      services, roles, etc in the system.  It can be used to save and restore\nall\
      \ settings. This model will be used v18 and beyond since users will be represented\n\
      by ApiUser2 v18 and beyond."
    example:
      timestamp: "..."
      clusters:
      - name: "..."
        displayName: "..."
        fullVersion: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "CLUSTER"
        - "ROLE"
        services:
        - name: "..."
          type: "..."
          clusterRef: {}
          serviceState: "STARTING"
          healthSummary: "DISABLED"
          configStalenessStatus: "FRESH"
          clientConfigStalenessStatus: "FRESH"
          healthChecks:
          - {}
          - {}
          serviceUrl: "..."
          roleInstancesUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "SERVICE"
          - "ROLE"
          config: {}
          roles:
          - {}
          - {}
          displayName: "..."
          roleConfigGroups:
          - {}
          - {}
          replicationSchedules:
          - {}
          - {}
          snapshotPolicies:
          - {}
          - {}
          entityStatus: "DISABLED_HEALTH"
        - name: "..."
          type: "..."
          clusterRef: {}
          serviceState: "NA"
          healthSummary: "GOOD"
          configStalenessStatus: "STALE"
          clientConfigStalenessStatus: "FRESH"
          healthChecks:
          - {}
          - {}
          serviceUrl: "..."
          roleInstancesUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "HOST"
          - "CLUSTER"
          config: {}
          roles:
          - {}
          - {}
          displayName: "..."
          roleConfigGroups:
          - {}
          - {}
          replicationSchedules:
          - {}
          - {}
          snapshotPolicies:
          - {}
          - {}
          entityStatus: "UNKNOWN"
        parcels:
        - product: "..."
          version: "..."
          stage: "..."
          state: {}
          clusterRef: {}
        - product: "..."
          version: "..."
          stage: "..."
          state: {}
          clusterRef: {}
        clusterUrl: "..."
        hostsUrl: "..."
        entityStatus: "STOPPED"
        uuid: "..."
        dataContextRefs:
        - name: "..."
        - name: "..."
        clusterType: "..."
      - name: "..."
        displayName: "..."
        fullVersion: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "ROLE"
        - "HOST"
        services:
        - name: "..."
          type: "..."
          clusterRef: {}
          serviceState: "UNKNOWN"
          healthSummary: "CONCERNING"
          configStalenessStatus: "STALE_REFRESHABLE"
          clientConfigStalenessStatus: "FRESH"
          healthChecks:
          - {}
          - {}
          serviceUrl: "..."
          roleInstancesUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "CLUSTER"
          - "SERVICE"
          config: {}
          roles:
          - {}
          - {}
          displayName: "..."
          roleConfigGroups:
          - {}
          - {}
          replicationSchedules:
          - {}
          - {}
          snapshotPolicies:
          - {}
          - {}
          entityStatus: "UNKNOWN_HEALTH"
        - name: "..."
          type: "..."
          clusterRef: {}
          serviceState: "UNKNOWN"
          healthSummary: "CONCERNING"
          configStalenessStatus: "STALE_REFRESHABLE"
          clientConfigStalenessStatus: "STALE"
          healthChecks:
          - {}
          - {}
          serviceUrl: "..."
          roleInstancesUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "SERVICE"
          - "HOST"
          config: {}
          roles:
          - {}
          - {}
          displayName: "..."
          roleConfigGroups:
          - {}
          - {}
          replicationSchedules:
          - {}
          - {}
          snapshotPolicies:
          - {}
          - {}
          entityStatus: "DISABLED_HEALTH"
        parcels:
        - product: "..."
          version: "..."
          stage: "..."
          state: {}
          clusterRef: {}
        - product: "..."
          version: "..."
          stage: "..."
          state: {}
          clusterRef: {}
        clusterUrl: "..."
        hostsUrl: "..."
        entityStatus: "DOWN"
        uuid: "..."
        dataContextRefs:
        - name: "..."
        - name: "..."
        clusterType: "..."
      hosts:
      - hostId: "..."
        ipAddress: "..."
        hostname: "..."
        rackId: "..."
        lastHeartbeat: "..."
        roleRefs:
        - clusterName: "..."
          serviceName: "..."
          roleName: "..."
        - clusterName: "..."
          serviceName: "..."
          roleName: "..."
        healthSummary: "BAD"
        healthChecks:
        - name: "..."
          summary: "GOOD"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "BAD"
          explanation: "..."
          suppressed: true
        hostUrl: "..."
        maintenanceMode: true
        commissionState: "OFFLINING"
        maintenanceOwners:
        - "CLUSTER"
        - "HOST"
        config:
          items:
          - {}
          - {}
        numCores: 12345
        numPhysicalCores: 12345
        totalPhysMemBytes: 12345
        entityStatus: "GOOD_HEALTH"
        clusterRef:
          clusterName: "..."
          displayName: "..."
      - hostId: "..."
        ipAddress: "..."
        hostname: "..."
        rackId: "..."
        lastHeartbeat: "..."
        roleRefs:
        - clusterName: "..."
          serviceName: "..."
          roleName: "..."
        - clusterName: "..."
          serviceName: "..."
          roleName: "..."
        healthSummary: "BAD"
        healthChecks:
        - name: "..."
          summary: "DISABLED"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "GOOD"
          explanation: "..."
          suppressed: true
        hostUrl: "..."
        maintenanceMode: true
        commissionState: "UNKNOWN"
        maintenanceOwners:
        - "HOST"
        - "HOST"
        config:
          items:
          - {}
          - {}
        numCores: 12345
        numPhysicalCores: 12345
        totalPhysMemBytes: 12345
        entityStatus: "BAD_HEALTH"
        clusterRef:
          clusterName: "..."
          displayName: "..."
      authRoles:
      - displayName: "..."
        name: "..."
        clusters:
        - clusterName: "..."
          displayName: "..."
        - clusterName: "..."
          displayName: "..."
        users:
        - name: "..."
        - name: "..."
        externalUserMappings:
        - uuid: "..."
          name: "..."
          type: "EXTERNAL_PROGRAM"
        - uuid: "..."
          name: "..."
          type: "EXTERNAL_PROGRAM"
        baseRole:
          displayName: "..."
          name: "..."
          uuid: "..."
        uuid: "..."
        isCustom: true
      - displayName: "..."
        name: "..."
        clusters:
        - clusterName: "..."
          displayName: "..."
        - clusterName: "..."
          displayName: "..."
        users:
        - name: "..."
        - name: "..."
        externalUserMappings:
        - uuid: "..."
          name: "..."
          type: "SAML_SCRIPT"
        - uuid: "..."
          name: "..."
          type: "EXTERNAL_PROGRAM"
        baseRole:
          displayName: "..."
          name: "..."
          uuid: "..."
        uuid: "..."
        isCustom: true
      externalUserMappings:
      - name: "..."
        type: "SAML_SCRIPT"
        uuid: "..."
        authRoles:
        - displayName: "..."
          name: "..."
          uuid: "..."
        - displayName: "..."
          name: "..."
          uuid: "..."
      - name: "..."
        type: "SAML_ATTRIBUTE"
        uuid: "..."
        authRoles:
        - displayName: "..."
          name: "..."
          uuid: "..."
        - displayName: "..."
          name: "..."
          uuid: "..."
      users:
      - name: "..."
        password: "..."
        authRoles:
        - displayName: "..."
          name: "..."
          uuid: "..."
        - displayName: "..."
          name: "..."
          uuid: "..."
        pwHash: "..."
        pwSalt: 12345
        pwLogin: true
      - name: "..."
        password: "..."
        authRoles:
        - displayName: "..."
          name: "..."
          uuid: "..."
        - displayName: "..."
          name: "..."
          uuid: "..."
        pwHash: "..."
        pwSalt: 12345
        pwLogin: true
      versionInfo:
        version: "..."
        snapshot: true
        buildUser: "..."
        buildTimestamp: "..."
        gitHash: "..."
      managementService:
        name: "..."
        type: "..."
        clusterRef:
          clusterName: "..."
          displayName: "..."
        serviceState: "STARTED"
        healthSummary: "CONCERNING"
        configStalenessStatus: "STALE"
        clientConfigStalenessStatus: "STALE_REFRESHABLE"
        healthChecks:
        - name: "..."
          summary: "BAD"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "HISTORY_NOT_AVAILABLE"
          explanation: "..."
          suppressed: true
        serviceUrl: "..."
        roleInstancesUrl: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "CLUSTER"
        - "HOST"
        config:
          roleTypeConfigs:
          - {}
          - {}
          items:
          - {}
          - {}
        roles:
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "BUSY"
          commissionState: "OFFLINING"
          healthSummary: "BAD"
          configStalenessStatus: "STALE_REFRESHABLE"
          healthChecks:
          - {}
          - {}
          haStatus: "STANDBY"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "SERVICE"
          - "SERVICE"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "UNKNOWN"
          entityStatus: "DOWN"
        - name: "..."
          type: "..."
          hostRef: {}
          serviceRef: {}
          roleState: "BUSY"
          commissionState: "UNKNOWN"
          healthSummary: "CONCERNING"
          configStalenessStatus: "STALE"
          healthChecks:
          - {}
          - {}
          haStatus: "ACTIVE"
          roleUrl: "..."
          maintenanceMode: true
          maintenanceOwners:
          - "HOST"
          - "ROLE"
          config: {}
          roleConfigGroupRef: {}
          zooKeeperServerMode: "STANDALONE"
          entityStatus: "UNKNOWN_HEALTH"
        displayName: "..."
        roleConfigGroups:
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        - name: "..."
          roleType: "..."
          base: true
          config: {}
          displayName: "..."
          serviceRef: {}
        replicationSchedules:
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "HOUR"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        - hdfsArguments: {}
          hiveArguments: {}
          hdfsCloudArguments: {}
          history:
          - {}
          - {}
          active: true
          hiveCloudArguments: {}
          id: 12345
          displayName: "..."
          description: "..."
          startTime: "..."
          endTime: "..."
          interval: 12345
          intervalUnit: "DAY"
          nextRun: "..."
          paused: true
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
        snapshotPolicies:
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        - name: "..."
          description: "..."
          hourlySnapshots: 12345
          dailySnapshots: 12345
          weeklySnapshots: 12345
          monthlySnapshots: 12345
          yearlySnapshots: 12345
          minuteOfHour: 12345
          hoursForHourlySnapshots:
          - 12345
          - 12345
          hourOfDay: 12345
          dayOfWeek: 12345
          dayOfMonth: 12345
          monthOfYear: 12345
          alertOnStart: true
          alertOnSuccess: true
          alertOnFail: true
          alertOnAbort: true
          hbaseArguments: {}
          hdfsArguments: {}
          lastCommand: {}
          lastSuccessfulCommand: {}
          paused: true
        entityStatus: "DISABLED_HEALTH"
      managerSettings:
        items:
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "ERROR"
          validationMessage: "..."
          validationWarningsSuppressed: true
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "ERROR"
          validationMessage: "..."
          validationWarningsSuppressed: true
      allHostsConfig:
        items:
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "WARNING"
          validationMessage: "..."
          validationWarningsSuppressed: true
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "OK"
          validationMessage: "..."
          validationWarningsSuppressed: true
      peers:
      - name: "..."
        type: "REPLICATION"
        url: "..."
        username: "..."
        password: "..."
        clouderaManagerCreatedUser: true
      - name: "..."
        type: "REPLICATION"
        url: "..."
        username: "..."
        password: "..."
        clouderaManagerCreatedUser: true
      hostTemplates:
        items:
        - name: "..."
          clusterRef: {}
          roleConfigGroupRefs:
          - {}
          - {}
        - name: "..."
          clusterRef: {}
          roleConfigGroupRefs:
          - {}
          - {}
      dataContexts:
        items:
        - name: "..."
          displayName: "..."
          nameservice: "..."
          createdTime: "..."
          lastModifiedTime: "..."
          services:
          - {}
          - {}
          servicesDetails:
          - {}
          - {}
          supportedServiceTypes:
          - "..."
          - "..."
          allowedClusterVersions:
          - {}
          - {}
          configStalenessStatus: "FRESH"
          clientConfigStalenessStatus: "STALE_REFRESHABLE"
          healthSummary: "GOOD"
        - name: "..."
          displayName: "..."
          nameservice: "..."
          createdTime: "..."
          lastModifiedTime: "..."
          services:
          - {}
          - {}
          servicesDetails:
          - {}
          - {}
          supportedServiceTypes:
          - "..."
          - "..."
          allowedClusterVersions:
          - {}
          - {}
          configStalenessStatus: "STALE_REFRESHABLE"
          clientConfigStalenessStatus: "STALE_REFRESHABLE"
          healthSummary: "CONCERNING"
  ApiDisableJtHaArguments:
    type: "object"
    properties:
      activeName:
        type: "string"
        example: "null"
        description: "Name of the JobTracker that will be active after HA is disabled."
    title: "ApiDisableJtHaArguments"
    description: "Arguments used for disable JT HA command."
    example:
      activeName: "..."
  ApiDisableLlamaHaArguments:
    type: "object"
    properties:
      activeName:
        type: "string"
        example: "null"
        description: "Name of the Llama role that will be active after HA is disabled."
    title: "ApiDisableLlamaHaArguments"
    description: "Arguments used for disable Llama HA command."
    example:
      activeName: "..."
  ApiDisableNnHaArguments:
    type: "object"
    properties:
      activeNnName:
        type: "string"
        example: "null"
        description: "Name of the NamdeNode role that is going to be active after\n\
          High Availability is disabled."
      snnHostId:
        type: "string"
        example: "null"
        description: "Id of the host where the new SecondaryNameNode will be created."
      snnCheckpointDirList:
        type: "array"
        example: "null"
        description: "List of directories used for checkpointing by the new SecondaryNameNode."
        items:
          type: "string"
      snnName:
        type: "string"
        example: "null"
        description: "Name of the new SecondaryNameNode role (Optional)."
    title: "ApiDisableNnHaArguments"
    description: "Arguments used for Disable NameNode High Availability command."
    example:
      activeNnName: "..."
      snnHostId: "..."
      snnCheckpointDirList:
      - "..."
      - "..."
      snnName: "..."
  ApiDisableOozieHaArguments:
    type: "object"
    properties:
      activeName:
        type: "string"
        example: "null"
        description: "Name of the Oozie Server that will be active after HA is disabled."
    title: "ApiDisableOozieHaArguments"
    description: ""
    example:
      activeName: "..."
  ApiDisableRmHaArguments:
    type: "object"
    properties:
      activeName:
        type: "string"
        example: "null"
        description: "Name of the ResourceManager that will be active after HA is\
          \ disabled."
    title: "ApiDisableRmHaArguments"
    description: "Arguments used for Disable RM HA command."
    example:
      activeName: "..."
  ApiDisableSentryHaArgs:
    type: "object"
    properties:
      activeName:
        type: "string"
        example: "null"
        description: "Name of the single role that will remain active after HA is\
          \ disabled."
    title: "ApiDisableSentryHaArgs"
    description: "Arguments used for disable Sentry HA API call."
    example:
      activeName: "..."
  ApiEcho:
    type: "object"
    properties:
      message:
        type: "string"
        example: "null"
        description: ""
    title: "ApiEcho"
    description: "The echoMessage carries a message to be echoed back from the API\
      \ service."
    example:
      message: "..."
  ApiEnableJtHaArguments:
    type: "object"
    properties:
      newJtHostId:
        type: "string"
        example: "null"
        description: "Id of host on which second JobTracker role will be added."
      forceInitZNode:
        type: "boolean"
        description: "Initialize the ZNode even if it already exists. This can happen\
          \ if\nJobTracker HA was enabled before and then disabled. Disable operation\n\
          doesn't delete this ZNode. Defaults to true."
      zkServiceName:
        type: "string"
        example: "null"
        description: "Name of the ZooKeeper service that will be used for auto-failover.\n\
          This is an optional parameter if the MapReduce to ZooKeeper dependency is\n\
          already set in CM."
      newJtRoleName:
        type: "string"
        example: "null"
        description: "Name of the second JobTracker role to be created (Optional)"
      fc1RoleName:
        type: "string"
        example: "null"
        description: "Name of first Failover Controller role to be created.\nThis\
          \ is the Failover Controller co-located with the current\nJobTracker (Optional)"
      fc2RoleName:
        type: "string"
        example: "null"
        description: "Name of second Failover Controller role to be created.\nThis\
          \ is the Failover Controller co-located with the new\nJobTracker (Optional)"
      logicalName:
        type: "string"
        example: "null"
        description: "Logical name of the JobTracker pair. If value is not provided,\n\
          \"logicaljt\" is used as the default. The name can contain\nonly alphanumeric\
          \ characters and \"-\".\n<p>\nAvailable since API v8."
    title: "ApiEnableJtHaArguments"
    description: "Arguments used for enable JT HA command."
    example:
      newJtHostId: "..."
      forceInitZNode: true
      zkServiceName: "..."
      newJtRoleName: "..."
      fc1RoleName: "..."
      fc2RoleName: "..."
      logicalName: "..."
  ApiEnableLlamaHaArguments:
    type: "object"
    properties:
      newLlamaHostId:
        type: "string"
        example: "null"
        description: "HostId of the host on which the second Llama role will be created."
      newLlamaRoleName:
        type: "string"
        example: "null"
        description: "Name of the second Llama role to be created (optional)."
      zkServiceName:
        type: "string"
        example: "null"
        description: "Name of the ZooKeeper service that will be used for auto-failover.\n\
          This argument may be omitted if the ZooKeeper dependency for Impala\nis\
          \ already configured."
    title: "ApiEnableLlamaHaArguments"
    description: "Arguments used for enable Llama HA command."
    example:
      newLlamaHostId: "..."
      newLlamaRoleName: "..."
      zkServiceName: "..."
  ApiEnableLlamaRmArguments:
    type: "object"
    properties:
      llama1HostId:
        type: "string"
        example: "null"
        description: "HostId of the host on which the first Llama role will be created."
      llama1RoleName:
        type: "string"
        example: "null"
        description: "Name of the first Llama role to be created (optional)."
      llama2HostId:
        type: "string"
        example: "null"
        description: "HostId of the host on which the second Llama role will be created."
      llama2RoleName:
        type: "string"
        example: "null"
        description: "Name of the second Llama role to be created (optional)."
      zkServiceName:
        type: "string"
        example: "null"
        description: "Name of the ZooKeeper service that will be used for auto-failover.\n\
          Only relevant when enabling Llama RM in HA mode (i.e., when two\nLlama roles\
          \ are being created). This argument may be omitted if\nthe ZooKeeper dependency\
          \ for Impala is already configured."
      skipRestart:
        type: "boolean"
        description: "Skip the restart of Yarn, Impala, and their dependent services,\n\
          and don't deploy client configuration. Default is false (i.e.,\nby default,\
          \ the services are restarted and client configuration\nis deployed)."
    title: "ApiEnableLlamaRmArguments"
    description: "Arguments used for enable Llama RM command."
    example:
      llama1HostId: "..."
      llama1RoleName: "..."
      llama2HostId: "..."
      llama2RoleName: "..."
      zkServiceName: "..."
      skipRestart: true
  ApiEnableNnHaArguments:
    type: "object"
    properties:
      activeNnName:
        type: "string"
        example: "null"
        description: "Name of the NameNode role that is going to be made Highly Available."
      standbyNnName:
        type: "string"
        example: "null"
        description: "Name of the new Standby NameNode role that will be created during\
          \ the\ncommand (Optional)."
      standbyNnHostId:
        type: "string"
        example: "null"
        description: "Id of the host on which new Standby NameNode will be created."
      standbyNameDirList:
        type: "array"
        example: "null"
        description: "List of directories for the new Standby NameNode.\nIf not provided\
          \ then it will use same dirs as Active NameNode."
        items:
          type: "string"
      nameservice:
        type: "string"
        example: "null"
        description: "Nameservice to be used while enabling Highly Available.\nIt\
          \ must be specified if Active NameNode isn't configured with it.\nIf Active\
          \ NameNode is already configured, then this need not\nbe specified. However,\
          \ if it is still specified, it must match\nthe existing config for the Active\
          \ NameNode."
      qjName:
        type: "string"
        example: "null"
        description: "Name of the journal located on each JournalNodes' filesystem.\n\
          This can be optionally provided if the config hasn't already been set for\
          \ the\nActive NameNode.\nIf this isn't provided and Active NameNode doesn't\
          \ also have the config,\nthen nameservice is used by default. If Active\
          \ NameNode already has this configured,\nthen it much match the existing\
          \ config."
      activeFcName:
        type: "string"
        example: "null"
        description: "Name of the FailoverController role to be created on\nActive\
          \ NameNode's host (Optional)."
      standbyFcName:
        type: "string"
        example: "null"
        description: "Name of the FailoverController role to be created on\nStandby\
          \ NameNode's host (Optional)."
      zkServiceName:
        type: "string"
        example: "null"
        description: "Name of the ZooKeeper service to be used for Auto-Failover.\n\
          This MUST be provided if HDFS doesn't have a ZooKeeper dependency.\nIf the\
          \ dependency is already set, then this should be the name of the same\n\
          ZooKeeper service, but can also be omitted in that case."
      jns:
        type: "array"
        description: "Arguments for the JournalNodes to be created during the command.\n\
          Must be provided only if JournalNodes don't exist already in HDFS."
        items:
          $ref: "#/definitions/ApiJournalNodeArguments"
      forceInitZNode:
        type: "boolean"
        description: "Boolean indicating if the ZNode should be force initialized\
          \ if it is\nalready present. Useful while re-enabling High Availability.\
          \ (Default: TRUE)"
      clearExistingStandbyNameDirs:
        type: "boolean"
        description: "Boolean indicating if the existing name directories for Standby\
          \ NameNode\nshould be cleared during the workflow.\nUseful while re-enabling\
          \ High Availability. (Default: TRUE)"
      clearExistingJnEditsDir:
        type: "boolean"
        description: "Boolean indicating if the existing edits directories for the\
          \ JournalNodes\nfor the specified nameservice should be cleared during the\
          \ workflow.\nUseful while re-enabling High Availability. (Default: TRUE)"
    title: "ApiEnableNnHaArguments"
    description: "Arguments used for Enable NameNode High Availability command."
    example:
      activeNnName: "..."
      standbyNnName: "..."
      standbyNnHostId: "..."
      standbyNameDirList:
      - "..."
      - "..."
      nameservice: "..."
      qjName: "..."
      activeFcName: "..."
      standbyFcName: "..."
      zkServiceName: "..."
      jns:
      - jnName: "..."
        jnHostId: "..."
        jnEditsDir: "..."
      - jnName: "..."
        jnHostId: "..."
        jnEditsDir: "..."
      forceInitZNode: true
      clearExistingStandbyNameDirs: true
      clearExistingJnEditsDir: true
  ApiEnableOozieHaArguments:
    type: "object"
    properties:
      newOozieServerHostIds:
        type: "array"
        example: "null"
        description: "IDs of the hosts on which new Oozie Servers will be added."
        items:
          type: "string"
      newOozieServerRoleNames:
        type: "array"
        example: "null"
        description: "Names of the new Oozie Servers. This is an optional argument,\n\
          but if provided, it should match the length of host IDs provided."
        items:
          type: "string"
      zkServiceName:
        type: "string"
        example: "null"
        description: "Name of the ZooKeeper service that will be used for Oozie HA.\n\
          This is an optional parameter if the Oozie to ZooKeeper dependency is\n\
          already set in CM."
      loadBalancerHostname:
        type: "string"
        example: "null"
        description: "Hostname of the load balancer used for Oozie HA.\nOptional if\
          \ load balancer host and ports are already set in CM."
      loadBalancerPort:
        type: "number"
        description: "HTTP port of the load balancer used for Oozie HA.\nOptional\
          \ if load balancer host and ports are already set in CM."
      loadBalancerSslPort:
        type: "number"
        description: "HTTPS port of the load balancer used for Oozie HA when SSL is\
          \ enabled.\nThis port is only used for oozie.base.url -- the callback is\
          \ always\non HTTP.\nOptional if load balancer host and ports are already\
          \ set in CM."
      loadBalancerHostPort:
        type: "string"
        example: "null"
        description: "Address of the load balancer used for Oozie HA.\nThis is an\
          \ optional parameter if this config is already set in CM."
    title: "ApiEnableOozieHaArguments"
    description: ""
    example:
      newOozieServerHostIds:
      - "..."
      - "..."
      newOozieServerRoleNames:
      - "..."
      - "..."
      zkServiceName: "..."
      loadBalancerHostname: "..."
      loadBalancerPort: 12345
      loadBalancerSslPort: 12345
  ApiEnableRmHaArguments:
    type: "object"
    properties:
      newRmHostId:
        type: "string"
        example: "null"
        description: "Id of host on which second ResourceManager role will be added."
      newRmRoleName:
        type: "string"
        example: "null"
        description: "Name of the second ResourceManager role to be created (Optional)"
      zkServiceName:
        type: "string"
        example: "null"
        description: "Name of the ZooKeeper service that will be used for auto-failover.\n\
          This is an optional parameter if the Yarn to ZooKeeper dependency is\nalready\
          \ set in CM."
    title: "ApiEnableRmHaArguments"
    description: "Arguments used for enable RM HA command."
    example:
      newRmHostId: "..."
      newRmRoleName: "..."
      zkServiceName: "..."
  ApiEnableSentryHaArgs:
    type: "object"
    properties:
      newSentryHostId:
        type: "string"
        example: "null"
        description: "Id of host on which new Sentry Server role will be added."
      newSentryRoleName:
        type: "string"
        example: "null"
        description: "Name of the new Sentry Server role to be created. This is an\n\
          optional argument."
      zkServiceName:
        type: "string"
        example: "null"
        description: "Name of the ZooKeeper service that will be used for Sentry HA.\n\
          This is an optional parameter if the Sentry to ZooKeeper dependency is\n\
          already set in CM."
      rrcArgs:
        description: ""
        $ref: "#/definitions/ApiSimpleRollingRestartClusterArgs"
    title: "ApiEnableSentryHaArgs"
    description: "Arguments used for enable Sentry HA command."
    example:
      newSentryHostId: "..."
      newSentryRoleName: "..."
      zkServiceName: "..."
      rrcArgs:
        slaveBatchSize: 12345
        sleepSeconds: 12345
        slaveFailCountThreshold: 12345
  ApiEntityStatus:
    type: "string"
    title: "ApiEntityStatus"
    description: "The single value used by the Cloudera Manager UI to represent the\
      \ status of\nthe entity. It is computed from a variety of other entity-specific\
      \ states,\nnot all values apply to all entities. For example, STARTING/STOPPING\
      \ do not\napply to a host."
    enum:
    - "UNKNOWN"
    - "NONE"
    - "STOPPED"
    - "DOWN"
    - "UNKNOWN_HEALTH"
    - "DISABLED_HEALTH"
    - "CONCERNING_HEALTH"
    - "BAD_HEALTH"
    - "GOOD_HEALTH"
    - "STARTING"
    - "STOPPING"
    - "HISTORY_NOT_AVAILABLE"
  ApiEntityType:
    type: "string"
    title: "ApiEntityType"
    description: "Represents the types of entities."
    enum:
    - "CLUSTER"
    - "SERVICE"
    - "ROLE"
    - "HOST"
  ApiEvent:
    type: "object"
    properties:
      id:
        type: "string"
        example: "null"
        description: "A unique ID for this event."
      content:
        type: "string"
        example: "null"
        description: "The content payload of this event."
      timeOccurred:
        type: "string"
        example: "null"
        description: "When the event was generated."
      timeReceived:
        type: "string"
        example: "null"
        description: "When the event was stored by Cloudera Manager. Events do not\
          \ arrive in\nthe order that they are generated. If you are writing an event\
          \ poller,\nthis is a useful field to query."
      category:
        description: "The category of this event -- whether it is a health event,\
          \ an audit\nevent, an activity event, etc."
        $ref: "#/definitions/ApiEventCategory"
      severity:
        description: "The severity of the event."
        $ref: "#/definitions/ApiEventSeverity"
      alert:
        type: "boolean"
        description: "Whether the event is promoted to an alert according to configuration."
      attributes:
        type: "array"
        description: "A list of key-value attribute pairs."
        items:
          $ref: "#/definitions/ApiEventAttribute"
    title: "ApiEvent"
    description: "Events model noteworthy incidents in Cloudera Manager or the managed\n\
      Hadoop cluster. An event carries its event category, severity, and a\nstring\
      \ content. They also have generic attributes, which are free-form\nkey value\
      \ pairs. Important events may be promoted into alerts."
    example:
      id: "..."
      content: "..."
      timeOccurred: "..."
      timeReceived: "..."
      category: "SYSTEM"
      severity: "IMPORTANT"
      alert: true
      attributes:
      - name: "..."
        values:
        - "..."
        - "..."
      - name: "..."
        values:
        - "..."
        - "..."
  ApiEventAttribute:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: ""
      values:
        type: "array"
        example: "null"
        description: ""
        items:
          type: "string"
    title: "ApiEventAttribute"
    description: ""
    example:
      name: "..."
      values:
      - "..."
      - "..."
  ApiEventCategory:
    type: "string"
    title: "ApiEventCategory"
    description: ""
    enum:
    - "UNKNOWN"
    - "HEALTH_EVENT"
    - "LOG_EVENT"
    - "AUDIT_EVENT"
    - "ACTIVITY_EVENT"
    - "HBASE"
    - "SYSTEM"
  ApiEventQueryResult:
    title: "ApiEventQueryResult"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        totalResults:
          type: "number"
          description: "The total number of matched results. Some are possibly not\
            \ shown due\nto pagination."
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiEvent"
    description: "A generic list."
  ApiEventSeverity:
    type: "string"
    title: "ApiEventSeverity"
    description: ""
    enum:
    - "UNKNOWN"
    - "INFORMATIONAL"
    - "IMPORTANT"
    - "CRITICAL"
  ApiExternalAccount:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Represents the intial name of the account; used to uniquely\
          \ identify this account."
      displayName:
        type: "string"
        example: "null"
        description: "Represents a modifiable label to identify this account for user-visible\
          \ purposes."
      createdTime:
        type: "string"
        example: "null"
        description: "Represents the time of creation for this account."
      lastModifiedTime:
        type: "string"
        example: "null"
        description: "Represents the last modification time for this account."
      typeName:
        type: "string"
        example: "null"
        description: "Represents the Type ID of a supported external account type.\n\
          The type represented by this field dictates which configuration options\
          \ must be defined\nfor this account."
      accountConfigs:
        description: "Represents the account configuration for this account.\n\nWhen\
          \ an account is retrieved from the server,\nthe configs returned must match\
          \ allowed configuration for the type of this account.\n\nWhen specified\
          \ for creation of a new account or for the update of an existing account,\n\
          this field must include every required configuration parameter specified\
          \ in the type's definition,\nwith the account configuration's value field\
          \ specified to represent the specific\nconfiguration desired for this account."
        $ref: "#/definitions/ApiConfigList"
    title: "ApiExternalAccount"
    description: "Represents an instantiation of an external account type, referencing\
      \ a supported\nexternal account type, via the typeName field, along with suitable\
      \ configuration to\naccess an external resource of the provided type.\n\nThe\
      \ typeName field must match the name of an external account type."
    example:
      name: "..."
      displayName: "..."
      createdTime: "..."
      lastModifiedTime: "..."
      typeName: "..."
      accountConfigs:
        items:
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "OK"
          validationMessage: "..."
          validationWarningsSuppressed: true
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "OK"
          validationMessage: "..."
          validationWarningsSuppressed: true
  ApiExternalAccountCategory:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Represents an identifier for a category."
      displayName:
        type: "string"
        example: "null"
        description: "Represents a localized display name for a category."
      description:
        type: "string"
        example: "null"
        description: "Represents a localized description for a category."
    title: "ApiExternalAccountCategory"
    description: "Type representing an external account category."
    example:
      name: "..."
      displayName: "..."
      description: "..."
  ApiExternalAccountCategoryList:
    title: "ApiExternalAccountCategoryList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiExternalAccountCategory"
    description: "Represents a list of external account categories."
  ApiExternalAccountList:
    title: "ApiExternalAccountList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiExternalAccount"
    description: "Represents a list of external accounts."
  ApiExternalAccountType:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Represents the immutable name for this account."
      categoryName:
        type: "string"
        example: "null"
        description: "Represents the category of this account."
      type:
        type: "string"
        example: "null"
        description: "Represents the type for this account."
      displayName:
        type: "string"
        example: "null"
        description: "Represents the localized display name for this account."
      description:
        type: "string"
        example: "null"
        description: "Represents the localized description for this account type."
      allowedAccountConfigs:
        description: "Represents the list of allowed account configs."
        $ref: "#/definitions/ApiConfigList"
    title: "ApiExternalAccountType"
    description: "A supported external account type.\nAn external account type represents\
      \ an external authentication source that is used by\nCloudera Manager in its\
      \ APIs to take suitable actions that require authentication to an\nexternal\
      \ service.\n\nAn external account type is uniquely identified by a server-generated\
      \ ID and identifies with\na category identifier: e.g. The \"AWS\" category has\
      \ an account type \"AWS_Access_Key_Authorization\""
    example:
      name: "..."
      categoryName: "..."
      type: "..."
      displayName: "..."
      description: "..."
      allowedAccountConfigs:
        items:
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "OK"
          validationMessage: "..."
          validationWarningsSuppressed: true
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "ERROR"
          validationMessage: "..."
          validationWarningsSuppressed: true
  ApiExternalAccountTypeList:
    title: "ApiExternalAccountTypeList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiExternalAccountType"
    description: "Represents a list of external account types."
  ApiExternalUserMapping:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The name of the external mapping"
      type:
        description: "The type of the external mapping"
        $ref: "#/definitions/ApiExternalUserMappingType"
      uuid:
        type: "string"
        example: "null"
        description: "Readonly. The UUID of the authRole.\n<p>"
      authRoles:
        type: "array"
        description: "A list of ApiAuthRole that this user possesses.\n\nEach custom\
          \ role with be a built-in role with a set of scopes.\nApiAuthRole is the\
          \ model for specifying custom roles.\nOnly admins and user admins can create/delete/update\
          \ external\nuser mappings."
        items:
          $ref: "#/definitions/ApiAuthRoleRef"
    title: "ApiExternalUserMapping"
    description: "This is the model for external user mapping information in the API,\
      \ v19 and beyond.\nThese can be of 4 types : LDAP group, SAML, SAML attribute\
      \ and External Script.\n<p>"
    example:
      name: "..."
      type: "LDAP"
      uuid: "..."
      authRoles:
      - displayName: "..."
        name: "..."
        uuid: "..."
      - displayName: "..."
        name: "..."
        uuid: "..."
  ApiExternalUserMappingList:
    title: "ApiExternalUserMappingList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiExternalUserMapping"
    description: "A list of external user mappings."
  ApiExternalUserMappingRef:
    type: "object"
    properties:
      uuid:
        type: "string"
        example: "null"
        description: "The uuid of the external user mapping, which uniquely identifies\
          \ it in a CM installation."
      name:
        type: "string"
        example: "null"
        description: "The name of the mapping."
      type:
        description: "The type of the mapping."
        $ref: "#/definitions/ApiExternalUserMappingType"
    title: "ApiExternalUserMappingRef"
    description: "An externalUserMappingRef references an externalUserMapping."
    example:
      uuid: "..."
      name: "..."
      type: "SAML_SCRIPT"
  ApiExternalUserMappingType:
    type: "string"
    title: "ApiExternalUserMappingType"
    description: "Enum for external user mapping types"
    enum:
    - "LDAP"
    - "SAML_SCRIPT"
    - "SAML_ATTRIBUTE"
    - "EXTERNAL_PROGRAM"
  ApiGenerateCmcaArguments:
    title: "ApiGenerateCmcaArguments"
    allOf:
    - $ref: "#/definitions/BaseApiSshCmdArguments"
    - properties:
        location:
          type: "string"
          example: "/opt/cloudera/CMCA"
          description: "The location on disk to store the CMCA directory. If there\
            \ is already a CMCA created there,\nit will be backed up, and a new one\
            \ will be created in its place."
        customCA:
          type: "boolean"
          example: false
          description: "Whether to generate an internal CMCA (false) or use user-provided\
            \ certificates (true).\n\nWhen set to true (user-provided certificates),\
            \ the following other arguments must be given:\n* cmHostCert\n* cmHostKey\n\
            * caCert\n* keystorePasswd\n* truststorePasswd"
        interpretAsFilenames:
          type: "boolean"
          example: true
          description: "Whether the following arguments are interpreted as filenames\
            \ local to the Cloudera Manager\nhost (true, default) or as the actual\
            \ data for that argument:\n* cmHostCert\n* cmHostKey\n* caCert\n* keystorePasswd\n\
            * truststorePasswd\n* trustedCaCerts\n* hostCerts.hostCert\n* hostCerts.hostKey\n\
            \nIf HTTPS has not been enabled on the Cloudera Manager Admin Console\
            \ and API, we\n*strongly* recommend that you pass the arguments as filenames\
            \ local to the Cloudera Manager\nhost (i.e. set to true) to avoid leaking\
            \ sensitive information over the wire in plaintext."
        cmHostCert:
          type: "string"
          example: "host-cert.pem"
          description: "The certificate for the CM host in PEM format. Only used if\
            \ customCA == true."
        cmHostKey:
          type: "string"
          example: "host-key.pem"
          description: "The private key for the CM host in PEM format. Only used if\
            \ customCA == true."
        caCert:
          type: "string"
          example: "ca-cert.pem"
          description: "The certificate for the user-provided certificate authority\
            \ in PEM format. Only used if\ncustomCA == true."
        keystorePasswd:
          type: "string"
          example: "keystore.pw.txt"
          description: "The password used for all Auto-TLS keystores. Only used if\
            \ customCA == true."
        truststorePasswd:
          type: "string"
          example: "truststore.pw.txt"
          description: "The password used for all Auto-TLS truststores. Only used\
            \ if customCA == true."
        trustedCaCerts:
          type: "string"
          example: "cacerts.pem"
          description: "A list of CA certificates that will be imported into the Auto-TLS\
            \ truststore and\ndistributed to all hosts."
        hostCerts:
          type: "array"
          description: "A list of HostCertInfo objects, which associate a hostname\
            \ with the corresponding\ncertificate and private key. Only used if customCA\
            \ == true."
          items:
            $ref: "#/definitions/ApiHostCertInfo"
        configureAllServices:
          type: "boolean"
          description: "Whether to configure all existing services to use Auto-TLS.\
            \ If false, only MGMT services\nwill be configured to use Auto-TLS. Use\
            \ the cluster-level ConfigureAutoTlsServices\ncommand to configure Auto-TLS\
            \ services for a single cluster only.\n\nAll future services will be configured\
            \ to use Auto-TLS regardless of this setting."
    description: "Arguments to generate a Cloudera Manager Certificate Authority (CMCA)."
  ApiGenerateHostCertsArguments:
    title: "ApiGenerateHostCertsArguments"
    allOf:
    - $ref: "#/definitions/BaseApiSshCmdArguments"
    - {}
    description: "Arguments to install certificates on a host"
  ApiHBaseSnapshot:
    type: "object"
    properties:
      snapshotName:
        type: "string"
        example: "null"
        description: "Snapshot name."
      tableName:
        type: "string"
        example: "null"
        description: "Name of the table this snapshot is for."
      creationTime:
        type: "string"
        example: "null"
        description: "Snapshot creation time."
      storage:
        description: "The location where a snapshot is stored."
        $ref: "#/definitions/Storage"
    title: "ApiHBaseSnapshot"
    description: "An HBase snapshot descriptor."
    example:
      snapshotName: "..."
      tableName: "..."
      creationTime: "..."
      storage: "LOCAL"
  ApiHBaseSnapshotError:
    type: "object"
    properties:
      tableName:
        type: "string"
        example: "null"
        description: "Name of the table."
      snapshotName:
        type: "string"
        example: "null"
        description: "Name of the snapshot."
      storage:
        description: "The location of the snapshot."
        $ref: "#/definitions/Storage"
      error:
        type: "string"
        example: "null"
        description: "Description of the error."
    title: "ApiHBaseSnapshotError"
    description: "A HBase snapshot operation error."
    example:
      tableName: "..."
      snapshotName: "..."
      storage: "REMOTE_S3"
      error: "..."
  ApiHBaseSnapshotPolicyArguments:
    type: "object"
    properties:
      tableRegExps:
        type: "array"
        example: "null"
        description: "The regular expressions specifying the tables. Tables matching\
          \ any of them\nwill be eligible for snapshot creation."
        items:
          type: "string"
      storage:
        description: "The location where the snapshots should be stored."
        $ref: "#/definitions/Storage"
    title: "ApiHBaseSnapshotPolicyArguments"
    description: "HBase specific snapshot policy arguments."
    example:
      tableRegExps:
      - "..."
      - "..."
      storage: "LOCAL"
  ApiHBaseSnapshotResult:
    type: "object"
    properties:
      processedTableCount:
        type: "number"
        description: "Number of processed tables."
      processedTables:
        type: "array"
        example: "null"
        description: "The list of processed tables.\n<p/>\nThis is only available\
          \ in the full view."
        items:
          type: "string"
      unprocessedTableCount:
        type: "number"
        description: "Number of unprocessed tables."
      unprocessedTables:
        type: "array"
        example: "null"
        description: "The list of unprocessed tables. Note that tables that are currently\
          \ being\nprocessed will also be included in this list.\n<p/>\nThis is only\
          \ available in the full view."
        items:
          type: "string"
      createdSnapshotCount:
        type: "number"
        description: "Number of snapshots created."
      createdSnapshots:
        type: "array"
        description: "List of snapshots created.\n<p/>\nThis is only available in\
          \ the full view."
        items:
          $ref: "#/definitions/ApiHBaseSnapshot"
      deletedSnapshotCount:
        type: "number"
        description: "Number of snapshots deleted."
      deletedSnapshots:
        type: "array"
        description: "List of snapshots deleted.\n<p/>\nThis is only available in\
          \ the full view."
        items:
          $ref: "#/definitions/ApiHBaseSnapshot"
      creationErrorCount:
        type: "number"
        description: "Number of errors detected when creating snapshots."
      creationErrors:
        type: "array"
        description: "List of errors encountered when creating snapshots.\n<p/>\n\
          This is only available in the full view."
        items:
          $ref: "#/definitions/ApiHBaseSnapshotError"
      deletionErrorCount:
        type: "number"
        description: "Number of errors detected when deleting snapshots."
      deletionErrors:
        type: "array"
        description: "List of errors encountered when deleting snapshots.\n<p/>\n\
          This is only available in the full view."
        items:
          $ref: "#/definitions/ApiHBaseSnapshotError"
    title: "ApiHBaseSnapshotResult"
    description: "Detailed information about an HBase snapshot command."
    example:
      processedTableCount: 12345
      processedTables:
      - "..."
      - "..."
      unprocessedTableCount: 12345
      unprocessedTables:
      - "..."
      - "..."
      createdSnapshotCount: 12345
      createdSnapshots:
      - snapshotName: "..."
        tableName: "..."
        creationTime: "..."
        storage: "REMOTE_S3"
      - snapshotName: "..."
        tableName: "..."
        creationTime: "..."
        storage: "REMOTE_S3"
      deletedSnapshotCount: 12345
      deletedSnapshots:
      - snapshotName: "..."
        tableName: "..."
        creationTime: "..."
        storage: "REMOTE_S3"
      - snapshotName: "..."
        tableName: "..."
        creationTime: "..."
        storage: "LOCAL"
      creationErrorCount: 12345
      creationErrors:
      - tableName: "..."
        snapshotName: "..."
        storage: "LOCAL"
        error: "..."
      - tableName: "..."
        snapshotName: "..."
        storage: "REMOTE_S3"
        error: "..."
      deletionErrorCount: 12345
      deletionErrors:
      - tableName: "..."
        snapshotName: "..."
        storage: "REMOTE_S3"
        error: "..."
      - tableName: "..."
        snapshotName: "..."
        storage: "REMOTE_S3"
        error: "..."
  ApiHdfsCloudReplicationArguments:
    title: "ApiHdfsCloudReplicationArguments"
    allOf:
    - $ref: "#/definitions/ApiHdfsReplicationArguments"
    - properties:
        sourceAccount:
          type: "string"
          example: "null"
          description: ""
        destinationAccount:
          type: "string"
          example: "null"
          description: ""
    description: "Replication arguments for HDFS."
  ApiHdfsDisableHaArguments:
    type: "object"
    properties:
      activeName:
        type: "string"
        example: "null"
        description: "Name of the the NameNode to be kept."
      secondaryName:
        type: "string"
        example: "null"
        description: "Name of the SecondaryNamenode to associate with the active NameNode."
      startDependentServices:
        type: "boolean"
        description: "Whether to re-start dependent services. Defaults to true."
      deployClientConfigs:
        type: "boolean"
        description: "Whether to re-deploy client configurations. Defaults to true."
      disableQuorumStorage:
        type: "boolean"
        description: "Whether to disable Quorum-based Storage. Defaults to false.\n\
          \nAvailable since API v2."
    title: "ApiHdfsDisableHaArguments"
    description: "Arguments used for the HDFS disable HA command."
    example:
      activeName: "..."
      secondaryName: "..."
      startDependentServices: true
      deployClientConfigs: true
      disableQuorumStorage: true
  ApiHdfsFailoverArguments:
    type: "object"
    properties:
      nameservice:
        type: "string"
        example: "null"
        description: "Nameservice for which to enable automatic failover."
      zooKeeperService:
        description: "The ZooKeeper service to use."
        $ref: "#/definitions/ApiServiceRef"
      activeFCName:
        type: "string"
        example: "null"
        description: "Name of the failover controller to create for the active NameNode."
      standByFCName:
        type: "string"
        example: "null"
        description: "Name of the failover controller to create for the stand-by NameNode."
    title: "ApiHdfsFailoverArguments"
    description: "Arguments used when enabling HDFS automatic failover."
    example:
      nameservice: "..."
      zooKeeperService:
        peerName: "..."
        clusterName: "..."
        serviceName: "..."
        serviceDisplayName: "..."
        serviceType: "..."
      activeFCName: "..."
      standByFCName: "..."
  ApiHdfsHaArguments:
    type: "object"
    properties:
      activeName:
        type: "string"
        example: "null"
        description: "Name of the active NameNode."
      activeSharedEditsPath:
        type: "string"
        example: "null"
        description: "Path to the shared edits directory on the active NameNode's\
          \ host.\nIgnored if Quorum-based Storage is being enabled."
      standByName:
        type: "string"
        example: "null"
        description: "Name of the stand-by Namenode."
      standBySharedEditsPath:
        type: "string"
        example: "null"
        description: "Path to the shared edits directory on the stand-by NameNode's\
          \ host.\nIgnored if Quorum-based Storage is being enabled."
      nameservice:
        type: "string"
        example: "null"
        description: "Nameservice that identifies the HA pair."
      startDependentServices:
        type: "boolean"
        description: "Whether to re-start dependent services. Defaults to true."
      deployClientConfigs:
        type: "boolean"
        description: "Whether to re-deploy client configurations. Defaults to true."
      enableQuorumStorage:
        type: "boolean"
        description: "This parameter has been deprecated as of CM 5.0, where HA\n\
          is only supported using Quorum-based Storage.\n<p>\nWhether to enable Quorum-based\
          \ Storage.\n\nEnabling Quorum-based Storage requires a minimum of three\
          \ and\nan odd number of JournalNodes to be created and configured\nbefore\
          \ enabling HDFS HA.\n<p>\nAvailable since API v2."
    title: "ApiHdfsHaArguments"
    description: "Arguments used for HDFS HA commands."
    example:
      activeName: "..."
      activeSharedEditsPath: "..."
      standByName: "..."
      standBySharedEditsPath: "..."
      nameservice: "..."
      startDependentServices: true
      deployClientConfigs: true
  ApiHdfsReplicationArguments:
    type: "object"
    properties:
      sourceService:
        description: "The service to replicate from."
        $ref: "#/definitions/ApiServiceRef"
      sourcePath:
        type: "string"
        example: "null"
        description: "The path to replicate."
      destinationPath:
        type: "string"
        example: "null"
        description: "The destination to replicate to."
      mapreduceServiceName:
        type: "string"
        example: "null"
        description: "The mapreduce service to use for the replication job."
      schedulerPoolName:
        type: "string"
        example: "null"
        description: "Name of the scheduler pool to use when submitting the MapReduce\
          \ job.\nCurrently supports the capacity and fair schedulers. The option\
          \ is\nignored if a different scheduler is configured."
      userName:
        type: "string"
        example: "null"
        description: "The user which will execute the MapReduce job. Required if running\
          \ with\nKerberos enabled."
      sourceUser:
        type: "string"
        example: "null"
        description: "The user which will perform operations on source cluster. Required\
          \ if\nrunning with Kerberos enabled."
      numMaps:
        type: "number"
        description: "The number of mappers to use for the mapreduce replication job."
      dryRun:
        type: "boolean"
        description: "Whether to perform a dry run. Defaults to false."
      bandwidthPerMap:
        type: "number"
        description: "The maximum bandwidth (in MB) per mapper in the mapreduce replication\n\
          job."
      abortOnError:
        type: "boolean"
        description: "Whether to abort on a replication failure. Defaults to false."
      removeMissingFiles:
        type: "boolean"
        description: "Whether to delete destination files that are missing in source.\
          \ Defaults\nto false."
      preserveReplicationCount:
        type: "boolean"
        description: "Whether to preserve the HDFS replication count. Defaults to\
          \ false."
      preserveBlockSize:
        type: "boolean"
        description: "Whether to preserve the HDFS block size. Defaults to false."
      preservePermissions:
        type: "boolean"
        description: "Whether to preserve the HDFS owner, group and permissions. Defaults\
          \ to\nfalse.\nStarting from V10, it also preserves ACLs. Defaults to null\
          \ (no preserve).\nACLs is preserved if both clusters enable ACL support,\
          \ and replication\nignores any ACL related failures."
      logPath:
        type: "string"
        example: "null"
        description: "The HDFS path where the replication log files should be written\
          \ to."
      skipChecksumChecks:
        type: "boolean"
        description: "Whether to skip checksum based file validation during\nreplication.\
          \ Defaults to false."
      skipListingChecksumChecks:
        type: "boolean"
        description: "Whether to skip checksum based file comparison during\nreplication.\
          \ Defaults to false."
      skipTrash:
        type: "boolean"
        description: "Whether to permanently delete destination files that are missing\
          \ in source.\nDefaults to null."
      replicationStrategy:
        description: "The strategy for distributing the file replication tasks among\
          \ the mappers\nof the MR job associated with a replication. Default is\n\
          ReplicationStrategy#STATIC."
        $ref: "#/definitions/ReplicationStrategy"
      preserveXAttrs:
        type: "boolean"
        description: "Whether to preserve XAttrs, default to false\nThis is introduced\
          \ in V10. To preserve XAttrs, both CDH versions\nshould be >= 5.2. Replication\
          \ fails if either cluster does not support\nXAttrs."
      exclusionFilters:
        type: "array"
        example: "null"
        description: "Specify regular expression strings to match full paths of files\
          \ and directories\nmatching source paths and exclude them from the replication.\
          \ Optional.\nAvailable since V11."
        items:
          type: "string"
      raiseSnapshotDiffFailures:
        type: "boolean"
        description: "Flag indicating if failures during snapshotDiff should be ignored\
          \ or not.\nWhen it is set to false then,\nreplication will fallback to full\
          \ copy listing in case of any error in\nsnapshot diff handling and\nit will\
          \ ignore snapshot delete/rename failures at the end of a replication.\n\
          The flag is by default set to false in distcp tool which means it will ignore\n\
          snapshot diff failures and mark replication as success for snapshot\ndelete/rename\
          \ failures.\nIn UI, the flag is set to true by default when source CM Version\
          \ is greater than 5.14."
      destinationCloudAccount:
        type: "string"
        example: "null"
        description: "The cloud account name which is used in direct hive cloud replication,\
          \ if specified."
    title: "ApiHdfsReplicationArguments"
    description: "Replication arguments for HDFS."
    example:
      sourceService:
        peerName: "..."
        clusterName: "..."
        serviceName: "..."
        serviceDisplayName: "..."
        serviceType: "..."
      sourcePath: "..."
      destinationPath: "..."
      mapreduceServiceName: "..."
      schedulerPoolName: "..."
      userName: "..."
      sourceUser: "..."
      numMaps: 12345
      dryRun: true
      bandwidthPerMap: 12345
      abortOnError: true
      removeMissingFiles: true
      preserveReplicationCount: true
      preserveBlockSize: true
      preservePermissions: true
      logPath: "..."
      skipChecksumChecks: true
      skipListingChecksumChecks: true
      skipTrash: true
      replicationStrategy: "STATIC"
      preserveXAttrs: true
      exclusionFilters:
      - "..."
      - "..."
      raiseSnapshotDiffFailures: true
      destinationCloudAccount: "..."
  ApiHdfsReplicationCounter:
    type: "object"
    properties:
      group:
        type: "string"
        example: "null"
        description: ""
      name:
        type: "string"
        example: "null"
        description: ""
      value:
        type: "number"
        description: ""
    title: "ApiHdfsReplicationCounter"
    description: "A counter in an HDFS replication job."
    example:
      group: "..."
      name: "..."
      value: 12345
  ApiHdfsReplicationResult:
    type: "object"
    properties:
      progress:
        type: "number"
        description: "The file copy progress percentage."
      throughput:
        type: "number"
        description: "The data throughput in KB/s."
      remainingTime:
        type: "number"
        description: "The time remaining for mapper phase (seconds)."
      estimatedCompletionTime:
        type: "string"
        example: "null"
        description: "The estimated completion time for the mapper phase."
      counters:
        type: "array"
        description: "The counters collected from the replication job.\n<p/>\nStarting\
          \ with API v4, the full list of counters is only available in the\nfull\
          \ view."
        items:
          $ref: "#/definitions/ApiHdfsReplicationCounter"
      numFilesDryRun:
        type: "number"
        description: "The number of files found to copy."
      numBytesDryRun:
        type: "number"
        description: "The number of bytes found to copy."
      numFilesExpected:
        type: "number"
        description: "The number of files expected to be copied."
      numBytesExpected:
        type: "number"
        description: "The number of bytes expected to be copied."
      numFilesCopied:
        type: "number"
        description: "The number of files actually copied."
      numBytesCopied:
        type: "number"
        description: "The number of bytes actually copied."
      numFilesSkipped:
        type: "number"
        description: "The number of files that were unchanged and thus skipped during\n\
          copying."
      numBytesSkipped:
        type: "number"
        description: "The aggregate number of bytes in the skipped files."
      numFilesDeleted:
        type: "number"
        description: "The number of files deleted since they were present at destination,\
          \ but\nmissing from source."
      numFilesCopyFailed:
        type: "number"
        description: "The number of files for which copy failed."
      numBytesCopyFailed:
        type: "number"
        description: "The aggregate number of bytes in the files for which copy failed."
      setupError:
        type: "string"
        example: "null"
        description: "The error that happened during job setup, if any."
      jobId:
        type: "string"
        example: "null"
        description: "Read-only. The MapReduce job ID for the replication job.\nAvailable\
          \ since API v4.\n<p/>\nThis can be used to query information about the replication\
          \ job from the\nMapReduce server where it was executed. Refer to the \"\
          /activities\"\nresource for services for further details."
      jobDetailsUri:
        type: "string"
        example: "null"
        description: "Read-only. The URI (relative to the CM server's root) where\
          \ to find the\nActivity Monitor page for the job. Available since API v4."
      dryRun:
        type: "boolean"
        description: "Whether this was a dry run."
      snapshottedDirs:
        type: "array"
        example: "null"
        description: "The list of directories for which snapshots were taken and used\
          \ as part of\nthis replication."
        items:
          type: "string"
      runAsUser:
        type: "string"
        example: "null"
        description: "Returns run-as user name.\nAvailable since API v11."
      runOnSourceAsUser:
        type: "string"
        example: "null"
        description: "Returns run-as user name for source cluster.\nAvailable since\
          \ API v18."
      failedFiles:
        type: "array"
        example: "null"
        description: "The list of files that failed during replication.\nAvailable\
          \ since API v11."
        items:
          type: "string"
    title: "ApiHdfsReplicationResult"
    description: "Detailed information about an HDFS replication job."
    example:
      progress: 12345
      throughput: 12345.0
      remainingTime: 12345
      estimatedCompletionTime: "..."
      counters:
      - group: "..."
        name: "..."
        value: 12345
      - group: "..."
        name: "..."
        value: 12345
      numFilesDryRun: 12345
      numBytesDryRun: 12345
      numFilesExpected: 12345
      numBytesExpected: 12345
      numFilesCopied: 12345
      numBytesCopied: 12345
      numFilesSkipped: 12345
      numBytesSkipped: 12345
      numFilesDeleted: 12345
      numFilesCopyFailed: 12345
      numBytesCopyFailed: 12345
      setupError: "..."
      jobId: "..."
      jobDetailsUri: "..."
      dryRun: true
      snapshottedDirs:
      - "..."
      - "..."
      runAsUser: "..."
      runOnSourceAsUser: "..."
      failedFiles:
      - "..."
      - "..."
  ApiHdfsSnapshot:
    type: "object"
    properties:
      path:
        type: "string"
        example: "null"
        description: "Snapshotted path."
      snapshotName:
        type: "string"
        example: "null"
        description: "Snapshot name."
      snapshotPath:
        type: "string"
        example: "null"
        description: "Read-only. Fully qualified path for the snapshot version of\
          \ \"path\".\n<p/>\nFor example, if a snapshot \"s1\" is present at \"/a/.snapshot/s1,\
          \ then the\nsnapshot path corresponding to \"s1\" for path \"/a/b\" will\
          \ be\n\"/a/.snapshot/s1/b\"."
      creationTime:
        type: "string"
        example: "null"
        description: "Snapshot creation time."
    title: "ApiHdfsSnapshot"
    description: "An HDFS snapshot descriptor."
    example:
      path: "..."
      snapshotName: "..."
      snapshotPath: "..."
      creationTime: "..."
  ApiHdfsSnapshotError:
    type: "object"
    properties:
      path:
        type: "string"
        example: "null"
        description: "Path for which the snapshot error occurred."
      snapshotName:
        type: "string"
        example: "null"
        description: "Name of snapshot for which error occurred."
      error:
        type: "string"
        example: "null"
        description: "Description of the error."
    title: "ApiHdfsSnapshotError"
    description: "An HDFS snapshot operation error."
    example:
      path: "..."
      snapshotName: "..."
      error: "..."
  ApiHdfsSnapshotPolicyArguments:
    type: "object"
    properties:
      pathPatterns:
        type: "array"
        example: "null"
        description: "The path patterns specifying the paths. Paths matching any of\
          \ them will be\neligible for snapshot creation.\n<p/>\nThe pattern matching\
          \ characters that can be specific are those supported\nby HDFS. please see\
          \ the documentation for HDFS globs for more details."
        items:
          type: "string"
    title: "ApiHdfsSnapshotPolicyArguments"
    description: "HDFS specific snapshot policy arguments."
    example:
      pathPatterns:
      - "..."
      - "..."
  ApiHdfsSnapshotResult:
    type: "object"
    properties:
      processedPathCount:
        type: "number"
        description: "Number of processed paths."
      processedPaths:
        type: "array"
        example: "null"
        description: "The list of processed paths.\n<p/>\nThis is only available in\
          \ the full view."
        items:
          type: "string"
      unprocessedPathCount:
        type: "number"
        description: "Number of unprocessed paths."
      unprocessedPaths:
        type: "array"
        example: "null"
        description: "The list of unprocessed paths. Note that paths that are currently\
          \ being\nprocessed will also be included in this list.\n<p/>\nThis is only\
          \ available in the full view."
        items:
          type: "string"
      createdSnapshotCount:
        type: "number"
        description: "Number of snapshots created."
      createdSnapshots:
        type: "array"
        description: "List of snapshots created.\n<p/>\nThis is only available in\
          \ the full view."
        items:
          $ref: "#/definitions/ApiHdfsSnapshot"
      deletedSnapshotCount:
        type: "number"
        description: "Number of snapshots deleted."
      deletedSnapshots:
        type: "array"
        description: "List of snapshots deleted.\n<p/>\nThis is only available in\
          \ the full view."
        items:
          $ref: "#/definitions/ApiHdfsSnapshot"
      creationErrorCount:
        type: "number"
        description: "Number of errors detected when creating snapshots."
      creationErrors:
        type: "array"
        description: "List of errors encountered when creating snapshots.\n<p/>\n\
          This is only available in the full view."
        items:
          $ref: "#/definitions/ApiHdfsSnapshotError"
      deletionErrorCount:
        type: "number"
        description: "Number of errors detected when deleting snapshots."
      deletionErrors:
        type: "array"
        description: "List of errors encountered when deleting snapshots.\n<p/>\n\
          This is only available in the full view."
        items:
          $ref: "#/definitions/ApiHdfsSnapshotError"
    title: "ApiHdfsSnapshotResult"
    description: "Detailed information about an HDFS snapshot command."
    example:
      processedPathCount: 12345
      processedPaths:
      - "..."
      - "..."
      unprocessedPathCount: 12345
      unprocessedPaths:
      - "..."
      - "..."
      createdSnapshotCount: 12345
      createdSnapshots:
      - path: "..."
        snapshotName: "..."
        snapshotPath: "..."
        creationTime: "..."
      - path: "..."
        snapshotName: "..."
        snapshotPath: "..."
        creationTime: "..."
      deletedSnapshotCount: 12345
      deletedSnapshots:
      - path: "..."
        snapshotName: "..."
        snapshotPath: "..."
        creationTime: "..."
      - path: "..."
        snapshotName: "..."
        snapshotPath: "..."
        creationTime: "..."
      creationErrorCount: 12345
      creationErrors:
      - path: "..."
        snapshotName: "..."
        error: "..."
      - path: "..."
        snapshotName: "..."
        error: "..."
      deletionErrorCount: 12345
      deletionErrors:
      - path: "..."
        snapshotName: "..."
        error: "..."
      - path: "..."
        snapshotName: "..."
        error: "..."
  ApiHdfsUsageReport:
    title: "ApiHdfsUsageReport"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        lastUpdateTime:
          type: "string"
          example: "null"
          description: "The time when HDFS usage info was last collected. No information\n\
            beyond this time can be provided."
        items:
          type: "array"
          description: "A list of per-user usage information at the requested\ntime\
            \ granularity."
          items:
            $ref: "#/definitions/ApiHdfsUsageReportRow"
    description: "A generic list."
  ApiHdfsUsageReportRow:
    type: "object"
    properties:
      date:
        type: "string"
        example: "null"
        description: "The date of the report row data."
      user:
        type: "string"
        example: "null"
        description: "The user being reported."
      size:
        type: "number"
        description: "Total size (in bytes) of the files owned by this user. This\
          \ does not\ninclude replication in HDFS."
      rawSize:
        type: "number"
        description: "Total size (in bytes) of all the replicas of all the files owned\
          \ by\nthis user."
      numFiles:
        type: "number"
        description: "Number of files owned by this user."
    title: "ApiHdfsUsageReportRow"
    description: ""
    example:
      date: "..."
      user: "..."
      size: 12345
      rawSize: 12345
      numFiles: 12345
  ApiHealthCheck:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Unique name of this health check."
      summary:
        description: "The summary status of this check."
        $ref: "#/definitions/ApiHealthSummary"
      explanation:
        type: "string"
        example: "null"
        description: "The explanation of this health check.\nAvailable since v11."
      suppressed:
        type: "boolean"
        description: "Whether this health test is suppressed. A suppressed health\
          \ test is not\nconsidered when computing an entity's overall health.\nAvailable\
          \ since v11."
    title: "ApiHealthCheck"
    description: "Represents a result from a health test performed by Cloudera Manager\
      \ for an\nentity."
    example:
      name: "..."
      summary: "DISABLED"
      explanation: "..."
      suppressed: true
  ApiHealthSummary:
    type: "string"
    title: "ApiHealthSummary"
    description: "Represents of the high-level health status of a subject in the cluster."
    enum:
    - "DISABLED"
    - "HISTORY_NOT_AVAILABLE"
    - "NOT_AVAILABLE"
    - "GOOD"
    - "CONCERNING"
    - "BAD"
  ApiHiveCloudReplicationArguments:
    title: "ApiHiveCloudReplicationArguments"
    allOf:
    - $ref: "#/definitions/ApiHiveReplicationArguments"
    - properties:
        sourceAccount:
          type: "string"
          example: "null"
          description: ""
        destinationAccount:
          type: "string"
          example: "null"
          description: ""
        cloudRootPath:
          type: "string"
          example: "null"
          description: ""
        replicationOption:
          description: ""
          $ref: "#/definitions/ReplicationOption"
    description: "Replication arguments for Hive services."
  ApiHiveReplicationArguments:
    type: "object"
    properties:
      sourceService:
        description: "The service to replicate from."
        $ref: "#/definitions/ApiServiceRef"
      tableFilters:
        type: "array"
        description: "Filters for tables to include in the replication. Optional.\
          \ If not\nprovided, include all tables in all databases."
        items:
          $ref: "#/definitions/ApiHiveTable"
      exportDir:
        type: "string"
        example: "null"
        description: "Directory, in the HDFS service where the target Hive service's\
          \ data is\nstored, where the export file will be saved. Optional. If not\
          \ provided,\nCloudera Manager will pick a directory for storing the data."
      force:
        type: "boolean"
        description: "Whether to force overwriting of mismatched tables."
      replicateData:
        type: "boolean"
        description: "Whether to replicate table data stored in HDFS.\n<p/>\nIf set,\
          \ the \"hdfsArguments\" property must be set to configure the\nHDFS replication\
          \ job."
      hdfsArguments:
        description: "Arguments for the HDFS replication job.\n<p/>\nThis must be\
          \ provided when choosing to replicate table data stored in HDFS.\nThe \"\
          sourceService\", \"sourcePath\" and \"dryRun\" properties of the HDFS\n\
          arguments are ignored; their values are derived from the Hive replication's\n\
          information.\n<p/>\nThe \"destinationPath\" property is used slightly differently\
          \ from the\nusual HDFS replication jobs. It is used to map the root path\
          \ of the\nsource service into the target service. It may be omitted, in\
          \ which\ncase the source and target paths will match.\n<p/>\nExample: if\
          \ the destination path is set to \"/new_root\", a \"/foo/bar\" path\nin\
          \ the source will be stored in \"/new_root/foo/bar\" in the target."
        $ref: "#/definitions/ApiHdfsReplicationArguments"
      replicateImpalaMetadata:
        type: "boolean"
        description: "Whether to replicate the impala metadata. (i.e. the metadata\
          \ for impala\nUDFs and their corresponding binaries in HDFS)."
      runInvalidateMetadata:
        type: "boolean"
        description: "Whether to run invalidate metadata query or not"
      dryRun:
        type: "boolean"
        description: "Whether to perform a dry run. Defaults to false."
      numThreads:
        type: "number"
        description: "Number of threads to use in multi-threaded export/import phase"
    title: "ApiHiveReplicationArguments"
    description: "Replication arguments for Hive services."
    example:
      sourceService:
        peerName: "..."
        clusterName: "..."
        serviceName: "..."
        serviceDisplayName: "..."
        serviceType: "..."
      tableFilters:
      - database: "..."
        tableName: "..."
      - database: "..."
        tableName: "..."
      exportDir: "..."
      force: true
      replicateData: true
      hdfsArguments:
        sourceService:
          peerName: "..."
          clusterName: "..."
          serviceName: "..."
          serviceDisplayName: "..."
          serviceType: "..."
        sourcePath: "..."
        destinationPath: "..."
        mapreduceServiceName: "..."
        schedulerPoolName: "..."
        userName: "..."
        sourceUser: "..."
        numMaps: 12345
        dryRun: true
        bandwidthPerMap: 12345
        abortOnError: true
        removeMissingFiles: true
        preserveReplicationCount: true
        preserveBlockSize: true
        preservePermissions: true
        logPath: "..."
        skipChecksumChecks: true
        skipListingChecksumChecks: true
        skipTrash: true
        replicationStrategy: "STATIC"
        preserveXAttrs: true
        exclusionFilters:
        - "..."
        - "..."
        raiseSnapshotDiffFailures: true
        destinationCloudAccount: "..."
      replicateImpalaMetadata: true
      runInvalidateMetadata: true
      dryRun: true
      numThreads: 12345
  ApiHiveReplicationError:
    type: "object"
    properties:
      database:
        type: "string"
        example: "null"
        description: "Name of the database."
      tableName:
        type: "string"
        example: "null"
        description: "Name of the table."
      impalaUDF:
        type: "string"
        example: "null"
        description: "UDF signature, includes the UDF name and parameter types."
      hiveUDF:
        type: "string"
        example: "null"
        description: "Hive UDF signature, includes the UDF name and parameter types."
      error:
        type: "string"
        example: "null"
        description: "Description of the error."
    title: "ApiHiveReplicationError"
    description: "A Hive replication error."
    example:
      database: "..."
      tableName: "..."
      impalaUDF: "..."
      hiveUDF: "..."
      error: "..."
  ApiHiveReplicationResult:
    type: "object"
    properties:
      phase:
        type: "string"
        example: "null"
        description: "Phase the replication is in.\n<p/>\nIf the replication job is\
          \ still active, this will contain a string\ndescribing the current phase.\
          \ This will be one of: EXPORT, DATA or\nIMPORT, for, respectively, exporting\
          \ the source metastore information,\nreplicating table data (if configured),\
          \ and importing metastore\ninformation in the target.\n<p/>\nThis value\
          \ will not be present if the replication is not active.\n<p/>\nAvailable\
          \ since API v4."
      tableCount:
        type: "number"
        description: "Number of tables that were successfully replicated. Available\
          \ since API v4."
      tables:
        type: "array"
        description: "The list of tables successfully replicated.\n<p/>\nSince API\
          \ v4, this is only available in the full view."
        items:
          $ref: "#/definitions/ApiHiveTable"
      impalaUDFCount:
        type: "number"
        description: "Number of impala UDFs that were successfully replicated. Available\
          \ since\nAPI v6."
      hiveUDFCount:
        type: "number"
        description: "Number of hive UDFs that were successfully replicated. Available\
          \ since\nAPI v14."
      impalaUDFs:
        type: "array"
        description: "The list of Impala UDFs successfully replicated. Available since\
          \ API v6\nin the full view."
        items:
          $ref: "#/definitions/ApiImpalaUDF"
      hiveUDFs:
        type: "array"
        description: "The list of Impala UDFs successfully replicated. Available since\
          \ API v6\nin the full view."
        items:
          $ref: "#/definitions/ApiHiveUDF"
      errorCount:
        type: "number"
        description: "Number of errors detected during replication job.\nAvailable\
          \ since API v4."
      errors:
        type: "array"
        description: "List of errors encountered during replication.\n<p/>\nSince\
          \ API v4, this is only available in the full view."
        items:
          $ref: "#/definitions/ApiHiveReplicationError"
      dataReplicationResult:
        description: "Result of table data replication, if performed."
        $ref: "#/definitions/ApiHdfsReplicationResult"
      dryRun:
        type: "boolean"
        description: "Whether this was a dry run."
      runAsUser:
        type: "string"
        example: "null"
        description: "Name of the of proxy user, if any.\nAvailable since API v11."
      runOnSourceAsUser:
        type: "string"
        example: "null"
        description: "Name of the source proxy user, if any.\nAvailable since API\
          \ v18."
      statsAvailable:
        type: "boolean"
        description: "Whether stats are available to display or not.\nAvailable since\
          \ API v19."
      dbProcessed:
        type: "number"
        description: "Number of Db's Imported/Exported.\nAvailable since API v19."
      tableProcessed:
        type: "number"
        description: "Number of Tables Imported/Exported.\nAvailable since API v19."
      partitionProcessed:
        type: "number"
        description: "Number of Partitions Imported/Exported.\nAvailable since API\
          \ v19."
      functionProcessed:
        type: "number"
        description: "Number of Functions Imported/Exported.\nAvailable since API\
          \ v19."
      indexProcessed:
        type: "number"
        description: "Number of Indexes Imported/Exported.\nAvailable since API v19."
      statsProcessed:
        type: "number"
        description: "Number of Table and Partitions Statistics Imported/Exported.\n\
          Available since API v19."
      dbExpected:
        type: "number"
        description: "Number of Db's Expected.\nAvailable since API v19."
      tableExpected:
        type: "number"
        description: "Number of Tables Expected.\nAvailable since API v19."
      partitionExpected:
        type: "number"
        description: "Number of Partitions Expected.\nAvailable since API v19."
      functionExpected:
        type: "number"
        description: "Number of Functions Expected.\nAvailable since API v19."
      indexExpected:
        type: "number"
        description: "Number of Indexes Expected.\nAvailable since API v19."
      statsExpected:
        type: "number"
        description: "Number of Table and Partition Statistics Expected.\nAvailable\
          \ since API v19."
    title: "ApiHiveReplicationResult"
    description: "Detailed information about a Hive replication job."
    example:
      phase: "..."
      tableCount: 12345
      tables:
      - database: "..."
        tableName: "..."
      - database: "..."
        tableName: "..."
      impalaUDFCount: 12345
      hiveUDFCount: 12345
      impalaUDFs:
      - database: "..."
        signature: "..."
      - database: "..."
        signature: "..."
      hiveUDFs:
      - database: "..."
        signature: "..."
      - database: "..."
        signature: "..."
      errorCount: 12345
      errors:
      - database: "..."
        tableName: "..."
        impalaUDF: "..."
        hiveUDF: "..."
        error: "..."
      - database: "..."
        tableName: "..."
        impalaUDF: "..."
        hiveUDF: "..."
        error: "..."
      dataReplicationResult:
        progress: 12345
        throughput: 12345.0
        remainingTime: 12345
        estimatedCompletionTime: "..."
        counters:
        - group: "..."
          name: "..."
          value: 12345
        - group: "..."
          name: "..."
          value: 12345
        numFilesDryRun: 12345
        numBytesDryRun: 12345
        numFilesExpected: 12345
        numBytesExpected: 12345
        numFilesCopied: 12345
        numBytesCopied: 12345
        numFilesSkipped: 12345
        numBytesSkipped: 12345
        numFilesDeleted: 12345
        numFilesCopyFailed: 12345
        numBytesCopyFailed: 12345
        setupError: "..."
        jobId: "..."
        jobDetailsUri: "..."
        dryRun: true
        snapshottedDirs:
        - "..."
        - "..."
        runAsUser: "..."
        runOnSourceAsUser: "..."
        failedFiles:
        - "..."
        - "..."
      dryRun: true
      runAsUser: "..."
      runOnSourceAsUser: "..."
      statsAvailable: true
      dbProcessed: 12345
      tableProcessed: 12345
      partitionProcessed: 12345
      functionProcessed: 12345
      indexProcessed: 12345
      statsProcessed: 12345
      dbExpected: 12345
      tableExpected: 12345
      partitionExpected: 12345
      functionExpected: 12345
      indexExpected: 12345
      statsExpected: 12345
  ApiHiveTable:
    type: "object"
    properties:
      database:
        type: "string"
        example: "null"
        description: "Name of the database to which this table belongs."
      tableName:
        type: "string"
        example: "null"
        description: "Name of the table. When used as input for a replication job,\
          \ this can\nbe a regular expression that matches several table names. Refer\
          \ to the\nHive documentation for the syntax of regular expressions."
    title: "ApiHiveTable"
    description: "A Hive table identifier."
    example:
      database: "..."
      tableName: "..."
  ApiHiveUDF:
    type: "object"
    properties:
      database:
        type: "string"
        example: "null"
        description: "Name of the database to which this UDF belongs."
      signature:
        type: "string"
        example: "null"
        description: "UDF signature, includes the UDF name and parameter types."
    title: "ApiHiveUDF"
    description: "An hive UDF identifier."
    example:
      database: "..."
      signature: "..."
  ApiHost:
    type: "object"
    properties:
      hostId:
        type: "string"
        example: "null"
        description: "A unique host identifier.\nThis is not the same as the hostname\
          \ (FQDN). It is a distinct\nvalue that remains the same even if the hostname\
          \ changes."
      ipAddress:
        type: "string"
        example: "null"
        description: "The host IP address. This field is not mutable after the initial\
          \ creation."
      hostname:
        type: "string"
        example: "null"
        description: "The hostname. This field is not mutable after the initial creation."
      rackId:
        type: "string"
        example: "null"
        description: "The rack ID for this host."
      lastHeartbeat:
        type: "string"
        example: "null"
        description: "Readonly. Requires \"full\" view.\nWhen the host agent sent\
          \ the last heartbeat."
      roleRefs:
        type: "array"
        description: "Readonly. Requires \"full\" view.\nThe list of roles assigned\
          \ to this host."
        items:
          $ref: "#/definitions/ApiRoleRef"
      healthSummary:
        description: "Readonly. Requires \"full\" view.\nThe high-level health status\
          \ of this host."
        $ref: "#/definitions/ApiHealthSummary"
      healthChecks:
        type: "array"
        description: "Readonly. Requires \"full\" view.\nThe list of health checks\
          \ performed on the host, with their results."
        items:
          $ref: "#/definitions/ApiHealthCheck"
      hostUrl:
        type: "string"
        example: "null"
        description: "Readonly.\nA URL into the Cloudera Manager web UI for this specific\
          \ host."
      maintenanceMode:
        type: "boolean"
        description: "Readonly. Whether the host is in maintenance mode.\nAvailable\
          \ since API v2."
      commissionState:
        description: "Readonly. The commission state of this role.\nAvailable since\
          \ API v2."
        $ref: "#/definitions/ApiCommissionState"
      maintenanceOwners:
        type: "array"
        example: "null"
        description: "Readonly. The list of objects that trigger this host to be in\n\
          maintenance mode.\nAvailable since API v2."
        items:
          $ref: "#/definitions/ApiEntityType"
      config:
        description: ""
        $ref: "#/definitions/ApiConfigList"
      numCores:
        type: "number"
        description: "Readonly. The number of logical CPU cores on this host. Only\
          \ populated\nafter the host has heartbeated to the server.\nAvailable since\
          \ API v4."
      numPhysicalCores:
        type: "number"
        description: "Readonly. The number of physical CPU cores on this host. Only\
          \ populated\nafter the host has heartbeated to the server.\nAvailable since\
          \ API v9."
      totalPhysMemBytes:
        type: "number"
        description: "Readonly. The amount of physical RAM on this host, in bytes.\
          \ Only\npopulated after the host has heartbeated to the server.\nAvailable\
          \ since API v4."
      entityStatus:
        description: "Readonly. The entity status for this host.\nAvailable since\
          \ API v11."
        $ref: "#/definitions/ApiEntityStatus"
      clusterRef:
        description: "Readonly. A reference to the enclosing cluster. This might be\
          \ null if the\nhost is not yet assigned to a cluster.\nAvailable since API\
          \ v11."
        $ref: "#/definitions/ApiClusterRef"
    title: "ApiHost"
    description: "This is the model for a host in the system."
    example:
      hostId: "..."
      ipAddress: "..."
      hostname: "..."
      rackId: "..."
      lastHeartbeat: "..."
      roleRefs:
      - clusterName: "..."
        serviceName: "..."
        roleName: "..."
      - clusterName: "..."
        serviceName: "..."
        roleName: "..."
      healthSummary: "GOOD"
      healthChecks:
      - name: "..."
        summary: "GOOD"
        explanation: "..."
        suppressed: true
      - name: "..."
        summary: "GOOD"
        explanation: "..."
        suppressed: true
      hostUrl: "..."
      maintenanceMode: true
      commissionState: "COMMISSIONED"
      maintenanceOwners:
      - "HOST"
      - "HOST"
      config:
        items:
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "OK"
          validationMessage: "..."
          validationWarningsSuppressed: true
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "OK"
          validationMessage: "..."
          validationWarningsSuppressed: true
      numCores: 12345
      numPhysicalCores: 12345
      totalPhysMemBytes: 12345
      entityStatus: "CONCERNING_HEALTH"
      clusterRef:
        clusterName: "..."
        displayName: "..."
  ApiHostCertInfo:
    type: "object"
    properties:
      hostname:
        type: "string"
        example: "null"
        description: "The FQDN of a host in the deployment."
      certificate:
        type: "string"
        example: "host-cert.pem"
        description: "The certificate for this host in PEM format."
      key:
        type: "string"
        example: "host-key.pem"
        description: "The private key for this host in PEM format."
    title: "ApiHostCertInfo"
    description: "Associates a hostname with its corresponding certificate and private\
      \ key"
    example:
      hostname: "..."
      certificate: "host-cert.pem"
      key: "host-key.pem"
  ApiHostInstallArguments:
    type: "object"
    properties:
      hostNames:
        type: "array"
        example: "null"
        description: "List of hosts to configure for use with Cloudera Manager.\n\
          A host may be specified by a hostname (FQDN) or an\nIP address."
        items:
          type: "string"
      sshPort:
        type: "number"
        description: "SSH port. If unset, defaults to 22."
      userName:
        type: "string"
        example: "null"
        description: "The username used to authenticate with the hosts.\nRoot access\
          \ to your hosts is required to install Cloudera packages.\nThe installer\
          \ will connect to your hosts via SSH and log in either\ndirectly as root\
          \ or as another user with password-less sudo\nprivileges to become root."
      password:
        type: "string"
        example: "null"
        description: "The password used to authenticate with the hosts.\nSpecify either\
          \ this or a private key.\nFor password-less login, use an empty string as\n\
          password."
      privateKey:
        type: "string"
        example: "null"
        description: "The private key to authenticate with the hosts.\nSpecify either\
          \ this or a password.\n<br>\nThe private key, if specified, needs to be\
          \ a\nstandard PEM-encoded key as a single string, with all line breaks\n\
          replaced with the line-feed control character '\\n'.\n<br>\nA value will\
          \ typically look like the following string:\n<br>\n-----BEGIN RSA PRIVATE\
          \ KEY-----\\n[base-64 encoded key]\\n-----END RSA PRIVATE KEY-----\n<br>"
      passphrase:
        type: "string"
        example: "null"
        description: "The passphrase associated with the private key\nused to authenticate\
          \ with the hosts (optional)."
      parallelInstallCount:
        type: "number"
        description: "Number of simultaneous installations.\nDefaults to 10. Running\
          \ a large number of\ninstallations at once can consume large\namounts of\
          \ network bandwidth and other system\nresources."
      cmRepoUrl:
        type: "string"
        example: "null"
        description: "The Cloudera Manager repository URL to use (optional).\nExample\
          \ for SLES, Redhat or Debian based distributions:\nhttps://archive.cloudera.com/cm6/6.0.0"
      gpgKeyCustomUrl:
        type: "string"
        example: "null"
        description: "The Cloudera Manager public GPG key (optional).\nExample for\
          \ SLES, Redhat or other RPM based distributions:\nhttps://archive.cloudera.com/cm5/redhat/5/x86_64/cm/RPM-GPG-KEY-cloudera\n\
          Example for Ubuntu or other Debian based distributions:\nhttps://archive.cloudera.com/cm5/ubuntu/lucid/amd64/cm/archive.key"
      javaInstallStrategy:
        type: "string"
        example: "null"
        description: "Added in v8: Strategy to use for JDK installation. Valid values\
          \ are\n1. AUTO (default): Cloudera Manager will install the JDK versions\
          \ that are\nrequired when the \"AUTO\" option is selected.\nCloudera Manager\
          \ may overwrite any of the existing JDK installations.\n2. NONE: Cloudera\
          \ Manager will not install any JDK when \"NONE\" option is selected.\nIt\
          \ should be used if an existing JDK installation has to be used."
      unlimitedJCE:
        type: "boolean"
        description: "Added in v8: Flag for unlimited strength JCE policy files installation\n\
          If unset, defaults to false"
      gpgKeyOverrideBundle:
        type: "string"
        example: "null"
        description: "The Cloudera Manager public GPG key (optional). This points\
          \ to the actual bundle contents\nand not a URL."
    title: "ApiHostInstallArguments"
    description: "Arguments to perform installation on one\nor more hosts"
    example:
      hostNames:
      - "..."
      - "..."
      sshPort: 12345
      userName: "..."
      password: "..."
      privateKey: "..."
      passphrase: "..."
      parallelInstallCount: 12345
      cmRepoUrl: "..."
      gpgKeyCustomUrl: "..."
      javaInstallStrategy: "..."
      unlimitedJCE: true
      gpgKeyOverrideBundle: "..."
  ApiHostList:
    title: "ApiHostList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiHost"
    description: "A list of ApiHost objects"
  ApiHostNameList:
    title: "ApiHostNameList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          example: "null"
          description: "List of host names."
          items:
            type: "string"
    description: "A list of host names."
  ApiHostRef:
    type: "object"
    properties:
      hostId:
        type: "string"
        example: "null"
        description: "The unique host ID."
      hostname:
        type: "string"
        example: "null"
        description: "The hostname. Available since v31."
    title: "ApiHostRef"
    description: "A reference to a host."
    example:
      hostId: "..."
      hostname: "..."
  ApiHostRefList:
    title: "ApiHostRefList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiHostRef"
    description: "A list of host references."
  ApiHostTemplate:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The name of the host template. Unique across clusters."
      clusterRef:
        description: "Readonly. A reference to the cluster the host template belongs\
          \ to."
        $ref: "#/definitions/ApiClusterRef"
      roleConfigGroupRefs:
        type: "array"
        description: "The role config groups belonging to this host tempalte."
        items:
          $ref: "#/definitions/ApiRoleConfigGroupRef"
    title: "ApiHostTemplate"
    description: "A host template belongs to a cluster and contains a set of role\
      \ config\ngroups for slave roles (such as DataNodes and TaskTrackers) from services\n\
      in the cluster. At most one role config group per role type can be present\n\
      in a host template. Host templates can be applied to fresh hosts (those with\n\
      no roles on them) in order to create a role for each of the role groups on\n\
      each host."
    example:
      name: "..."
      clusterRef:
        clusterName: "..."
        displayName: "..."
      roleConfigGroupRefs:
      - roleConfigGroupName: "..."
      - roleConfigGroupName: "..."
  ApiHostTemplateList:
    title: "ApiHostTemplateList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiHostTemplate"
    description: "A list of host templates."
  ApiHostsPerfInspectorArgs:
    type: "object"
    properties:
      sourceHostList:
        description: "Required list of host names which'll act as source for running\
          \ network diagnostics test."
        $ref: "#/definitions/ApiHostNameList"
      targetHostList:
        description: "Required list of host names which'll act as target for running\
          \ network diagnostics test."
        $ref: "#/definitions/ApiHostNameList"
      pingArgs:
        description: "Optional ping request arguments.\nIf not specified, default\
          \ arguments will be used for ping test."
        $ref: "#/definitions/ApiPerfInspectorPingArgs"
    title: "ApiHostsPerfInspectorArgs"
    description: "Arguments used for the Cloudera Manager level performance inspector.\n\
      Network diagnostics will be run from every host in sourceHostList to every host\n\
      in targetHostList."
    example:
      sourceHostList:
        items:
        - "..."
        - "..."
      targetHostList:
        items:
        - "..."
        - "..."
      pingArgs:
        pingTimeoutSecs: 10
        pingCount: 10
        pingPacketSizeBytes: 56
  ApiImpalaCancelResponse:
    type: "object"
    properties:
      warning:
        type: "string"
        example: "null"
        description: "The warning response. If there was no warning this will be null."
    title: "ApiImpalaCancelResponse"
    description: "The response from an Impala cancel query response."
    example:
      warning: "..."
  ApiImpalaQuery:
    type: "object"
    properties:
      queryId:
        type: "string"
        example: "null"
        description: "The query id."
      statement:
        type: "string"
        example: "null"
        description: "The SQL statement for the query."
      queryType:
        type: "string"
        example: "null"
        description: "The query type. The possible values are: DML, DDL, QUERY and\
          \ UNKNOWN.\nSee the Impala documentation for more details."
      queryState:
        type: "string"
        example: "null"
        description: "The query state. The possible values are: CREATED, INITIALIZED,\
          \ COMPILED,\nRUNNING, FINISHED, EXCEPTION, and UNKNOWN.\nSee the Impala\
          \ documentation for more details."
      startTime:
        type: "string"
        example: "null"
        description: "The time the query was issued."
      endTime:
        type: "string"
        example: "null"
        description: "The time the query finished. If the query hasn't finished then\
          \ this\nwill return null."
      rowsProduced:
        type: "number"
        description: "The number of rows produced by the query. If the query hasn't\
          \ completed\nthis will return null."
      attributes:
        type: "object"
        example: "null"
        description: "A map of additional query attributes which is generated by Cloudera\
          \ Manager."
        additionalProperties:
          type: "string"
      user:
        type: "string"
        example: "null"
        description: "The user who issued this query."
      coordinator:
        description: "The host of the Impala Daemon coordinating the query"
        $ref: "#/definitions/ApiHostRef"
      detailsAvailable:
        type: "boolean"
        description: "Whether we have a detailed runtime profile available for the\
          \ query.\nThis profile is available at the endpoint /queries/{QUERY_ID}."
      database:
        type: "string"
        example: "null"
        description: "The database on which this query was issued."
      durationMillis:
        type: "number"
        description: "The duration of the query in milliseconds. If the query hasn't\
          \ completed\nthen this will return null."
    title: "ApiImpalaQuery"
    description: "Represents an Impala Query."
    example:
      queryId: "..."
      statement: "..."
      queryType: "..."
      queryState: "..."
      startTime: "..."
      endTime: "..."
      rowsProduced: 12345
      attributes:
        property1: "..."
        property2: "..."
      user: "..."
      coordinator:
        hostId: "..."
        hostname: "..."
      detailsAvailable: true
      database: "..."
      durationMillis: 12345
  ApiImpalaQueryAttribute:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The name of the attribute. This name can be used in filters,\
          \ for example\n'user' could be used in the filter 'user = root'."
      type:
        type: "string"
        example: "null"
        description: "The type of the attribute. Valid types are STRING, NUMBER, BOOLEAN,\
          \ BYTES,\nMILLISECONDS, BYTES_PER_SECOND, BYTE_SECONDS."
      displayName:
        type: "string"
        example: "null"
        description: "The display name for the attribute."
      supportsHistograms:
        type: "boolean"
        description: "Whether the Service Monitor can generate a histogram of the\
          \ distribution\nof the attribute across queries."
      description:
        type: "string"
        example: "null"
        description: "The description of the attribute."
    title: "ApiImpalaQueryAttribute"
    description: "Metadata about an Impala query attribute."
    example:
      name: "..."
      type: "..."
      displayName: "..."
      supportsHistograms: true
      description: "..."
  ApiImpalaQueryAttributeList:
    title: "ApiImpalaQueryAttributeList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiImpalaQueryAttribute"
    description: "The list of all the attributes that are applicable to Impala queries."
  ApiImpalaQueryDetailsResponse:
    type: "object"
    properties:
      details:
        type: "string"
        example: "null"
        description: "The details for this query. Two formats are supported:\n<ul>\n\
          <li>\n'text': this is a text based, human readable representation of the\n\
          Impala runtime profile.\n</li>\n<li>\n'thrift_encoded': this a compact-thrift,\
          \ base64 encoded representation\nof the impala RuntimeProfile.thrift object.\
          \ See the Impala documentation\nfor more details.\n</li>\n</ul>"
    title: "ApiImpalaQueryDetailsResponse"
    description: "A query details response."
    example:
      details: "..."
  ApiImpalaQueryResponse:
    type: "object"
    properties:
      queries:
        type: "array"
        description: "The list of queries for this response."
        items:
          $ref: "#/definitions/ApiImpalaQuery"
      warnings:
        type: "array"
        example: "null"
        description: "This list of warnings for this response."
        items:
          type: "string"
    title: "ApiImpalaQueryResponse"
    description: "The response contains a list of queries and warnings."
    example:
      queries:
      - queryId: "..."
        statement: "..."
        queryType: "..."
        queryState: "..."
        startTime: "..."
        endTime: "..."
        rowsProduced: 12345
        attributes:
          property1: "..."
          property2: "..."
        user: "..."
        coordinator:
          hostId: "..."
          hostname: "..."
        detailsAvailable: true
        database: "..."
        durationMillis: 12345
      - queryId: "..."
        statement: "..."
        queryType: "..."
        queryState: "..."
        startTime: "..."
        endTime: "..."
        rowsProduced: 12345
        attributes:
          property1: "..."
          property2: "..."
        user: "..."
        coordinator:
          hostId: "..."
          hostname: "..."
        detailsAvailable: true
        database: "..."
        durationMillis: 12345
      warnings:
      - "..."
      - "..."
  ApiImpalaRoleDiagnosticsArgs:
    type: "object"
    properties:
      ticketNumber:
        type: "string"
        example: "null"
        description: "The support ticket number to attach to this data collection."
      comments:
        type: "string"
        example: "null"
        description: "Comments to include with this data collection."
      stacksCount:
        type: "number"
        description: ""
      stacksIntervalSeconds:
        type: "number"
        description: "Interval between stack collections."
      jmap:
        type: "boolean"
        description: ""
      gcore:
        type: "boolean"
        description: ""
      minidumpsCount:
        type: "number"
        description: ""
      minidumpsIntervalSeconds:
        type: "number"
        description: ""
      phoneHome:
        type: "boolean"
        description: ""
    title: "ApiImpalaRoleDiagnosticsArgs"
    description: "Arguments used for Rolling Restart commands."
    example:
      ticketNumber: "..."
      comments: "..."
      stacksCount: 12345
      stacksIntervalSeconds: 12345
      jmap: true
      gcore: true
      minidumpsCount: 12345
      minidumpsIntervalSeconds: 12345
      phoneHome: true
  ApiImpalaTenantUtilization:
    type: "object"
    properties:
      tenantName:
        type: "string"
        example: "null"
        description: "Name of the tenant."
      totalQueries:
        type: "number"
        description: "Total number of queries submitted to Impala."
      successfulQueries:
        type: "number"
        description: "Number of queries that finished successfully."
      oomQueries:
        type: "number"
        description: "Number of queries that failed due to insufficient memory."
      timeOutQueries:
        type: "number"
        description: "Number of queries that timed out while waiting for resources\
          \ in a pool."
      rejectedQueries:
        type: "number"
        description: "Number of queries that were rejected by Impala because the pool\
          \ was full."
      avgWaitTimeInQueue:
        type: "number"
        description: "Average time, in milliseconds, spent by a query in an Impala\
          \ pool while waiting for resources."
      peakAllocationTimestampMS:
        type: "number"
        description: "The time when Impala reserved the maximum amount of memory for\
          \ queries."
      maxAllocatedMemory:
        type: "number"
        description: "The maximum memory (in bytes) that was reserved by Impala for\
          \ executing queries."
      maxAllocatedMemoryPercentage:
        type: "number"
        description: "The maximum percentage of memory that was reserved by Impala\
          \ for executing queries."
      utilizedAtMaxAllocated:
        type: "number"
        description: "The amount of memory (in bytes) used by Impala for running queries\
          \ at the\ntime when maximum memory was reserved."
      utilizedAtMaxAllocatedPercentage:
        type: "number"
        description: "The percentage of memory used by Impala for running queries\
          \ at the\ntime when maximum memory was reserved."
      peakUsageTimestampMS:
        type: "number"
        description: "The time when Impala used the maximum amount of memory for queries."
      maxUtilizedMemory:
        type: "number"
        description: "The maximum memory (in bytes) that was used by Impala for executing\
          \ queries."
      maxUtilizedMemoryPercentage:
        type: "number"
        description: "The maximum percentage of memory that was used by Impala for\
          \ executing queries."
      allocatedAtMaxUtilized:
        type: "number"
        description: "The amount of memory (in bytes) reserved by Impala at the time\
          \ when it was using the\nmaximum memory for executing queries."
      allocatedAtMaxUtilizedPercentage:
        type: "number"
        description: "The percentage of memory reserved by Impala at the time when\
          \ it was using the\nmaximum memory for executing queries."
      distributionUtilizedByImpalaDaemon:
        description: "Distribution of memory used per Impala daemon for executing\
          \ queries at\nthe time Impala used the maximum memory."
        $ref: "#/definitions/ApiImpalaUtilizationHistogram"
      distributionAllocatedByImpalaDaemon:
        description: "Distribution of memory reserved per Impala daemon for executing\
          \ queries at\nthe time Impala used the maximum memory."
        $ref: "#/definitions/ApiImpalaUtilizationHistogram"
      avgSpilledMemory:
        type: "number"
        description: "Average spill per query."
      maxSpilledMemory:
        type: "number"
        description: "Maximum spill per query."
    title: "ApiImpalaTenantUtilization"
    description: "Utilization report information of a tenant of Impala application."
    example:
      tenantName: "..."
      totalQueries: 12345.0
      successfulQueries: 12345.0
      oomQueries: 12345.0
      timeOutQueries: 12345.0
      rejectedQueries: 12345.0
      avgWaitTimeInQueue: 12345.0
      peakAllocationTimestampMS: 12345
      maxAllocatedMemory: 12345.0
      maxAllocatedMemoryPercentage: 12345.0
      utilizedAtMaxAllocated: 12345.0
      utilizedAtMaxAllocatedPercentage: 12345.0
      peakUsageTimestampMS: 12345
      maxUtilizedMemory: 12345.0
      maxUtilizedMemoryPercentage: 12345.0
      allocatedAtMaxUtilized: 12345.0
      allocatedAtMaxUtilizedPercentage: 12345.0
      distributionUtilizedByImpalaDaemon:
        bins:
          items:
          - {}
          - {}
      distributionAllocatedByImpalaDaemon:
        bins:
          items:
          - {}
          - {}
      avgSpilledMemory: 12345.0
      maxSpilledMemory: 12345.0
  ApiImpalaTenantUtilizationList:
    title: "ApiImpalaTenantUtilizationList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiImpalaTenantUtilization"
    description: "A list of impala tenant utilization reports."
  ApiImpalaUDF:
    type: "object"
    properties:
      database:
        type: "string"
        example: "null"
        description: "Name of the database to which this UDF belongs."
      signature:
        type: "string"
        example: "null"
        description: "UDF signature, includes the UDF name and parameter types."
    title: "ApiImpalaUDF"
    description: "An impala UDF identifier."
    example:
      database: "..."
      signature: "..."
  ApiImpalaUtilization:
    type: "object"
    properties:
      totalQueries:
        type: "number"
        description: "Total number of queries submitted to Impala."
      successfulQueries:
        type: "number"
        description: "Number of queries that finished successfully."
      oomQueries:
        type: "number"
        description: "Number of queries that failed due to insufficient memory."
      timeOutQueries:
        type: "number"
        description: "Number of queries that timed out while waiting for resources\
          \ in a pool."
      rejectedQueries:
        type: "number"
        description: "Number of queries that were rejected by Impala because the pool\
          \ was full."
      successfulQueriesPercentage:
        type: "number"
        description: "Percentage of queries that finished successfully."
      oomQueriesPercentage:
        type: "number"
        description: "Percentage of queries that failed due to insufficient memory."
      timeOutQueriesPercentage:
        type: "number"
        description: "Percentage of queries that timed out while waiting for resources\
          \ in a pool."
      rejectedQueriesPercentage:
        type: "number"
        description: "Percentage of queries that were rejected by Impala because the\
          \ pool was full."
      avgWaitTimeInQueue:
        type: "number"
        description: "Average time, in milliseconds, spent by a query in an Impala\
          \ pool while waiting for resources."
      peakAllocationTimestampMS:
        type: "number"
        description: "The time when Impala reserved the maximum amount of memory for\
          \ queries."
      maxAllocatedMemory:
        type: "number"
        description: "The maximum memory (in bytes) that was reserved by Impala for\
          \ executing queries."
      maxAllocatedMemoryPercentage:
        type: "number"
        description: "The maximum percentage of memory that was reserved by Impala\
          \ for executing queries."
      utilizedAtMaxAllocated:
        type: "number"
        description: "The amount of memory (in bytes) used by Impala for running queries\
          \ at the\ntime when maximum memory was reserved."
      utilizedAtMaxAllocatedPercentage:
        type: "number"
        description: "The percentage of memory used by Impala for running queries\
          \ at the\ntime when maximum memory was reserved."
      peakUsageTimestampMS:
        type: "number"
        description: "The time when Impala used the maximum amount of memory for queries."
      maxUtilizedMemory:
        type: "number"
        description: "The maximum memory (in bytes) that was used by Impala for executing\
          \ queries."
      maxUtilizedMemoryPercentage:
        type: "number"
        description: "The maximum percentage of memory that was used by Impala for\
          \ executing queries."
      allocatedAtMaxUtilized:
        type: "number"
        description: "The amount of memory (in bytes) reserved by Impala at the time\
          \ when it was using the\nmaximum memory for executing queries."
      allocatedAtMaxUtilizedPercentage:
        type: "number"
        description: "The percentage of memory reserved by Impala at the time when\
          \ it was using the\nmaximum memory for executing queries."
      distributionUtilizedByImpalaDaemon:
        description: "Distribution of memory used per Impala daemon for executing\
          \ queries at\nthe time Impala used the maximum memory."
        $ref: "#/definitions/ApiImpalaUtilizationHistogram"
      distributionAllocatedByImpalaDaemon:
        description: "Distribution of memory reserved per Impala daemon for executing\
          \ queries at\nthe time Impala used the maximum memory."
        $ref: "#/definitions/ApiImpalaUtilizationHistogram"
      tenantUtilizations:
        description: "A list of tenant utilization reports."
        $ref: "#/definitions/ApiImpalaTenantUtilizationList"
      errorMessage:
        type: "string"
        example: "null"
        description: "error message of utilization report."
    title: "ApiImpalaUtilization"
    description: "Utilization report information of a Impala application service."
    example:
      totalQueries: 12345.0
      successfulQueries: 12345.0
      oomQueries: 12345.0
      timeOutQueries: 12345.0
      rejectedQueries: 12345.0
      successfulQueriesPercentage: 12345.0
      oomQueriesPercentage: 12345.0
      timeOutQueriesPercentage: 12345.0
      rejectedQueriesPercentage: 12345.0
      avgWaitTimeInQueue: 12345.0
      peakAllocationTimestampMS: 12345
      maxAllocatedMemory: 12345.0
      maxAllocatedMemoryPercentage: 12345.0
      utilizedAtMaxAllocated: 12345.0
      utilizedAtMaxAllocatedPercentage: 12345.0
      peakUsageTimestampMS: 12345
      maxUtilizedMemory: 12345.0
      maxUtilizedMemoryPercentage: 12345.0
      allocatedAtMaxUtilized: 12345.0
      allocatedAtMaxUtilizedPercentage: 12345.0
      distributionUtilizedByImpalaDaemon:
        bins:
          items:
          - {}
          - {}
      distributionAllocatedByImpalaDaemon:
        bins:
          items:
          - {}
          - {}
      tenantUtilizations:
        items:
        - tenantName: "..."
          totalQueries: 12345.0
          successfulQueries: 12345.0
          oomQueries: 12345.0
          timeOutQueries: 12345.0
          rejectedQueries: 12345.0
          avgWaitTimeInQueue: 12345.0
          peakAllocationTimestampMS: 12345
          maxAllocatedMemory: 12345.0
          maxAllocatedMemoryPercentage: 12345.0
          utilizedAtMaxAllocated: 12345.0
          utilizedAtMaxAllocatedPercentage: 12345.0
          peakUsageTimestampMS: 12345
          maxUtilizedMemory: 12345.0
          maxUtilizedMemoryPercentage: 12345.0
          allocatedAtMaxUtilized: 12345.0
          allocatedAtMaxUtilizedPercentage: 12345.0
          distributionUtilizedByImpalaDaemon: {}
          distributionAllocatedByImpalaDaemon: {}
          avgSpilledMemory: 12345.0
          maxSpilledMemory: 12345.0
        - tenantName: "..."
          totalQueries: 12345.0
          successfulQueries: 12345.0
          oomQueries: 12345.0
          timeOutQueries: 12345.0
          rejectedQueries: 12345.0
          avgWaitTimeInQueue: 12345.0
          peakAllocationTimestampMS: 12345
          maxAllocatedMemory: 12345.0
          maxAllocatedMemoryPercentage: 12345.0
          utilizedAtMaxAllocated: 12345.0
          utilizedAtMaxAllocatedPercentage: 12345.0
          peakUsageTimestampMS: 12345
          maxUtilizedMemory: 12345.0
          maxUtilizedMemoryPercentage: 12345.0
          allocatedAtMaxUtilized: 12345.0
          allocatedAtMaxUtilizedPercentage: 12345.0
          distributionUtilizedByImpalaDaemon: {}
          distributionAllocatedByImpalaDaemon: {}
          avgSpilledMemory: 12345.0
          maxSpilledMemory: 12345.0
      errorMessage: "..."
  ApiImpalaUtilizationHistogram:
    type: "object"
    properties:
      bins:
        description: "Bins of the histogram."
        $ref: "#/definitions/ApiImpalaUtilizationHistogramBinList"
    title: "ApiImpalaUtilizationHistogram"
    description: "Histogram of Impala utilization."
    example:
      bins:
        items:
        - startPointInclusive: 12345.0
          endPointExclusive: 12345.0
          numberOfImpalaDaemons: 12345
        - startPointInclusive: 12345.0
          endPointExclusive: 12345.0
          numberOfImpalaDaemons: 12345
  ApiImpalaUtilizationHistogramBin:
    type: "object"
    properties:
      startPointInclusive:
        type: "number"
        description: "start point (inclusive) of the histogram bin."
      endPointExclusive:
        type: "number"
        description: "end point (exclusive) of the histogram bin."
      numberOfImpalaDaemons:
        type: "number"
        description: "Number of Impala daemons."
    title: "ApiImpalaUtilizationHistogramBin"
    description: "Histogram bin of Impala utilization."
    example:
      startPointInclusive: 12345.0
      endPointExclusive: 12345.0
      numberOfImpalaDaemons: 12345
  ApiImpalaUtilizationHistogramBinList:
    title: "ApiImpalaUtilizationHistogramBinList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiImpalaUtilizationHistogramBin"
    description: "A generic list."
  ApiJournalNodeArguments:
    type: "object"
    properties:
      jnName:
        type: "string"
        example: "null"
        description: "Name of new JournalNode to be created. (Optional)"
      jnHostId:
        type: "string"
        example: "null"
        description: "ID of the host where the new JournalNode will be created."
      jnEditsDir:
        type: "string"
        example: "null"
        description: "Path to the JournalNode edits directory. Need not be specified\n\
          if it is already set at RoleConfigGroup level."
    title: "ApiJournalNodeArguments"
    description: "Arguments used as part of ApiEnableNnHaArguments to\nspecify JournalNodes."
    example:
      jnName: "..."
      jnHostId: "..."
      jnEditsDir: "..."
  ApiKerberosInfo:
    type: "object"
    properties:
      kerberized:
        type: "boolean"
        description: ""
      kdcType:
        type: "string"
        example: "null"
        description: ""
      kerberosRealm:
        type: "string"
        example: "null"
        description: ""
      kdcHost:
        type: "string"
        example: "null"
        description: ""
      adminHost:
        type: "string"
        example: "null"
        description: ""
      domain:
        type: "array"
        example: "null"
        description: ""
        items:
          type: "string"
    title: "ApiKerberosInfo"
    description: "Kerberos information of a Cluster or Cloudera Manager."
    example:
      kerberized: true
      kdcType: "..."
      kerberosRealm: "..."
      kdcHost: "..."
      adminHost: "..."
      domain:
      - "..."
      - "..."
  ApiLicense:
    type: "object"
    properties:
      owner:
        type: "string"
        example: "null"
        description: "The owner (organization name) of the license."
      uuid:
        type: "string"
        example: "null"
        description: "A UUID of this license."
      expiration:
        type: "string"
        example: "null"
        description: "The expiration date."
      features:
        type: "array"
        description: "Returns the list of available features as per the license"
        items:
          $ref: "#/definitions/ApiLicenseFeature"
      deactivationDate:
        type: "string"
        example: "null"
        description: "The deactivation date."
      startDate:
        type: "string"
        example: "null"
        description: "The start date."
    title: "ApiLicense"
    description: "Information about the Cloudera Manager license."
    example:
      owner: "..."
      uuid: "..."
      expiration: "..."
      features:
      - name: "..."
        enabled: true
        description: "..."
      - name: "..."
        enabled: true
        description: "..."
      deactivationDate: "..."
      startDate: "..."
  ApiLicenseFeature:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Returns feature name"
      enabled:
        type: "boolean"
        description: ""
      description:
        type: "string"
        example: "null"
        description: "Returns I18n description of the feature."
    title: "ApiLicenseFeature"
    description: "Information about the Cloudera Manager license feature details."
    example:
      name: "..."
      enabled: true
      description: "..."
  ApiLicensedFeatureUsage:
    type: "object"
    properties:
      totals:
        type: "object"
        description: "Map from named features to the total number of nodes using those\
          \ features."
        additionalProperties:
          type: "number"
      clusters:
        type: "object"
        description: "Map from clusters to maps of named features to the number of\
          \ nodes in the\ncluster using those features."
        additionalProperties:
          type: "object"
          properties: {}
    title: "ApiLicensedFeatureUsage"
    description: "Information about the number of nodes using which product features.\n\
      <p>\nUsage information is provided for individual clusters, as well as totals\n\
      across all clusters."
    example:
      totals:
        property1: 12345
        property2: 12345
      clusters:
        property1: {}
        property2: {}
  ApiListBase:
    type: "object"
    title: "ApiListBase"
    description: "A generic list."
    example: {}
  ApiMapEntry:
    type: "object"
    properties:
      key:
        type: "string"
        example: "null"
        description: ""
      value:
        type: "string"
        example: "null"
        description: ""
    title: "ApiMapEntry"
    description: "Models a map entry, with a key and a value. By forming a list of\
      \ these\nentries you can have the equivalent of Map&lt;String, String&gt; (since\n\
      JAX-B doesn't support maps)."
    example:
      key: "..."
      value: "..."
  ApiMetric:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Name of the metric."
      context:
        type: "string"
        example: "null"
        description: "Context the metric is associated with."
      unit:
        type: "string"
        example: "null"
        description: "Unit of the metric values."
      data:
        type: "array"
        description: "List of readings retrieved from the monitors."
        items:
          $ref: "#/definitions/ApiMetricData"
      displayName:
        type: "string"
        example: "null"
        description: "Requires \"full\" view. User-friendly display name for the metric."
      description:
        type: "string"
        example: "null"
        description: "Requires \"full\" view. Description of the metric."
    title: "ApiMetric"
    description: "A metric represents a specific metric monitored by the Cloudera\
      \ Management\nServices, and a list of values matching a user query.\n<p>\nThese\
      \ fields are available only in the \"full\" view:\n<ul>\n<li>displayName</li>\n\
      <li>description</li>\n</ul>"
    example:
      name: "..."
      context: "..."
      unit: "..."
      data:
      - timestamp: "..."
        value: 12345.0
      - timestamp: "..."
        value: 12345.0
      displayName: "..."
      description: "..."
  ApiMetricData:
    type: "object"
    properties:
      timestamp:
        type: "string"
        example: "null"
        description: "When the metric reading was collected."
      value:
        type: "number"
        description: "The value of the metric."
    title: "ApiMetricData"
    description: "A single data point of metric data."
    example:
      timestamp: "..."
      value: 12345.0
  ApiMetricList:
    title: "ApiMetricList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiMetric"
    description: "A list of ApiMetric objects"
  ApiMetricSchema:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Name of the metric.\nThis name is guaranteed to be unique among\
          \ the metrics."
      displayName:
        type: "string"
        example: "null"
        description: "Display name of the metric."
      description:
        type: "string"
        example: "null"
        description: "Description of the metric."
      isCounter:
        type: "boolean"
        description: "Is the metric a counter.\nA counter tracks the total count since\
          \ a process / host started.\nThe rate of change of a counter may often be\
          \ more interesting than\nthe raw value of a counter."
      unitNumerator:
        type: "string"
        example: "null"
        description: "Numerator for the unit of the metric."
      unitDenominator:
        type: "string"
        example: "null"
        description: "Denominator for the unit of the metric."
      aliases:
        type: "array"
        example: "null"
        description: "Aliases for the metric.\nAn alias is unique per metric (per\
          \ source and version) but\nis not globally unique. Aliases usually refer\
          \ to previous\nnames for the metric as metrics are renamed or replaced."
        items:
          type: "string"
      sources:
        type: "array"
        example: "null"
        description: "Sources for the metric.\nEach source entry contains the name\
          \ of the source\nand a list of versions for which this source is valid"
        items:
          type: "object"
          additionalProperties:
            type: "string"
    title: "ApiMetricSchema"
    description: "A metric schema represents the schema for a specific metric monitored\
      \ by\nthe Cloudera Management Services."
    example:
      name: "..."
      displayName: "..."
      description: "..."
      isCounter: true
      unitNumerator: "..."
      unitDenominator: "..."
      aliases:
      - "..."
      - "..."
      sources:
        property1:
        - "..."
        - "..."
        property2:
        - "..."
        - "..."
  ApiMetricSchemaList:
    title: "ApiMetricSchemaList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiMetricSchema"
    description: "A list of ApiMetricSchema objects"
  ApiMigrateRolesArguments:
    type: "object"
    properties:
      roleNamesToMigrate:
        type: "array"
        example: "null"
        description: "The list of role names to migrate."
        items:
          type: "string"
      destinationHostId:
        type: "string"
        example: "null"
        description: "The ID of the host to which the roles should be migrated."
      clearStaleRoleData:
        type: "boolean"
        description: "Delete existing stale role data, if any. For example, when migrating\n\
          a NameNode, if the destination host has stale data in the NameNode data\n\
          directories (possibly because a NameNode role was previously located\nthere),\
          \ this stale data will be deleted before migrating the role."
    title: "ApiMigrateRolesArguments"
    description: ""
    example:
      roleNamesToMigrate:
      - "..."
      - "..."
      destinationHostId: "..."
      clearStaleRoleData: true
  ApiMr2AppInformation:
    type: "object"
    properties:
      jobState:
        type: "string"
        example: "null"
        description: "The state of the job. This is only set on completed jobs. This\
          \ can\ntake on the following values: \"NEW\", \"INITED\", \"RUNNING\", \"\
          SUCCEEDED\",\n\"FAILED\", \"KILLED\", \"ERROR\"."
    title: "ApiMr2AppInformation"
    description: "Represents MapReduce2 information for a YARN application."
    example:
      jobState: "..."
  ApiMrUsageReport:
    title: "ApiMrUsageReport"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: "A list of per-user usage information at the requested time\n\
            granularity."
          items:
            $ref: "#/definitions/ApiMrUsageReportRow"
    description: "A generic list."
  ApiMrUsageReportRow:
    type: "object"
    properties:
      timePeriod:
        type: "string"
        example: "null"
        description: "The time period over which this report is generated."
      user:
        type: "string"
        example: "null"
        description: "The user being reported."
      group:
        type: "string"
        example: "null"
        description: "The group this user belongs to."
      cpuSec:
        type: "number"
        description: "Amount of CPU time (in seconds) taken up this user's MapReduce\n\
          jobs."
      memoryBytes:
        type: "number"
        description: "The sum of physical memory used (collected as a snapshot) by\
          \ this user's\nMapReduce jobs."
      jobCount:
        type: "number"
        description: "Number of jobs."
      taskCount:
        type: "number"
        description: "Number of tasks."
      durationSec:
        type: "number"
        description: "Total duration of this user's MapReduce jobs."
      failedMaps:
        type: "number"
        description: "Failed maps of this user's MapReduce jobs.\nAvailable since\
          \ v11."
      totalMaps:
        type: "number"
        description: "Total maps of this user's MapReduce jobs.\nAvailable since v11."
      failedReduces:
        type: "number"
        description: "Failed reduces of this user's MapReduce jobs.\nAvailable since\
          \ v11."
      totalReduces:
        type: "number"
        description: "Total reduces of this user's MapReduce jobs.\nAvailable since\
          \ v11."
      mapInputBytes:
        type: "number"
        description: "Map input bytes of this user's MapReduce jobs.\nAvailable since\
          \ v11."
      mapOutputBytes:
        type: "number"
        description: "Map output bytes of this user's MapReduce jobs.\nAvailable since\
          \ v11."
      hdfsBytesRead:
        type: "number"
        description: "HDFS bytes read of this user's MapReduce jobs.\nAvailable since\
          \ v11."
      hdfsBytesWritten:
        type: "number"
        description: "HDFS bytes written of this user's MapReduce jobs.\nAvailable\
          \ since v11."
      localBytesRead:
        type: "number"
        description: "Local bytes read of this user's MapReduce jobs.\nAvailable since\
          \ v11."
      localBytesWritten:
        type: "number"
        description: "Local bytes written of this user's MapReduce jobs.\nAvailable\
          \ since v11."
      dataLocalMaps:
        type: "number"
        description: "Data local maps of this user's MapReduce jobs.\nAvailable since\
          \ v11."
      rackLocalMaps:
        type: "number"
        description: "Rack local maps of this user's MapReduce jobs.\nAvailable since\
          \ v11."
    title: "ApiMrUsageReportRow"
    description: ""
    example:
      timePeriod: "..."
      user: "..."
      group: "..."
      cpuSec: 12345
      memoryBytes: 12345
      jobCount: 12345
      taskCount: 12345
      durationSec: 12345
      failedMaps: 12345
      totalMaps: 12345
      failedReduces: 12345
      totalReduces: 12345
      mapInputBytes: 12345
      mapOutputBytes: 12345
      hdfsBytesRead: 12345
      hdfsBytesWritten: 12345
      localBytesRead: 12345
      localBytesWritten: 12345
      dataLocalMaps: 12345
      rackLocalMaps: 12345
  ApiNameservice:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Name of the nameservice."
      active:
        description: "Reference to the active NameNode."
        $ref: "#/definitions/ApiRoleRef"
      activeFailoverController:
        description: "Reference to the active NameNode's failover controller, if configured."
        $ref: "#/definitions/ApiRoleRef"
      standBy:
        description: "Reference to the stand-by NameNode."
        $ref: "#/definitions/ApiRoleRef"
      standByFailoverController:
        description: "Reference to the stand-by NameNode's failover controller, if\
          \ configured."
        $ref: "#/definitions/ApiRoleRef"
      secondary:
        description: "Reference to the SecondaryNameNode."
        $ref: "#/definitions/ApiRoleRef"
      mountPoints:
        type: "array"
        example: "null"
        description: "Mount points assigned to this nameservice in a federation."
        items:
          type: "string"
      healthSummary:
        description: "Requires \"full\" view. The high-level health status of this\
          \ nameservice."
        $ref: "#/definitions/ApiHealthSummary"
      healthChecks:
        type: "array"
        description: "Requires \"full\" view. List of health checks performed on the\
          \ nameservice."
        items:
          $ref: "#/definitions/ApiHealthCheck"
    title: "ApiNameservice"
    description: "Provides information about an HDFS nameservice.\n<p>\nNameservices\
      \ can be either a stand-alone NameNode, a NameNode paired with\na SecondaryNameNode,\
      \ or a high-availability pair formed by an active and\na stand-by NameNode.\n\
      <p>\nThe following fields are only available in the object's full view:\n<ul>\n\
      <li>healthSummary</li>\n<li>healthChecks</li>\n</ul>"
    example:
      name: "..."
      active:
        clusterName: "..."
        serviceName: "..."
        roleName: "..."
      activeFailoverController:
        clusterName: "..."
        serviceName: "..."
        roleName: "..."
      standBy:
        clusterName: "..."
        serviceName: "..."
        roleName: "..."
      standByFailoverController:
        clusterName: "..."
        serviceName: "..."
        roleName: "..."
      secondary:
        clusterName: "..."
        serviceName: "..."
        roleName: "..."
      mountPoints:
      - "..."
      - "..."
      healthSummary: "NOT_AVAILABLE"
      healthChecks:
      - name: "..."
        summary: "BAD"
        explanation: "..."
        suppressed: true
      - name: "..."
        summary: "HISTORY_NOT_AVAILABLE"
        explanation: "..."
        suppressed: true
  ApiNameserviceList:
    title: "ApiNameserviceList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiNameservice"
    description: "A list of HDFS nameservices."
  ApiParcel:
    type: "object"
    properties:
      product:
        type: "string"
        example: "null"
        description: "The name of the product, e.g. CDH, Impala"
      version:
        type: "string"
        example: "null"
        description: "The version of the product, e.g. 1.1.0, 2.3.0."
      stage:
        type: "string"
        example: "null"
        description: "Returns the current stage of the parcel.\n<p>\nThere are a number\
          \ of stages a parcel can be in. There are two types of\nstages - stable\
          \ and transient. A parcel is in a transient stage when it is\ntransitioning\
          \ between two stable stages. The stages are listed below with\nsome additional\
          \ information.\n\n<ul>\n<li><b>AVAILABLE_REMOTELY</b>: Stable stage - the\
          \ parcel can be\ndownloaded to the server.</li>\n<li><b>DOWNLOADING</b>:\
          \ Transient stage - the parcel is in the process of being\ndownloaded to\
          \ the server.</li>\n<li><b>DOWNLOADED</b>: Stable stage - the parcel is\
          \ downloaded and\nready to be distributed or removed from the server.</li>\n\
          <li><b>DISTRIBUTING</b>: Transient stage - the parcel is being sent to all\n\
          the hosts in the cluster.</li>\n<li><b>DISTRIBUTED</b>: Stable stage - the\
          \ parcel is on all the hosts in\nthe cluster. The parcel can now be activated,\
          \ or removed from all the hosts.</li>\n<li><b>UNDISTRIBUTING</b>: Transient\
          \ stage - the parcel is being removed\nfrom all the hosts in the cluster></li>\n\
          <li><b>ACTIVATING</b>: Transient stage - the parcel is being activated on\n\
          the hosts in the cluster. <i>New in API v7</i></li>\n<li><b>ACTIVATED</b>:\
          \ Steady stage - the parcel is set to active on every host\nin the cluster.\
          \ If desired, a parcel can be deactivated from this stage.</li>\n</ul>"
      state:
        description: "The state of the parcel. This shows the progress of state transitions\n\
          and if there were any errors."
        $ref: "#/definitions/ApiParcelState"
      clusterRef:
        description: "Readonly. A reference to the enclosing cluster."
        $ref: "#/definitions/ApiClusterRef"
    title: "ApiParcel"
    description: "A Parcel encapsulate a specific product and version. For example,\n\
      (CDH 4.1). A parcel is downloaded, distributed to all the machines of a\ncluster\
      \ and then allowed to be activated.\n<p>>\nThe available parcels are determined\
      \ by which cluster they will be running on.\nFor example, a SLES parcel won't\
      \ show up for a RHEL cluster.\n</p>"
    example:
      product: "..."
      version: "..."
      stage: "..."
      state:
        progress: 12345
        totalProgress: 12345
        count: 12345
        totalCount: 12345
        errors:
        - "..."
        - "..."
        warnings:
        - "..."
        - "..."
      clusterRef:
        clusterName: "..."
        displayName: "..."
  ApiParcelList:
    title: "ApiParcelList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiParcel"
    description: "A list of ApiParcel."
  ApiParcelRef:
    type: "object"
    properties:
      clusterName:
        type: "string"
        example: "null"
        description: "The name of the cluster that the parcel is used by."
      parcelName:
        type: "string"
        example: "null"
        description: "The name of the parcel."
      parcelVersion:
        type: "string"
        example: "null"
        description: "The version of the parcel."
    title: "ApiParcelRef"
    description: "A parcelRef references a parcel. Each parcel is identified by its\
      \ \"parcelName\"\nand \"parcelVersion\", and the \"clusterName\" of the cluster\
      \ that is using it.\nTo operate on the parcel object, use the API with the those\
      \ fields as\nparameters."
    example:
      clusterName: "..."
      parcelName: "..."
      parcelVersion: "..."
  ApiParcelState:
    type: "object"
    properties:
      progress:
        type: "number"
        description: "The progress of the state transition."
      totalProgress:
        type: "number"
        description: "The total amount that #getProgress() needs to get to."
      count:
        type: "number"
        description: "The current hosts that have completed."
      totalCount:
        type: "number"
        description: "The total amount that #getCount() needs to get to."
      errors:
        type: "array"
        example: "null"
        description: "The errors that exist for this parcel."
        items:
          type: "string"
      warnings:
        type: "array"
        example: "null"
        description: "The warnings that exist for this parcel."
        items:
          type: "string"
    title: "ApiParcelState"
    description: "The ApiParcelState encapsulates the state of a parcel while it is\
      \ in\ntransition and reports any errors that may have occurred..\n<p>\nThe complete\
      \ progress of a parcel is broken up into two different reporting\nindicators\
      \ - progress and count. Progress is the primary indicator that reports\nthe\
      \ global state of transitions. For example, when downloading,\nprogress and\
      \ totalProgress will show the current number of bytes downloaded\nand the total\
      \ number of bytes needed to be downloaded respectively.\n</p>\n<p>\nThe count\
      \ and totalCount indicator is used when a state transition affects\nmultiple\
      \ hosts. The count and totalCount show the current number of hosts\ncompleted\
      \ and the total number of hosts respectively. For example, during distribution,\n\
      the progress and totalProgress will show how many bytes have been transferred\n\
      to each host and the count will indicate how many hosts of of totalCount\nhave\
      \ had parcels unpacked.\n</p>\n<p>\nAlong with the two progress indicators,\
      \ the ApiParcelState shows both errors\nand warnings that may have turned up\
      \ during a state transition.\n</p>"
    example:
      progress: 12345
      totalProgress: 12345
      count: 12345
      totalCount: 12345
      errors:
      - "..."
      - "..."
      warnings:
      - "..."
      - "..."
  ApiParcelUsage:
    type: "object"
    properties:
      racks:
        type: "array"
        description: "The racks that contain hosts that are part of this cluster."
        items:
          $ref: "#/definitions/ApiParcelUsageRack"
      parcels:
        type: "array"
        description: "The parcel's that are activated and/or in-use on this cluster."
        items:
          $ref: "#/definitions/ApiParcelUsageParcel"
    title: "ApiParcelUsage"
    description: "This object provides a complete view of the usage of parcels in\
      \ a given\ncluster - particularly which parcels are in use for which roles."
    example:
      racks:
      - hosts:
        - hostRef: {}
          roles:
          - {}
          - {}
        - hostRef: {}
          roles:
          - {}
          - {}
        rackId: "..."
      - hosts:
        - hostRef: {}
          roles:
          - {}
          - {}
        - hostRef: {}
          roles:
          - {}
          - {}
        rackId: "..."
      parcels:
      - parcelRef:
          clusterName: "..."
          parcelName: "..."
          parcelVersion: "..."
        processCount: 12345
        activated: true
      - parcelRef:
          clusterName: "..."
          parcelName: "..."
          parcelVersion: "..."
        processCount: 12345
        activated: true
  ApiParcelUsageHost:
    type: "object"
    properties:
      hostRef:
        description: "A reference to the corresponding Host object."
        $ref: "#/definitions/ApiHostRef"
      roles:
        type: "array"
        description: "A collection of the roles present on the host."
        items:
          $ref: "#/definitions/ApiParcelUsageRole"
    title: "ApiParcelUsageHost"
    description: "This object is used to represent a host within an ApiParcelUsage."
    example:
      hostRef:
        hostId: "..."
        hostname: "..."
      roles:
      - roleRef:
          clusterName: "..."
          serviceName: "..."
          roleName: "..."
        parcelRefs:
        - clusterName: "..."
          parcelName: "..."
          parcelVersion: "..."
        - clusterName: "..."
          parcelName: "..."
          parcelVersion: "..."
      - roleRef:
          clusterName: "..."
          serviceName: "..."
          roleName: "..."
        parcelRefs:
        - clusterName: "..."
          parcelName: "..."
          parcelVersion: "..."
        - clusterName: "..."
          parcelName: "..."
          parcelVersion: "..."
  ApiParcelUsageParcel:
    type: "object"
    properties:
      parcelRef:
        description: "Reference to the corresponding Parcel object."
        $ref: "#/definitions/ApiParcelRef"
      processCount:
        type: "number"
        description: "How many running processes on the cluster are using the parcel."
      activated:
        type: "boolean"
        description: "Is this parcel currently activated on the cluster."
    title: "ApiParcelUsageParcel"
    description: "This object is used to represent a parcel within an ApiParcelUsage."
    example:
      parcelRef:
        clusterName: "..."
        parcelName: "..."
        parcelVersion: "..."
      processCount: 12345
      activated: true
  ApiParcelUsageRack:
    type: "object"
    properties:
      hosts:
        type: "array"
        description: "A collection of the hosts in the rack."
        items:
          $ref: "#/definitions/ApiParcelUsageHost"
      rackId:
        type: "string"
        example: "null"
        description: "The rack ID for the rack."
    title: "ApiParcelUsageRack"
    description: "This object is used to represent a rack within an ApiParcelUsage."
    example:
      hosts:
      - hostRef:
          hostId: "..."
          hostname: "..."
        roles:
        - roleRef: {}
          parcelRefs:
          - {}
          - {}
        - roleRef: {}
          parcelRefs:
          - {}
          - {}
      - hostRef:
          hostId: "..."
          hostname: "..."
        roles:
        - roleRef: {}
          parcelRefs:
          - {}
          - {}
        - roleRef: {}
          parcelRefs:
          - {}
          - {}
      rackId: "..."
  ApiParcelUsageRole:
    type: "object"
    properties:
      roleRef:
        description: "A reference to the corresponding Role object."
        $ref: "#/definitions/ApiRoleRef"
      parcelRefs:
        type: "array"
        description: "A collection of references to the parcels being used by the\
          \ role."
        items:
          $ref: "#/definitions/ApiParcelRef"
    title: "ApiParcelUsageRole"
    description: "This object is used to represent a role within an ApiParcelUsage."
    example:
      roleRef:
        clusterName: "..."
        serviceName: "..."
        roleName: "..."
      parcelRefs:
      - clusterName: "..."
        parcelName: "..."
        parcelVersion: "..."
      - clusterName: "..."
        parcelName: "..."
        parcelVersion: "..."
  ApiPerfInspectorBandwidthArgs:
    type: "object"
    properties:
      runBandwidthDiagnostics:
        type: "boolean"
        example: false
        description: "Optional flag to run bandwidth diagnostics test.\nExercise caution,\
          \ running bandwidth test will have an impact on currently running\nworkloads.\n\
          If not specified, defaults to false."
      bandwidthTimeoutSecs:
        type: "number"
        example: 10.0
        description: "Timeout in seconds for the bandwidth request to each target\
          \ host.\nIf not specified, defaults to 10 seconds."
    title: "ApiPerfInspectorBandwidthArgs"
    description: "Arguments to run bandwidth diagnostics as part of performance inspector.\n\
      Requires iperf3 package installed on hosts."
    example:
      runBandwidthDiagnostics: false
      bandwidthTimeoutSecs: 10
  ApiPerfInspectorPingArgs:
    type: "object"
    properties:
      pingTimeoutSecs:
        type: "number"
        example: 10.0
        description: "Timeout in seconds for the ping request to each target host.\n\
          If not specified, defaults to 10 seconds.\nMust be a value between 1 and\
          \ 3600 seconds, inclusive."
      pingCount:
        type: "number"
        example: 10.0
        description: "Number of iterations of the ping request to each target host.\n\
          If not specified, defaults to 10 count."
      pingPacketSizeBytes:
        type: "number"
        example: 56.0
        description: "Packet size in bytes for each ping request.\nIf not specified,\
          \ defaults to 56 bytes.\nMust be a value between 1 and 65507 bytes, inclusive."
    title: "ApiPerfInspectorPingArgs"
    description: "Arguments to run ping test."
    example:
      pingTimeoutSecs: 10
      pingCount: 10
      pingPacketSizeBytes: 56
  ApiPrincipalList:
    title: "ApiPrincipalList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          example: "null"
          description: ""
          items:
            type: "string"
    description: "A list of kerberos principals."
  ApiProcess:
    type: "object"
    properties:
      configFiles:
        type: "array"
        example: "null"
        description: "List of config files supplied to the process."
        items:
          type: "string"
    title: "ApiProcess"
    description: "A process represents a unix process to be managed by the Cloudera\n\
      Manager agents. A process can be a daemon, e.g. if it is associated\nwith a\
      \ running role. It can also be a one-off process which is expected\nto start,\
      \ run and finish."
    example:
      configFiles:
      - "..."
      - "..."
  ApiProductVersion:
    type: "object"
    properties:
      version:
        type: "string"
        example: "null"
        description: ""
      product:
        type: "string"
        example: "null"
        description: ""
    title: "ApiProductVersion"
    description: ""
    example:
      version: "..."
      product: "..."
  ApiReplicationCommand:
    title: "ApiReplicationCommand"
    allOf:
    - $ref: "#/definitions/ApiCommand"
    - properties:
        hdfsResult:
          description: "Results for replication commands on HDFS services."
          $ref: "#/definitions/ApiHdfsReplicationResult"
        hiveResult:
          description: "Results for replication commands on Hive services."
          $ref: "#/definitions/ApiHiveReplicationResult"
    description: "Information about a replication command.\n<p/>\nThis object holds\
      \ all the information a regular ApiCommand object provides,\nand adds specific\
      \ information about the results of a replication command.\n<p/>\nDepending on\
      \ the type of the service where the replication was run, a\ndifferent result\
      \ property will be populated."
  ApiReplicationCommandList:
    title: "ApiReplicationCommandList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiReplicationCommand"
    description: "A list of replication commands."
  ApiReplicationDiagnosticsCollectionArgs:
    type: "object"
    properties:
      commands:
        description: "Commands to limit diagnostics to.\nBy default, the most recent\
          \ 10 commands on the schedule will be used."
        $ref: "#/definitions/ApiCommandList"
      ticketNumber:
        type: "string"
        example: "null"
        description: "Ticket number to which this bundle must be associated with."
      comments:
        type: "string"
        example: "null"
        description: "Additional comments for the bundle."
      phoneHome:
        type: "boolean"
        description: "Whether the diagnostics bundle must be uploaded to Cloudera."
    title: "ApiReplicationDiagnosticsCollectionArgs"
    description: "Optional arguments for diagnostics collection."
    example:
      commands:
        items:
        - id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        - id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
      ticketNumber: "..."
      comments: "..."
      phoneHome: true
  ApiReplicationSchedule:
    title: "ApiReplicationSchedule"
    allOf:
    - $ref: "#/definitions/ApiSchedule"
    - properties:
        hdfsArguments:
          description: "Arguments for HDFS replication commands."
          $ref: "#/definitions/ApiHdfsReplicationArguments"
        hiveArguments:
          description: "Arguments for Hive replication commands."
          $ref: "#/definitions/ApiHiveReplicationArguments"
        hdfsCloudArguments:
          description: "Arguments for HDFS cloud replication commands."
          $ref: "#/definitions/ApiHdfsCloudReplicationArguments"
        history:
          type: "array"
          description: "List of active and/or finished commands for this schedule."
          items:
            $ref: "#/definitions/ApiReplicationCommand"
        active:
          type: "boolean"
          description: "Read-only field that is true if this schedule is currently\
            \ active, false if not.\nAvailable since API v11."
        hiveCloudArguments:
          description: "Arguments for Hive cloud replication commands."
          $ref: "#/definitions/ApiHiveCloudReplicationArguments"
    description: "A replication job schedule.\n<p/>\nReplication jobs have service-specific\
      \ arguments. This object has methods\nto retrieve arguments for all supported\
      \ types of replication, but only\none argument type is allowed to be set; the\
      \ backend will check that the\nprovided argument matches the service type where\
      \ the replication is\nbeing scheduled.\n<p/>\nThe replication job's arguments\
      \ should match the underlying service. Refer\nto each property's documentation\
      \ to find out which properties correspond to\nwhich services."
  ApiReplicationScheduleList:
    title: "ApiReplicationScheduleList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiReplicationSchedule"
    description: "A list of replication schedules."
  ApiReplicationState:
    type: "object"
    properties:
      incrementalExportEnabled:
        type: "boolean"
        description: "returns if incremental export is enabled for the given Hive\
          \ service.\nNot applicable for HDFS service."
    title: "ApiReplicationState"
    description: "The state of Hive/HDFS Replication."
    example:
      incrementalExportEnabled: true
  ApiRestartClusterArgs:
    type: "object"
    properties:
      restartOnlyStaleServices:
        type: "boolean"
        description: "Only restart services that have stale configuration and their\
          \ dependent\nservices."
      redeployClientConfiguration:
        type: "boolean"
        description: "Re-deploy client configuration for all services in the cluster."
      restartServiceNames:
        type: "array"
        example: "null"
        description: "Only restart services that are specified and their dependent\
          \ services.\nAvailable since V11."
        items:
          type: "string"
    title: "ApiRestartClusterArgs"
    description: "Arguments used for Cluster Restart command.\n\nSince V11:\nIf both\
      \ restartOnlyStaleServices and restartServiceNames are specified,\na service\
      \ must be specified in restartServiceNames and also be stale,\nin order to be\
      \ restarted."
    example:
      restartOnlyStaleServices: true
      redeployClientConfiguration: true
      restartServiceNames:
      - "..."
      - "..."
  ApiRole:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The name of the role.\nOptional when creating a role since API\
          \ v6. If not specified, a name will\nbe automatically generated for the\
          \ role."
      type:
        type: "string"
        example: "null"
        description: "The type of the role, e.g. NAMENODE, DATANODE, TASKTRACKER."
      hostRef:
        description: "A reference to the host where this role runs."
        $ref: "#/definitions/ApiHostRef"
      serviceRef:
        description: "Readonly. A reference to the parent service."
        $ref: "#/definitions/ApiServiceRef"
      roleState:
        description: "Readonly. The configured run state of this role. Whether it's\
          \ running, etc."
        $ref: "#/definitions/ApiRoleState"
      commissionState:
        description: "Readonly. The commission state of this role.\nAvailable since\
          \ API v2."
        $ref: "#/definitions/ApiCommissionState"
      healthSummary:
        description: "Readonly. The high-level health status of this role."
        $ref: "#/definitions/ApiHealthSummary"
      configStale:
        type: "boolean"
        description: "Readonly. Expresses whether the role configuration is stale."
      configStalenessStatus:
        description: "Readonly. Expresses the role's configuration staleness status.\n\
          Available since API v6."
        $ref: "#/definitions/ApiConfigStalenessStatus"
      healthChecks:
        type: "array"
        description: "Readonly. The list of health checks of this service."
        items:
          $ref: "#/definitions/ApiHealthCheck"
      haStatus:
        description: "Readonly. The HA status of this role."
        $ref: "#/definitions/HaStatus"
      roleUrl:
        type: "string"
        example: "null"
        description: "Readonly.\nLink into the Cloudera Manager web UI for this specific\
          \ role."
      maintenanceMode:
        type: "boolean"
        description: "Readonly. Whether the role is in maintenance mode.\nAvailable\
          \ since API v2."
      maintenanceOwners:
        type: "array"
        example: "null"
        description: "Readonly. The list of objects that trigger this role to be in\n\
          maintenance mode.\nAvailable since API v2."
        items:
          $ref: "#/definitions/ApiEntityType"
      config:
        description: "The role configuration. Optional."
        $ref: "#/definitions/ApiConfigList"
      roleConfigGroupRef:
        description: "Readonly. The reference to the role configuration group of this\
          \ role.\nAvailable since API v3."
        $ref: "#/definitions/ApiRoleConfigGroupRef"
      zooKeeperServerMode:
        description: "Readonly. The ZooKeeper server mode for this role. Note that\
          \ for\nnon-ZooKeeper Server roles this will be null.\nAvailable since API\
          \ v6."
        $ref: "#/definitions/ZooKeeperServerMode"
      entityStatus:
        description: "Readonly. The entity status for this role.\nAvailable since\
          \ API v11."
        $ref: "#/definitions/ApiEntityStatus"
    title: "ApiRole"
    description: "A role represents a specific entity that participate in a service.\
      \ Examples\nare JobTrackers, DataNodes, HBase Masters. Each role is assigned\
      \ a host\nwhere it runs on."
    example:
      name: "..."
      type: "..."
      hostRef:
        hostId: "..."
        hostname: "..."
      serviceRef:
        peerName: "..."
        clusterName: "..."
        serviceName: "..."
        serviceDisplayName: "..."
        serviceType: "..."
      roleState: "UNKNOWN"
      commissionState: "OFFLINING"
      healthSummary: "BAD"
      configStalenessStatus: "STALE"
      healthChecks:
      - name: "..."
        summary: "DISABLED"
        explanation: "..."
        suppressed: true
      - name: "..."
        summary: "NOT_AVAILABLE"
        explanation: "..."
        suppressed: true
      haStatus: "STANDBY"
      roleUrl: "..."
      maintenanceMode: true
      maintenanceOwners:
      - "ROLE"
      - "CLUSTER"
      config:
        items:
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "OK"
          validationMessage: "..."
          validationWarningsSuppressed: true
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "OK"
          validationMessage: "..."
          validationWarningsSuppressed: true
      roleConfigGroupRef:
        roleConfigGroupName: "..."
      zooKeeperServerMode: "REPLICATED_LEADER_ELECTION"
      entityStatus: "UNKNOWN_HEALTH"
  ApiRoleConfigGroup:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Readonly. The unique name of this role config group."
      roleType:
        type: "string"
        example: "null"
        description: "Readonly. The type of the roles in this group."
      base:
        type: "boolean"
        description: "Readonly. Indicates whether this is a base group."
      config:
        description: "The configuration for this group. Optional."
        $ref: "#/definitions/ApiConfigList"
      displayName:
        type: "string"
        example: "null"
        description: "The display name of this group."
      serviceRef:
        description: "Readonly. The service reference (service name and cluster name)\n\
          of this group."
        $ref: "#/definitions/ApiServiceRef"
    title: "ApiRoleConfigGroup"
    description: "A role config group contains roles of the same role type\nsharing\
      \ the same configuration. While each role has to belong\nto a group, a role\
      \ config group may be empty.\n\nThere exists a default role config group for\
      \ each role type.\nDefault groups cannot be removed nor created.\n\nThe name\
      \ of a role config group is unique and cannot be changed.\n\nThe configuration\
      \ of individual roles may be overridden on\nrole level."
    example:
      name: "..."
      roleType: "..."
      base: true
      config:
        items:
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "OK"
          validationMessage: "..."
          validationWarningsSuppressed: true
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "WARNING"
          validationMessage: "..."
          validationWarningsSuppressed: true
      displayName: "..."
      serviceRef:
        peerName: "..."
        clusterName: "..."
        serviceName: "..."
        serviceDisplayName: "..."
        serviceType: "..."
  ApiRoleConfigGroupList:
    title: "ApiRoleConfigGroupList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiRoleConfigGroup"
    description: "A list of role config groups."
  ApiRoleConfigGroupRef:
    type: "object"
    properties:
      roleConfigGroupName:
        type: "string"
        example: "null"
        description: "The name of the role config group, which uniquely identifies\
          \ it in a CM\ninstallation."
    title: "ApiRoleConfigGroupRef"
    description: ""
    example:
      roleConfigGroupName: "..."
  ApiRoleList:
    title: "ApiRoleList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiRole"
    description: "A list of roles."
  ApiRoleNameList:
    title: "ApiRoleNameList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          example: "null"
          description: ""
          items:
            type: "string"
    description: "A list of role names."
  ApiRoleRef:
    type: "object"
    properties:
      clusterName:
        type: "string"
        example: "null"
        description: ""
      serviceName:
        type: "string"
        example: "null"
        description: ""
      roleName:
        type: "string"
        example: "null"
        description: ""
    title: "ApiRoleRef"
    description: "A roleRef references a role. Each role is identified by its \"roleName\"\
      ,\nthe \"serviceName\" for the service it belongs to, and the \"clusterName\"\
      \ in\nwhich the service resides. To operate on the role object,\nuse the API\
      \ with the those fields as parameters."
    example:
      clusterName: "..."
      serviceName: "..."
      roleName: "..."
  ApiRoleState:
    type: "string"
    title: "ApiRoleState"
    description: "Represents the configured run state of a role."
    enum:
    - "HISTORY_NOT_AVAILABLE"
    - "UNKNOWN"
    - "STARTING"
    - "STARTED"
    - "BUSY"
    - "STOPPING"
    - "STOPPED"
    - "NA"
  ApiRoleTypeConfig:
    title: "ApiRoleTypeConfig"
    allOf:
    - $ref: "#/definitions/ApiConfigList"
    - properties:
        roleType:
          type: "string"
          example: "null"
          description: "The role type."
    description: "Role type configuration information."
  ApiRoleTypeList:
    title: "ApiRoleTypeList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          example: "null"
          description: ""
          items:
            type: "string"
    description: "A list of roles types that exists for a given service."
  ApiRolesToInclude:
    type: "string"
    title: "ApiRolesToInclude"
    description: "Roles to include during a cluster rolling restart."
    enum:
    - "SLAVES_ONLY"
    - "NON_SLAVES_ONLY"
    - "ALL_ROLES"
  ApiRollEditsArgs:
    type: "object"
    properties:
      nameservice:
        type: "string"
        example: "null"
        description: "Nameservice whose edits need to be rolled.\nRequired only if\
          \ HDFS service is federated."
    title: "ApiRollEditsArgs"
    description: "Arguments used for the Roll Edits command."
    example:
      nameservice: "..."
  ApiRollingRestartArgs:
    type: "object"
    properties:
      slaveBatchSize:
        type: "number"
        description: "Number of slave roles to restart at a time.\nMust be greater\
          \ than zero. Default is 1.\n\nPlease note that for HDFS, this number should\
          \ be less than\nthe replication factor (default 3) to ensure data availability\n\
          during rolling restart."
      sleepSeconds:
        type: "number"
        description: "Number of seconds to sleep between restarts of slave role batches.\n\
          \nMust be greater than or equal to 0. Default is 0."
      slaveFailCountThreshold:
        type: "number"
        description: "The threshold for number of slave batches that are allowed to\
          \ fail\nto restart before the entire command is considered failed.\n\nMust\
          \ be greather than or equal to 0. Default is 0.\n<p>\nThis argument is for\
          \ ADVANCED users only.\n</p>"
      staleConfigsOnly:
        type: "boolean"
        description: "Restart roles with stale configs only."
      unUpgradedOnly:
        type: "boolean"
        description: "Restart roles that haven't been upgraded yet."
      restartRoleTypes:
        type: "array"
        example: "null"
        description: "Role types to restart. If not specified, all startable roles\
          \ are restarted.\n\nBoth role types and role names should not be specified."
        items:
          type: "string"
      restartRoleNames:
        type: "array"
        example: "null"
        description: "List of specific roles to restart.\nIf none are specified, then\
          \ all roles of specified role types are restarted.\n\nBoth role types and\
          \ role names should not be specified."
        items:
          type: "string"
    title: "ApiRollingRestartArgs"
    description: "Arguments used for Rolling Restart commands."
    example:
      slaveBatchSize: 12345
      sleepSeconds: 12345
      slaveFailCountThreshold: 12345
      staleConfigsOnly: true
      unUpgradedOnly: true
      restartRoleTypes:
      - "..."
      - "..."
      restartRoleNames:
      - "..."
      - "..."
  ApiRollingRestartClusterArgs:
    type: "object"
    properties:
      slaveBatchSize:
        type: "number"
        description: "Number of hosts with slave roles to restart at a time.\nMust\
          \ be greater than zero. Default is 1."
      sleepSeconds:
        type: "number"
        description: "Number of seconds to sleep between restarts of slave host batches.\n\
          <p>\nMust be greater than or equal to 0. Default is 0."
      slaveFailCountThreshold:
        type: "number"
        description: "The threshold for number of slave host batches that are allowed\
          \ to fail\nto restart before the entire command is considered failed.\n\
          <p>\nMust be greater than or equal to 0. Default is 0.\n<p>\nThis argument\
          \ is for ADVANCED users only.\n</p>"
      staleConfigsOnly:
        type: "boolean"
        description: "Restart roles with stale configs only."
      unUpgradedOnly:
        type: "boolean"
        description: "Restart roles that haven't been upgraded yet."
      redeployClientConfiguration:
        type: "boolean"
        description: "Re-deploy client configuration. Available since API v6."
      rolesToInclude:
        description: "Role types to restart. Default is slave roles only."
        $ref: "#/definitions/ApiRolesToInclude"
      restartServiceNames:
        type: "array"
        example: "null"
        description: "List of services to restart."
        items:
          type: "string"
    title: "ApiRollingRestartClusterArgs"
    description: "Arguments used for Rolling Restart Cluster command."
    example:
      slaveBatchSize: 12345
      sleepSeconds: 12345
      slaveFailCountThreshold: 12345
      staleConfigsOnly: true
      unUpgradedOnly: true
      redeployClientConfiguration: true
      rolesToInclude: "SLAVES_ONLY"
      restartServiceNames:
      - "..."
      - "..."
  ApiRollingUpgradeClusterArgs:
    type: "object"
    properties:
      slaveBatchSize:
        type: "number"
        description: "Number of slave roles to restart at a time.\nMust be greater\
          \ than zero. Default is 1.\n\nPlease note that for HDFS, this number should\
          \ be less than\nthe replication factor (default 3) to ensure data availability\n\
          during rolling restart."
      sleepSeconds:
        type: "number"
        description: "Number of seconds to sleep between restarts of slave role batches.\n\
          \nMust be greater than or equal to 0. Default is 0."
      slaveFailCountThreshold:
        type: "number"
        description: "The threshold for number of slave batches that are allowed to\
          \ fail\nto restart before the entire command is considered failed.\n\nMust\
          \ be greather than or equal to 0. Default is 0.\n<p>\nThis argument is for\
          \ ADVANCED users only.\n</p>"
    title: "ApiRollingUpgradeClusterArgs"
    description: "Rolling upgrade arguments used in the CDH Upgrade Command. Part\
      \ of\nApiCdhUpgradeArgs."
    example:
      slaveBatchSize: 12345
      sleepSeconds: 12345
      slaveFailCountThreshold: 12345
  ApiRollingUpgradeServicesArgs:
    type: "object"
    properties:
      upgradeFromCdhVersion:
        type: "string"
        example: "null"
        description: "Current CDH Version of the services. Example versions are:\n\
          \"5.1.0\", \"5.2.2\" or \"5.4.0\""
      upgradeToCdhVersion:
        type: "string"
        example: "null"
        description: "Target CDH Version for the services. The CDH version should\
          \ already\nbe present and activated on the nodes. Example versions are:\n\
          \"5.1.0\", \"5.2.2\" or \"5.4.0\""
      slaveBatchSize:
        type: "number"
        description: "Number of hosts with slave roles to upgrade at a time.\nMust\
          \ be greater than zero. Default is 1."
      sleepSeconds:
        type: "number"
        description: "Number of seconds to sleep between restarts of slave host batches.\n\
          \nMust be greater than or equal to 0. Default is 0."
      slaveFailCountThreshold:
        type: "number"
        description: "The threshold for number of slave host batches that are allowed\
          \ to fail\nto restart before the entire command is considered failed.\n\n\
          Must be greater than or equal to 0. Default is 0.\n<p>\nThis argument is\
          \ for ADVANCED users only.\n</p>"
      upgradeServiceNames:
        type: "array"
        example: "null"
        description: "List of services to upgrade.\nOnly the services that support\
          \ rolling upgrade should be included."
        items:
          type: "string"
    title: "ApiRollingUpgradeServicesArgs"
    description: "Arguments used for Rolling Upgrade command."
    example:
      upgradeFromCdhVersion: "..."
      upgradeToCdhVersion: "..."
      slaveBatchSize: 12345
      sleepSeconds: 12345
      slaveFailCountThreshold: 12345
      upgradeServiceNames:
      - "..."
      - "..."
  ApiSchedule:
    type: "object"
    properties:
      id:
        type: "number"
        description: "The schedule id."
      displayName:
        type: "string"
        example: "null"
        description: "The schedule display name."
      description:
        type: "string"
        example: "null"
        description: "The schedule description."
      startTime:
        type: "string"
        example: "null"
        description: "The time at which the scheduled activity is triggered for the\
          \ first\ntime."
      endTime:
        type: "string"
        example: "null"
        description: "The time after which the scheduled activity will no longer be\
          \ triggered."
      interval:
        type: "number"
        description: "The duration between consecutive triggers of a scheduled activity."
      intervalUnit:
        description: "The unit for the repeat interval."
        $ref: "#/definitions/ApiScheduleInterval"
      nextRun:
        type: "string"
        example: "null"
        description: "Readonly. The time the scheduled command will run next."
      paused:
        type: "boolean"
        description: "The paused state for the schedule. The scheduled activity will\
          \ not be\ntriggered as long as the scheduled is paused."
      alertOnStart:
        type: "boolean"
        description: "Whether to alert on start of the scheduled activity."
      alertOnSuccess:
        type: "boolean"
        description: "Whether to alert on successful completion of the scheduled activity."
      alertOnFail:
        type: "boolean"
        description: "Whether to alert on failure of the scheduled activity."
      alertOnAbort:
        type: "boolean"
        description: "Whether to alert on abort of the scheduled activity."
    title: "ApiSchedule"
    description: "Base class for commands that can be scheduled in Cloudera Manager.\n\
      <p/>\nNote that schedule IDs are not preserved upon import.\n<p/>"
    example:
      id: 12345
      displayName: "..."
      description: "..."
      startTime: "..."
      endTime: "..."
      interval: 12345
      intervalUnit: "MINUTE"
      nextRun: "..."
      paused: true
      alertOnStart: true
      alertOnSuccess: true
      alertOnFail: true
      alertOnAbort: true
  ApiScheduleInterval:
    type: "string"
    title: "ApiScheduleInterval"
    description: "Represents the unit for the repeat interval for schedules."
    enum:
    - "MINUTE"
    - "HOUR"
    - "DAY"
    - "WEEK"
    - "MONTH"
    - "YEAR"
  ApiScmDbInfo:
    type: "object"
    properties:
      scmDbType:
        description: "Cloudera Manager server's db type"
        $ref: "#/definitions/ScmDbType"
      embeddedDbUsed:
        type: "boolean"
        description: "Whether Cloudera Manager server is using embedded DB"
    title: "ApiScmDbInfo"
    description: "Cloudera Manager server's database information"
    example:
      scmDbType: "ORACLE"
      embeddedDbUsed: true
  ApiService:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The name of the service."
      type:
        type: "string"
        example: "null"
        description: "The type of the service, e.g. HDFS, MAPREDUCE, HBASE."
      clusterRef:
        description: "Readonly. A reference to the enclosing cluster."
        $ref: "#/definitions/ApiClusterRef"
      serviceState:
        description: "Readonly. The configured run state of this service.\nWhether\
          \ it's running, etc."
        $ref: "#/definitions/ApiServiceState"
      healthSummary:
        description: "Readonly. The high-level health status of this service."
        $ref: "#/definitions/ApiHealthSummary"
      configStale:
        type: "boolean"
        description: "Readonly. Expresses whether the service configuration is stale."
      configStalenessStatus:
        description: "Readonly. Expresses the service's configuration staleness status\
          \ which is\nbased on the staleness status of its roles.\nAvailable since\
          \ API v6."
        $ref: "#/definitions/ApiConfigStalenessStatus"
      clientConfigStalenessStatus:
        description: "Readonly. Expresses the service's client configuration staleness\
          \ status\nwhich is marked as stale if any of the service's hosts have missing\
          \ client\nconfigurations or if any of the deployed client configurations\
          \ are stale.\nAvailable since API v6."
        $ref: "#/definitions/ApiConfigStalenessStatus"
      healthChecks:
        type: "array"
        description: "Readonly. The list of health checks of this service."
        items:
          $ref: "#/definitions/ApiHealthCheck"
      serviceUrl:
        type: "string"
        example: "null"
        description: "Readonly. Link into the Cloudera Manager web UI for this specific\
          \ service."
      roleInstancesUrl:
        type: "string"
        example: "null"
        description: "Readonly. Link into the Cloudera Manager web UI for role instances\
          \ table for\nthis specific service.\nAvailable since API v11."
      maintenanceMode:
        type: "boolean"
        description: "Readonly. Whether the service is in maintenance mode.\nAvailable\
          \ since API v2."
      maintenanceOwners:
        type: "array"
        example: "null"
        description: "Readonly. The list of objects that trigger this service to be\
          \ in\nmaintenance mode.\nAvailable since API v2."
        items:
          $ref: "#/definitions/ApiEntityType"
      config:
        description: "Configuration of the service being created. Optional."
        $ref: "#/definitions/ApiServiceConfig"
      roles:
        type: "array"
        description: "The list of service roles. Optional."
        items:
          $ref: "#/definitions/ApiRole"
      displayName:
        type: "string"
        example: "null"
        description: "The display name for the service that is shown in the UI.\n\
          Available since API v2."
      roleConfigGroups:
        type: "array"
        description: "The list of role configuration groups in this service. Optional.\n\
          Available since API v3."
        items:
          $ref: "#/definitions/ApiRoleConfigGroup"
      replicationSchedules:
        type: "array"
        description: "The list of replication schedules for this service. Optional.\n\
          Available since API v6."
        items:
          $ref: "#/definitions/ApiReplicationSchedule"
      snapshotPolicies:
        type: "array"
        description: "The list of snapshot policies for this service. Optional.\n\
          Available since API v6."
        items:
          $ref: "#/definitions/ApiSnapshotPolicy"
      entityStatus:
        description: "Readonly. The entity status for this service.\nAvailable since\
          \ API v11."
        $ref: "#/definitions/ApiEntityStatus"
    title: "ApiService"
    description: "A service (such as HDFS, MapReduce, HBase) runs in a cluster. It\
      \ has roles,\nwhich are the actual entities (NameNode, DataNodes, etc.) that\
      \ perform the\nservice's functions.\n\n<h3>HDFS services and health checks</h3>\n\
      \nIn CDH4, HDFS services may not present any health checks. This will happen\n\
      if the service has more than one nameservice configured. In those cases,\nthe\
      \ health information will be available by fetching information about the\nnameservices\
      \ instead.\n<p>\nThe health summary is still available, and reflects a service-wide\
      \ summary."
    example:
      name: "..."
      type: "..."
      clusterRef:
        clusterName: "..."
        displayName: "..."
      serviceState: "UNKNOWN"
      healthSummary: "HISTORY_NOT_AVAILABLE"
      configStalenessStatus: "STALE"
      clientConfigStalenessStatus: "STALE"
      healthChecks:
      - name: "..."
        summary: "NOT_AVAILABLE"
        explanation: "..."
        suppressed: true
      - name: "..."
        summary: "CONCERNING"
        explanation: "..."
        suppressed: true
      serviceUrl: "..."
      roleInstancesUrl: "..."
      maintenanceMode: true
      maintenanceOwners:
      - "ROLE"
      - "CLUSTER"
      config:
        roleTypeConfigs:
        - roleType: "..."
          items:
          - {}
          - {}
        - roleType: "..."
          items:
          - {}
          - {}
        items:
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "OK"
          validationMessage: "..."
          validationWarningsSuppressed: true
        - name: "..."
          value: "..."
          required: true
          default: "..."
          displayName: "..."
          description: "..."
          relatedName: "..."
          sensitive: true
          validationState: "WARNING"
          validationMessage: "..."
          validationWarningsSuppressed: true
      roles:
      - name: "..."
        type: "..."
        hostRef:
          hostId: "..."
          hostname: "..."
        serviceRef:
          peerName: "..."
          clusterName: "..."
          serviceName: "..."
          serviceDisplayName: "..."
          serviceType: "..."
        roleState: "STOPPED"
        commissionState: "OFFLINED"
        healthSummary: "NOT_AVAILABLE"
        configStalenessStatus: "STALE_REFRESHABLE"
        healthChecks:
        - name: "..."
          summary: "NOT_AVAILABLE"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "BAD"
          explanation: "..."
          suppressed: true
        haStatus: "ACTIVE"
        roleUrl: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "ROLE"
        - "SERVICE"
        config:
          items:
          - {}
          - {}
        roleConfigGroupRef:
          roleConfigGroupName: "..."
        zooKeeperServerMode: "REPLICATED_FOLLOWER"
        entityStatus: "NONE"
      - name: "..."
        type: "..."
        hostRef:
          hostId: "..."
          hostname: "..."
        serviceRef:
          peerName: "..."
          clusterName: "..."
          serviceName: "..."
          serviceDisplayName: "..."
          serviceType: "..."
        roleState: "HISTORY_NOT_AVAILABLE"
        commissionState: "OFFLINING"
        healthSummary: "NOT_AVAILABLE"
        configStalenessStatus: "FRESH"
        healthChecks:
        - name: "..."
          summary: "DISABLED"
          explanation: "..."
          suppressed: true
        - name: "..."
          summary: "GOOD"
          explanation: "..."
          suppressed: true
        haStatus: "STANDBY"
        roleUrl: "..."
        maintenanceMode: true
        maintenanceOwners:
        - "ROLE"
        - "HOST"
        config:
          items:
          - {}
          - {}
        roleConfigGroupRef:
          roleConfigGroupName: "..."
        zooKeeperServerMode: "UNKNOWN"
        entityStatus: "CONCERNING_HEALTH"
      displayName: "..."
      roleConfigGroups:
      - name: "..."
        roleType: "..."
        base: true
        config:
          items:
          - {}
          - {}
        displayName: "..."
        serviceRef:
          peerName: "..."
          clusterName: "..."
          serviceName: "..."
          serviceDisplayName: "..."
          serviceType: "..."
      - name: "..."
        roleType: "..."
        base: true
        config:
          items:
          - {}
          - {}
        displayName: "..."
        serviceRef:
          peerName: "..."
          clusterName: "..."
          serviceName: "..."
          serviceDisplayName: "..."
          serviceType: "..."
      replicationSchedules:
      - hdfsArguments:
          sourceService: {}
          sourcePath: "..."
          destinationPath: "..."
          mapreduceServiceName: "..."
          schedulerPoolName: "..."
          userName: "..."
          sourceUser: "..."
          numMaps: 12345
          dryRun: true
          bandwidthPerMap: 12345
          abortOnError: true
          removeMissingFiles: true
          preserveReplicationCount: true
          preserveBlockSize: true
          preservePermissions: true
          logPath: "..."
          skipChecksumChecks: true
          skipListingChecksumChecks: true
          skipTrash: true
          replicationStrategy: "DYNAMIC"
          preserveXAttrs: true
          exclusionFilters:
          - "..."
          - "..."
          raiseSnapshotDiffFailures: true
          destinationCloudAccount: "..."
        hiveArguments:
          sourceService: {}
          tableFilters:
          - {}
          - {}
          exportDir: "..."
          force: true
          replicateData: true
          hdfsArguments: {}
          replicateImpalaMetadata: true
          runInvalidateMetadata: true
          dryRun: true
          numThreads: 12345
        hdfsCloudArguments:
          sourceAccount: "..."
          destinationAccount: "..."
          sourceService: {}
          sourcePath: "..."
          destinationPath: "..."
          mapreduceServiceName: "..."
          schedulerPoolName: "..."
          userName: "..."
          sourceUser: "..."
          numMaps: 12345
          dryRun: true
          bandwidthPerMap: 12345
          abortOnError: true
          removeMissingFiles: true
          preserveReplicationCount: true
          preserveBlockSize: true
          preservePermissions: true
          logPath: "..."
          skipChecksumChecks: true
          skipListingChecksumChecks: true
          skipTrash: true
          replicationStrategy: "STATIC"
          preserveXAttrs: true
          exclusionFilters:
          - "..."
          - "..."
          raiseSnapshotDiffFailures: true
          destinationCloudAccount: "..."
        history:
        - hdfsResult: {}
          hiveResult: {}
          id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        - hdfsResult: {}
          hiveResult: {}
          id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        active: true
        hiveCloudArguments:
          sourceAccount: "..."
          destinationAccount: "..."
          cloudRootPath: "..."
          replicationOption: "METADATA_ONLY"
          sourceService: {}
          tableFilters:
          - {}
          - {}
          exportDir: "..."
          force: true
          replicateData: true
          hdfsArguments: {}
          replicateImpalaMetadata: true
          runInvalidateMetadata: true
          dryRun: true
          numThreads: 12345
        id: 12345
        displayName: "..."
        description: "..."
        startTime: "..."
        endTime: "..."
        interval: 12345
        intervalUnit: "WEEK"
        nextRun: "..."
        paused: true
        alertOnStart: true
        alertOnSuccess: true
        alertOnFail: true
        alertOnAbort: true
      - hdfsArguments:
          sourceService: {}
          sourcePath: "..."
          destinationPath: "..."
          mapreduceServiceName: "..."
          schedulerPoolName: "..."
          userName: "..."
          sourceUser: "..."
          numMaps: 12345
          dryRun: true
          bandwidthPerMap: 12345
          abortOnError: true
          removeMissingFiles: true
          preserveReplicationCount: true
          preserveBlockSize: true
          preservePermissions: true
          logPath: "..."
          skipChecksumChecks: true
          skipListingChecksumChecks: true
          skipTrash: true
          replicationStrategy: "STATIC"
          preserveXAttrs: true
          exclusionFilters:
          - "..."
          - "..."
          raiseSnapshotDiffFailures: true
          destinationCloudAccount: "..."
        hiveArguments:
          sourceService: {}
          tableFilters:
          - {}
          - {}
          exportDir: "..."
          force: true
          replicateData: true
          hdfsArguments: {}
          replicateImpalaMetadata: true
          runInvalidateMetadata: true
          dryRun: true
          numThreads: 12345
        hdfsCloudArguments:
          sourceAccount: "..."
          destinationAccount: "..."
          sourceService: {}
          sourcePath: "..."
          destinationPath: "..."
          mapreduceServiceName: "..."
          schedulerPoolName: "..."
          userName: "..."
          sourceUser: "..."
          numMaps: 12345
          dryRun: true
          bandwidthPerMap: 12345
          abortOnError: true
          removeMissingFiles: true
          preserveReplicationCount: true
          preserveBlockSize: true
          preservePermissions: true
          logPath: "..."
          skipChecksumChecks: true
          skipListingChecksumChecks: true
          skipTrash: true
          replicationStrategy: "DYNAMIC"
          preserveXAttrs: true
          exclusionFilters:
          - "..."
          - "..."
          raiseSnapshotDiffFailures: true
          destinationCloudAccount: "..."
        history:
        - hdfsResult: {}
          hiveResult: {}
          id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        - hdfsResult: {}
          hiveResult: {}
          id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        active: true
        hiveCloudArguments:
          sourceAccount: "..."
          destinationAccount: "..."
          cloudRootPath: "..."
          replicationOption: "METADATA_AND_DATA"
          sourceService: {}
          tableFilters:
          - {}
          - {}
          exportDir: "..."
          force: true
          replicateData: true
          hdfsArguments: {}
          replicateImpalaMetadata: true
          runInvalidateMetadata: true
          dryRun: true
          numThreads: 12345
        id: 12345
        displayName: "..."
        description: "..."
        startTime: "..."
        endTime: "..."
        interval: 12345
        intervalUnit: "DAY"
        nextRun: "..."
        paused: true
        alertOnStart: true
        alertOnSuccess: true
        alertOnFail: true
        alertOnAbort: true
      snapshotPolicies:
      - name: "..."
        description: "..."
        hourlySnapshots: 12345
        dailySnapshots: 12345
        weeklySnapshots: 12345
        monthlySnapshots: 12345
        yearlySnapshots: 12345
        minuteOfHour: 12345
        hoursForHourlySnapshots:
        - 12345
        - 12345
        hourOfDay: 12345
        dayOfWeek: 12345
        dayOfMonth: 12345
        monthOfYear: 12345
        alertOnStart: true
        alertOnSuccess: true
        alertOnFail: true
        alertOnAbort: true
        hbaseArguments:
          tableRegExps:
          - "..."
          - "..."
          storage: "REMOTE_S3"
        hdfsArguments:
          pathPatterns:
          - "..."
          - "..."
        lastCommand:
          hbaseResult: {}
          hdfsResult: {}
          id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        lastSuccessfulCommand:
          hbaseResult: {}
          hdfsResult: {}
          id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        paused: true
      - name: "..."
        description: "..."
        hourlySnapshots: 12345
        dailySnapshots: 12345
        weeklySnapshots: 12345
        monthlySnapshots: 12345
        yearlySnapshots: 12345
        minuteOfHour: 12345
        hoursForHourlySnapshots:
        - 12345
        - 12345
        hourOfDay: 12345
        dayOfWeek: 12345
        dayOfMonth: 12345
        monthOfYear: 12345
        alertOnStart: true
        alertOnSuccess: true
        alertOnFail: true
        alertOnAbort: true
        hbaseArguments:
          tableRegExps:
          - "..."
          - "..."
          storage: "LOCAL"
        hdfsArguments:
          pathPatterns:
          - "..."
          - "..."
        lastCommand:
          hbaseResult: {}
          hdfsResult: {}
          id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        lastSuccessfulCommand:
          hbaseResult: {}
          hdfsResult: {}
          id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        paused: true
      entityStatus: "STOPPED"
  ApiServiceConfig:
    title: "ApiServiceConfig"
    allOf:
    - $ref: "#/definitions/ApiConfigList"
    - properties:
        roleTypeConfigs:
          type: "array"
          description: "List of role type configurations.\nOnly available up to API\
            \ v2."
          items:
            $ref: "#/definitions/ApiRoleTypeConfig"
    description: "Service and role type configuration."
  ApiServiceList:
    title: "ApiServiceList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiService"
    description: "A list of services."
  ApiServiceRef:
    type: "object"
    properties:
      peerName:
        type: "string"
        example: "null"
        description: "The name of the CM peer corresponding to the remote CM that\
          \ manages the\nreferenced service. This should only be set when referencing\
          \ a remote\nservice."
      clusterName:
        type: "string"
        example: "null"
        description: "The enclosing cluster for this service."
      serviceName:
        type: "string"
        example: "null"
        description: "The service name."
      serviceDisplayName:
        type: "string"
        example: "null"
        description: ""
      serviceType:
        type: "string"
        example: "null"
        description: "The service type. This is available since version 32"
    title: "ApiServiceRef"
    description: "A serviceRef references a service. It is identified by the \"serviceName\"\
      ,\n\"clusterName\" (name of the cluster which the service belongs to) and\n\
      an optional \"peerName\" (to reference a remote service i.e. services managed\n\
      by other CM instances). To operate on the service object, use the API with\n\
      those fields as parameters."
    example:
      peerName: "..."
      clusterName: "..."
      serviceName: "..."
      serviceDisplayName: "..."
      serviceType: "..."
  ApiServiceState:
    type: "string"
    title: "ApiServiceState"
    description: "Represents the configured run state of a service."
    enum:
    - "HISTORY_NOT_AVAILABLE"
    - "UNKNOWN"
    - "STARTING"
    - "STARTED"
    - "STOPPING"
    - "STOPPED"
    - "NA"
  ApiServiceTypeList:
    title: "ApiServiceTypeList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          example: "null"
          description: ""
          items:
            type: "string"
    description: "A list of service types that exists for a given cluster."
  ApiShutdownReadiness:
    type: "object"
    properties:
      state:
        description: "Shutdown readiness state"
        $ref: "#/definitions/ShutdownReadinessState"
    title: "ApiShutdownReadiness"
    description: "Cloudera Manager server's shutdown readiness"
    example:
      state: "NOT_READY"
  ApiSimpleRollingRestartClusterArgs:
    type: "object"
    properties:
      slaveBatchSize:
        type: "number"
        description: "Number of hosts with slave roles to restart at a time.\nMust\
          \ be greater than zero. Default is 1."
      sleepSeconds:
        type: "number"
        description: "Number of seconds to sleep between restarts of slave host batches.\n\
          <p>\nMust be greater than or equal to 0. Default is 0."
      slaveFailCountThreshold:
        type: "number"
        description: "The threshold for number of slave host batches that are allowed\
          \ to fail\nto restart before the entire command is considered failed.\n\
          <p>\nMust be greater than or equal to 0. Default is 0.\n<p>\nThis argument\
          \ is for ADVANCED users only.\n</p>"
    title: "ApiSimpleRollingRestartClusterArgs"
    description: "Basic arguments used for Rolling Restart Cluster commands."
    example:
      slaveBatchSize: 12345
      sleepSeconds: 12345
      slaveFailCountThreshold: 12345
  ApiSnapshotCommand:
    title: "ApiSnapshotCommand"
    allOf:
    - $ref: "#/definitions/ApiCommand"
    - properties:
        hbaseResult:
          description: "Results for snapshot commands on HBase services."
          $ref: "#/definitions/ApiHBaseSnapshotResult"
        hdfsResult:
          description: "Results for snapshot commands on Hdfs services."
          $ref: "#/definitions/ApiHdfsSnapshotResult"
    description: "Information about snapshot commands.\n<p/>\nThis object holds all\
      \ the information a regular ApiCommand object provides,\nand adds specific information\
      \ about the results of a snapshot command.\n<p/>\nDepending on the type of the\
      \ service where the snapshot command was run, a\ndifferent result property will\
      \ be populated."
  ApiSnapshotCommandList:
    title: "ApiSnapshotCommandList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiSnapshotCommand"
    description: "A list of snapshot commands."
  ApiSnapshotPolicy:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Name of the snapshot policy."
      description:
        type: "string"
        example: "null"
        description: "Description of the snapshot policy."
      hourlySnapshots:
        type: "number"
        description: "Number of hourly snapshots to be retained."
      dailySnapshots:
        type: "number"
        description: "Number of daily snapshots to be retained."
      weeklySnapshots:
        type: "number"
        description: "Number of weekly snapshots to be retained."
      monthlySnapshots:
        type: "number"
        description: "Number of monthly snapshots to be retained."
      yearlySnapshots:
        type: "number"
        description: "Number of yearly snapshots to be retained."
      minuteOfHour:
        type: "number"
        description: "Minute in the hour that hourly, daily, weekly, monthly and yearly\n\
          snapshots should be created. Valid values are 0 to 59. Default value is\
          \ 0."
      hoursForHourlySnapshots:
        type: "array"
        description: "Hours of the day that hourly snapshots should be created. Valid\
          \ values\nare 0 to 23. If this list is null or empty, then hourly snapshots\
          \ are\ncreated for every hour."
        items:
          type: "number"
      hourOfDay:
        type: "number"
        description: "Hour in the day that daily, weekly, monthly and yearly snapshots\
          \ should be\ncreated. Valid values are 0 to 23. Default value is 0."
      dayOfWeek:
        type: "number"
        description: "Day of the week that weekly snapshots should be created. Valid\
          \ values are\n1 to 7, 1 representing Sunday. Default value is 1."
      dayOfMonth:
        type: "number"
        description: "Day of the month that monthly and yearly snapshots should be\
          \ created.\nValues from 1 to 31 are allowed. Additionally 0 to -30 can be\
          \ used to\nspecify offsets from the last day of the month. Default value\
          \ is 1.\n<p/>\nIf this value is invalid for any month for which snapshots\
          \ are required,\nthe backend will throw an exception."
      monthOfYear:
        type: "number"
        description: "Month of the year that yearly snapshots should be created. Valid\
          \ values\nare 1 to 12, 1 representing January. Default value is 1."
      alertOnStart:
        type: "boolean"
        description: "Whether to alert on start of snapshot creation/deletion activity."
      alertOnSuccess:
        type: "boolean"
        description: "Whether to alert on successful completion of snapshot creation/deletion\n\
          activity."
      alertOnFail:
        type: "boolean"
        description: "Whether to alert on failure of snapshot creation/deletion activity."
      alertOnAbort:
        type: "boolean"
        description: "Whether to alert on abort of snapshot creation/deletion activity."
      hbaseArguments:
        description: "Arguments specific to HBase snapshot policies."
        $ref: "#/definitions/ApiHBaseSnapshotPolicyArguments"
      hdfsArguments:
        description: "Arguments specific to Hdfs snapshot policies."
        $ref: "#/definitions/ApiHdfsSnapshotPolicyArguments"
      lastCommand:
        description: "Latest command of this policy.\nThe command might still be active."
        $ref: "#/definitions/ApiSnapshotCommand"
      lastSuccessfulCommand:
        description: "Last successful command of this policy.\nReturns null if there\
          \ has been no successful command."
        $ref: "#/definitions/ApiSnapshotCommand"
      paused:
        type: "boolean"
        description: "Whether to pause a snapshot policy, available since V11."
    title: "ApiSnapshotPolicy"
    description: "A snapshot policy.\n<p/>\nSnapshot policies have service specific\
      \ arguments. This object has methods\nto retrieve arguments for all supported\
      \ types of snapshots, but only one\nargument type is allowed to be set; the\
      \ backend will check that the provided\nargument matches the type of the service\
      \ with which the snapshot policy is\nassociated."
    example:
      name: "..."
      description: "..."
      hourlySnapshots: 12345
      dailySnapshots: 12345
      weeklySnapshots: 12345
      monthlySnapshots: 12345
      yearlySnapshots: 12345
      minuteOfHour: 12345
      hoursForHourlySnapshots:
      - 12345
      - 12345
      hourOfDay: 12345
      dayOfWeek: 12345
      dayOfMonth: 12345
      monthOfYear: 12345
      alertOnStart: true
      alertOnSuccess: true
      alertOnFail: true
      alertOnAbort: true
      hbaseArguments:
        tableRegExps:
        - "..."
        - "..."
        storage: "REMOTE_S3"
      hdfsArguments:
        pathPatterns:
        - "..."
        - "..."
      lastCommand:
        hbaseResult:
          processedTableCount: 12345
          processedTables:
          - "..."
          - "..."
          unprocessedTableCount: 12345
          unprocessedTables:
          - "..."
          - "..."
          createdSnapshotCount: 12345
          createdSnapshots:
          - {}
          - {}
          deletedSnapshotCount: 12345
          deletedSnapshots:
          - {}
          - {}
          creationErrorCount: 12345
          creationErrors:
          - {}
          - {}
          deletionErrorCount: 12345
          deletionErrors:
          - {}
          - {}
        hdfsResult:
          processedPathCount: 12345
          processedPaths:
          - "..."
          - "..."
          unprocessedPathCount: 12345
          unprocessedPaths:
          - "..."
          - "..."
          createdSnapshotCount: 12345
          createdSnapshots:
          - {}
          - {}
          deletedSnapshotCount: 12345
          deletedSnapshots:
          - {}
          - {}
          creationErrorCount: 12345
          creationErrors:
          - {}
          - {}
          deletionErrorCount: 12345
          deletionErrors:
          - {}
          - {}
        id: 12345
        name: "..."
        startTime: "..."
        endTime: "..."
        active: true
        success: true
        resultMessage: "..."
        resultDataUrl: "..."
        clusterRef:
          clusterName: "..."
          displayName: "..."
        serviceRef:
          peerName: "..."
          clusterName: "..."
          serviceName: "..."
          serviceDisplayName: "..."
          serviceType: "..."
        roleRef:
          clusterName: "..."
          serviceName: "..."
          roleName: "..."
        hostRef:
          hostId: "..."
          hostname: "..."
        parent:
          id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        children:
          items:
          - {}
          - {}
        canRetry: true
      lastSuccessfulCommand:
        hbaseResult:
          processedTableCount: 12345
          processedTables:
          - "..."
          - "..."
          unprocessedTableCount: 12345
          unprocessedTables:
          - "..."
          - "..."
          createdSnapshotCount: 12345
          createdSnapshots:
          - {}
          - {}
          deletedSnapshotCount: 12345
          deletedSnapshots:
          - {}
          - {}
          creationErrorCount: 12345
          creationErrors:
          - {}
          - {}
          deletionErrorCount: 12345
          deletionErrors:
          - {}
          - {}
        hdfsResult:
          processedPathCount: 12345
          processedPaths:
          - "..."
          - "..."
          unprocessedPathCount: 12345
          unprocessedPaths:
          - "..."
          - "..."
          createdSnapshotCount: 12345
          createdSnapshots:
          - {}
          - {}
          deletedSnapshotCount: 12345
          deletedSnapshots:
          - {}
          - {}
          creationErrorCount: 12345
          creationErrors:
          - {}
          - {}
          deletionErrorCount: 12345
          deletionErrors:
          - {}
          - {}
        id: 12345
        name: "..."
        startTime: "..."
        endTime: "..."
        active: true
        success: true
        resultMessage: "..."
        resultDataUrl: "..."
        clusterRef:
          clusterName: "..."
          displayName: "..."
        serviceRef:
          peerName: "..."
          clusterName: "..."
          serviceName: "..."
          serviceDisplayName: "..."
          serviceType: "..."
        roleRef:
          clusterName: "..."
          serviceName: "..."
          roleName: "..."
        hostRef:
          hostId: "..."
          hostname: "..."
        parent:
          id: 12345
          name: "..."
          startTime: "..."
          endTime: "..."
          active: true
          success: true
          resultMessage: "..."
          resultDataUrl: "..."
          clusterRef: {}
          serviceRef: {}
          roleRef: {}
          hostRef: {}
          parent: {}
          children: {}
          canRetry: true
        children:
          items:
          - {}
          - {}
        canRetry: true
      paused: true
  ApiSnapshotPolicyList:
    title: "ApiSnapshotPolicyList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiSnapshotPolicy"
    description: "A list of snapshot policies."
  ApiTenantUtilization:
    type: "object"
    properties:
      tenantName:
        type: "string"
        example: "null"
        description: "Name of the tenant."
      cpuUtilizationPercentage:
        type: "number"
        description: "Percentage of CPU resource used by workloads."
      memoryUtilizationPercentage:
        type: "number"
        description: "Percentage of memory used by workloads."
    title: "ApiTenantUtilization"
    description: "Utilization report information of a tenant."
    example:
      tenantName: "..."
      cpuUtilizationPercentage: 12345.0
      memoryUtilizationPercentage: 12345.0
  ApiTenantUtilizationList:
    title: "ApiTenantUtilizationList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiTenantUtilization"
    description: "A list of tenant utilization reports."
  ApiTimeSeries:
    type: "object"
    properties:
      metadata:
        description: "Metadata for the metric."
        $ref: "#/definitions/ApiTimeSeriesMetadata"
      data:
        type: "array"
        description: "List of metric data points."
        items:
          $ref: "#/definitions/ApiTimeSeriesData"
    title: "ApiTimeSeries"
    description: "A time series represents a stream of data points.\nEach data point\
      \ contains a time and a value.\nTime series are returned by executing a tsquery."
    example:
      metadata:
        metricName: "..."
        entityName: "..."
        startTime: "..."
        endTime: "..."
        attributes:
          property1: "..."
          property2: "..."
        unitNumerators:
        - "..."
        - "..."
        unitDenominators:
        - "..."
        - "..."
        expression: "..."
        alias: "..."
        metricCollectionFrequencyMs: 12345
        rollupUsed: "..."
      data:
      - timestamp: "..."
        value: 12345.0
        type: "..."
        aggregateStatistics:
          sampleTime: "..."
          sampleValue: 12345.0
          count: 12345
          min: 12345.0
          minTime: "..."
          max: 12345.0
          maxTime: "..."
          mean: 12345.0
          stdDev: 12345.0
          crossEntityMetadata: {}
      - timestamp: "..."
        value: 12345.0
        type: "..."
        aggregateStatistics:
          sampleTime: "..."
          sampleValue: 12345.0
          count: 12345
          min: 12345.0
          minTime: "..."
          max: 12345.0
          maxTime: "..."
          mean: 12345.0
          stdDev: 12345.0
          crossEntityMetadata: {}
  ApiTimeSeriesAggregateStatistics:
    type: "object"
    properties:
      sampleTime:
        type: "string"
        example: "null"
        description: "The timestamp of the sample data point. Note that the timestamp\n\
          reflects coordinated universal time (UTC) and not necessarily the server's\n\
          time zone. The rest API formats the UTC timestamp as an ISO-8061 string."
      sampleValue:
        type: "number"
        description: "The sample data point value representing an actual sample value\
          \ picked\nfrom the underlying data that is being aggregated."
      count:
        type: "number"
        description: "The number of individual data points aggregated in this data\
          \ point."
      min:
        type: "number"
        description: "This minimum value encountered while producing this aggregate\
          \ data point.\nIf this is a cross-time aggregate then this is the minimum\
          \ value\nencountered during the aggregation period. If this is a cross-entity\n\
          aggregate then this is the minimum value encountered across all entities.\n\
          If this is a cross-time, cross-entity aggregate, then this is the minimum\n\
          value for any entity across the aggregation period."
      minTime:
        type: "string"
        example: "null"
        description: "The timestamp of the minimum data point. Note that the timestamp\n\
          reflects coordinated universal time (UTC) and not necessarily the server's\n\
          time zone. The rest API formats the UTC timestamp as an ISO-8061 string."
      max:
        type: "number"
        description: "This maximum value encountered while producing this aggregate\
          \ data point.\nIf this is a cross-time aggregate then this is the maximum\
          \ value\nencountered during the aggregation period. If this is a cross-entity\n\
          aggregate then this is the maximum value encountered across all entities.\n\
          If this is a cross-time, cross-entity aggregate, then this is the maximum\n\
          value for any entity across the aggregation period."
      maxTime:
        type: "string"
        example: "null"
        description: "The timestamp of the maximum data point. Note that the timestamp\n\
          reflects coordinated universal time (UTC) and not necessarily the server's\n\
          time zone. The rest API formats the UTC timestamp as an ISO-8061 string."
      mean:
        type: "number"
        description: "The mean of the values of all data-points for this aggregate\
          \ data point."
      stdDev:
        type: "number"
        description: "The standard deviation of the values of all data-points for\
          \ this aggregate\ndata point."
      crossEntityMetadata:
        description: "If the data-point is for a cross entity aggregate (e.g.,\nfd_open_across_datanodes)\
          \ returns the cross entity metadata, null otherwise."
        $ref: "#/definitions/ApiTimeSeriesCrossEntityMetadata"
    title: "ApiTimeSeriesAggregateStatistics"
    description: "Statistics related to one time series aggregate data point. It is\n\
      available from v6 for data points containing aggregate data. It includes\nfurther\
      \ statistics about the data point. An aggregate can be across\nentities (e.g.,\
      \ fd_open_across_datanodes), over time (e.g., a daily point\nfor the fd_open\
      \ metric for a specific DataNode), or both (e.g., a daily\npoint for the fd_open_across_datanodes\
      \ metric). If the data point is for\nnon-aggregate date this will return null."
    example:
      sampleTime: "..."
      sampleValue: 12345.0
      count: 12345
      min: 12345.0
      minTime: "..."
      max: 12345.0
      maxTime: "..."
      mean: 12345.0
      stdDev: 12345.0
      crossEntityMetadata:
        maxEntityDisplayName: "..."
        maxEntityName: "..."
        minEntityDisplayName: "..."
        minEntityName: "..."
        numEntities: 12345.0
  ApiTimeSeriesCrossEntityMetadata:
    type: "object"
    properties:
      maxEntityDisplayName:
        type: "string"
        example: "null"
        description: "The display name of the entity that had the maximum value for\
          \ the\ncross-entity aggregate metric."
      maxEntityName:
        type: "string"
        example: "null"
        description: "The name of the entity that had the maximum value for the\n\
          cross-entity aggregate metric.\n<p>\nAvailable since API v11."
      minEntityDisplayName:
        type: "string"
        example: "null"
        description: "The display name of the entity that had the minimum value for\
          \ the\ncross-entity aggregate metric."
      minEntityName:
        type: "string"
        example: "null"
        description: "The name of the entity that had the minimum value for the\n\
          cross-entity aggregate metric.\n<p>\nAvailable since API v11."
      numEntities:
        type: "number"
        description: "The number of entities covered by this point. For a raw cross-entity\
          \ point\nthis number is exact. For a rollup point this number is an average,\
          \ since\nthe number of entities being aggregated can change over the aggregation\n\
          period."
    title: "ApiTimeSeriesCrossEntityMetadata"
    description: "A class holding additional metadata to the ApiTimeSeriesAggregateStatistics\n\
      class that applies specifically to cross-entity aggregate metrics."
    example:
      maxEntityDisplayName: "..."
      maxEntityName: "..."
      minEntityDisplayName: "..."
      minEntityName: "..."
      numEntities: 12345.0
  ApiTimeSeriesData:
    type: "object"
    properties:
      timestamp:
        type: "string"
        example: "null"
        description: "The timestamp for this time series data point. Note that the\
          \ timestamp\nreflects coordinated universal time (UTC) and not necessarily\
          \ the server's\ntime zone. The rest API formats the UTC timestamp as an\
          \ ISO-8061 string."
      value:
        type: "number"
        description: "The value of the time series data."
      type:
        type: "string"
        example: "null"
        description: "The type of the time series data."
      aggregateStatistics:
        description: "Available from v6 for data points containing aggregate data.\
          \ It includes\nfurther statistics about the data point. An aggregate can\
          \ be across\nentities (e.g., fd_open_across_datanodes), over time (e.g.,\
          \ a daily point\nfor the fd_open metric for a specific DataNode), or both\
          \ (e.g., a daily\npoint for the fd_open_across_datanodes metric). If the\
          \ data point is for\nnon-aggregate date this will return null."
        $ref: "#/definitions/ApiTimeSeriesAggregateStatistics"
    title: "ApiTimeSeriesData"
    description: "A single data point of time series data."
    example:
      timestamp: "..."
      value: 12345.0
      type: "..."
      aggregateStatistics:
        sampleTime: "..."
        sampleValue: 12345.0
        count: 12345
        min: 12345.0
        minTime: "..."
        max: 12345.0
        maxTime: "..."
        mean: 12345.0
        stdDev: 12345.0
        crossEntityMetadata:
          maxEntityDisplayName: "..."
          maxEntityName: "..."
          minEntityDisplayName: "..."
          minEntityName: "..."
          numEntities: 12345.0
  ApiTimeSeriesEntityAttribute:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Name of the of the attribute.\nThis name uniquely identifies\
          \ this attribute."
      displayName:
        type: "string"
        example: "null"
        description: "Display name of the attribute."
      description:
        type: "string"
        example: "null"
        description: "Description of the attribute."
      isValueCaseSensitive:
        type: "boolean"
        description: "Returns whether to treat attribute values as case-sensitive."
    title: "ApiTimeSeriesEntityAttribute"
    description: "A time series entity attribute represents a possible attribute of\
      \ a time\nseries entity type monitored by the Cloudera Management Services.\n\
      <p>\nAvailable since API v11."
    example:
      name: "..."
      displayName: "..."
      description: "..."
      isValueCaseSensitive: true
  ApiTimeSeriesEntityAttributeList:
    title: "ApiTimeSeriesEntityAttributeList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiTimeSeriesEntityAttribute"
    description: "A list of ApiTimeSeriesEntityAttribute objects"
  ApiTimeSeriesEntityType:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "Returns the name of the entity type. This name uniquely identifies\
          \ this\nentity type."
      category:
        type: "string"
        example: "null"
        description: "Returns the category of the entity type."
      nameForCrossEntityAggregateMetrics:
        type: "string"
        example: "null"
        description: "Returns the string to use to pluralize the name of the entity\
          \ for cross\nentity aggregate metrics."
      displayName:
        type: "string"
        example: "null"
        description: "Returns the display name of the entity type."
      description:
        type: "string"
        example: "null"
        description: "Returns the description of the entity type."
      immutableAttributeNames:
        type: "array"
        example: "null"
        description: "Returns the list of immutable attributes for this entity type.\
          \ Immutable\nattributes values for an entity may not change over its lifetime."
        items:
          type: "string"
      mutableAttributeNames:
        type: "array"
        example: "null"
        description: "Returns the list of mutable attributes for this entity type.\
          \ Mutable\nattributes for an entity may change over its lifetime."
        items:
          type: "string"
      entityNameFormat:
        type: "array"
        example: "null"
        description: "Returns a list of attribute names that will be used to construct\
          \ entity\nnames for entities of this type. The attributes named here must\
          \ be immutable\nattributes of this type or a parent type."
        items:
          type: "string"
      entityDisplayNameFormat:
        type: "string"
        example: "null"
        description: "Returns a format string that will be used to construct the display\
          \ name of\nentities of this type. If this returns null the entity name would\
          \ be used\nas the display name.\n\nThe entity attribute values are used\
          \ to replace $attribute name portions of\nthis format string. For example,\
          \ an entity with roleType \"DATANODE\" and\nhostname \"foo.com\" will have\
          \ a display name \"DATANODE (foo.com)\" if the\nformat is \"$roleType ($hostname)\"\
          ."
      parentMetricEntityTypeNames:
        type: "array"
        example: "null"
        description: "Returns a list of metric entity type names which are parents\
          \ of this\nmetric entity type. A metric entity type inherits the attributes\
          \ of\nits ancestors. For example a role metric entity type has its service\
          \ as a\nparent. A service metric entity type has a cluster as a parent.\
          \ The role\ntype inherits its cluster name attribute through its service\
          \ parent. Only\nparent ancestors should be returned here. In the example\
          \ given, only the\nservice metric entity type should be specified in the\
          \ parent list."
        items:
          type: "string"
    title: "ApiTimeSeriesEntityType"
    description: "Describe a time series entity type and attributes associated with\n\
      this entity type.\n<p>\nAvailable since API v11."
    example:
      name: "..."
      category: "..."
      nameForCrossEntityAggregateMetrics: "..."
      displayName: "..."
      description: "..."
      immutableAttributeNames:
      - "..."
      - "..."
      mutableAttributeNames:
      - "..."
      - "..."
      entityNameFormat:
      - "..."
      - "..."
      entityDisplayNameFormat: "..."
      parentMetricEntityTypeNames:
      - "..."
      - "..."
  ApiTimeSeriesEntityTypeList:
    title: "ApiTimeSeriesEntityTypeList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiTimeSeriesEntityType"
    description: "A list of ApiTimeSeriesEntityType objects"
  ApiTimeSeriesMetadata:
    type: "object"
    properties:
      metricName:
        type: "string"
        example: "null"
        description: "The metric name for the time series."
      entityName:
        type: "string"
        example: "null"
        description: "The display name for the entity associated with this time series.\n\
          For example, if this was a time series for an HDFS service the entity name\n\
          might be something like \"My HDFS Service\". If it was for a host it might\n\
          be something like \"myhost.mysite.com\"."
      startTime:
        type: "string"
        example: "null"
        description: "The start time for the time series."
      endTime:
        type: "string"
        example: "null"
        description: "The end time for the time series."
      attributes:
        type: "object"
        example: "null"
        description: "The attributes for the time series. Note that the entityName\
          \ entry in\nthis map is not the same as the entityName field in this\nApiTimeSeriesMetadata.\
          \ The entityName entry in this map is a unique\nidentifier for the entity\
          \ and not the name displayed in the UI.\n\nFor example, if this was a time\
          \ series for the YARN Job History Server\nthe entityName entry in this map\
          \ might be something like\n\"yarn-JOBHISTORY-6bd17ceb1489aae93fef4c867350d0dd\""
        additionalProperties:
          type: "string"
      unitNumerators:
        type: "array"
        example: "null"
        description: "The numerators of the units for the time series."
        items:
          type: "string"
      unitDenominators:
        type: "array"
        example: "null"
        description: "The denominators of the units for the time series."
        items:
          type: "string"
      expression:
        type: "string"
        example: "null"
        description: "The tsquery expression that could be used to extract just this\
          \ stream."
      alias:
        type: "string"
        example: "null"
        description: "The alias for this stream's metric. Aliases correspond to use\
          \ of the 'as'\nkeyword in the tsquery."
      metricCollectionFrequencyMs:
        type: "number"
        description: "The minimum frequency at which the underlying metric for this\
          \ stream is\ncollected. Note that this can be null if the stream returns\
          \ irregularly\nsampled data."
      rollupUsed:
        type: "string"
        example: "null"
        description: "The aggregate rollup for the returned data. This can be TEN_MINUTELY,\n\
          HOURLY, SIX_HOURLY, DAILY, or WEEKLY."
    title: "ApiTimeSeriesMetadata"
    description: "Metadata for a time series."
    example:
      metricName: "..."
      entityName: "..."
      startTime: "..."
      endTime: "..."
      attributes:
        property1: "..."
        property2: "..."
      unitNumerators:
      - "..."
      - "..."
      unitDenominators:
      - "..."
      - "..."
      expression: "..."
      alias: "..."
      metricCollectionFrequencyMs: 12345
      rollupUsed: "..."
  ApiTimeSeriesRequest:
    type: "object"
    properties:
      query:
        type: "string"
        example: "null"
        description: "tsquery to run against the CM time-series data store.\nPlease\
          \ see the <a href=\"http://tiny.cloudera.com/cm_tsquery\">\ntsquery language\
          \ documentation</a>.<p/>"
      from:
        type: "string"
        example: "null"
        description: "Start of the period to query in ISO 8601 format (defaults to\
          \ 5 minutes\nbefore the end of the period)."
      to:
        type: "string"
        example: "null"
        description: "End of the period to query in ISO 8601 format (defaults to current\
          \ time)."
      contentType:
        type: "string"
        example: "null"
        description: "contentType to return the response in. The content types \"\
          application/json\"\nand \"text/csv\" are supported. This defaults to \"\
          application/json\". If\n\"text/csv\" is specified then we return one row\
          \ per time series data point,\nand we don't return any of the metadata."
      desiredRollup:
        type: "string"
        example: "null"
        description: "Aggregate rollup level desired for the response data.\nValid\
          \ values are RAW, TEN_MINUTELY, HOURLY, SIX_HOURLY, DAILY, and WEEKLY.\n\
          Note that if the mustUseDesiredRollup parameter is not set, then the\nmonitoring\
          \ server can decide to return a different rollup level."
      mustUseDesiredRollup:
        type: "boolean"
        description: "If set to true, then the tsquery will return data with the desired\n\
          aggregate rollup level."
    title: "ApiTimeSeriesRequest"
    description: "Request object containing information needed for querying timeseries\
      \ data.\n\nAvailable since API v11."
    example:
      query: "..."
      from: "..."
      to: "..."
      contentType: "..."
      desiredRollup: "..."
      mustUseDesiredRollup: true
  ApiTimeSeriesResponse:
    type: "object"
    properties:
      timeSeries:
        type: "array"
        description: "The time series data for this single query response."
        items:
          $ref: "#/definitions/ApiTimeSeries"
      warnings:
        type: "array"
        example: "null"
        description: "The warnings for this single query response."
        items:
          type: "string"
      timeSeriesQuery:
        type: "string"
        example: "null"
        description: "The query for this single query response."
    title: "ApiTimeSeriesResponse"
    description: "The time series response for a time series query."
    example:
      timeSeries:
      - metadata:
          metricName: "..."
          entityName: "..."
          startTime: "..."
          endTime: "..."
          attributes:
            property1: "..."
            property2: "..."
          unitNumerators:
          - "..."
          - "..."
          unitDenominators:
          - "..."
          - "..."
          expression: "..."
          alias: "..."
          metricCollectionFrequencyMs: 12345
          rollupUsed: "..."
        data:
        - timestamp: "..."
          value: 12345.0
          type: "..."
          aggregateStatistics: {}
        - timestamp: "..."
          value: 12345.0
          type: "..."
          aggregateStatistics: {}
      - metadata:
          metricName: "..."
          entityName: "..."
          startTime: "..."
          endTime: "..."
          attributes:
            property1: "..."
            property2: "..."
          unitNumerators:
          - "..."
          - "..."
          unitDenominators:
          - "..."
          - "..."
          expression: "..."
          alias: "..."
          metricCollectionFrequencyMs: 12345
          rollupUsed: "..."
        data:
        - timestamp: "..."
          value: 12345.0
          type: "..."
          aggregateStatistics: {}
        - timestamp: "..."
          value: 12345.0
          type: "..."
          aggregateStatistics: {}
      warnings:
      - "..."
      - "..."
      timeSeriesQuery: "..."
  ApiTimeSeriesResponseList:
    title: "ApiTimeSeriesResponseList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: "The list of responses for this query response list."
          items:
            $ref: "#/definitions/ApiTimeSeriesResponse"
    description: "A generic list."
  ApiUser:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The username, which is unique within a Cloudera Manager installation."
      password:
        type: "string"
        example: "null"
        description: "Returns the user password.\n<p>\nPasswords are not returned\
          \ when querying user information, so this\nproperty will always be empty\
          \ when reading information from a server."
      roles:
        type: "array"
        example: "null"
        description: "A list of roles this user belongs to.\n<p>\nIn Cloudera Express,\
          \ possible values are:\n<ul>\n<li><b>ROLE_ADMIN</b></li>\n<li><b>ROLE_USER</b></li>\n\
          </ul>\nIn Cloudera Enterprise Datahub Edition, additional possible values\
          \ are:\n<ul>\n<li><b>ROLE_LIMITED</b>: Added in Cloudera Manager 5.0</li>\n\
          <li><b>ROLE_OPERATOR</b>: Added in Cloudera Manager 5.1</li>\n<li><b>ROLE_CONFIGURATOR</b>:\
          \ Added in Cloudera Manager 5.1</li>\n<li><b>ROLE_CLUSTER_ADMIN</b>: Added\
          \ in Cloudera Manager 5.2</li>\n<li><b>ROLE_BDR_ADMIN</b>: Added in Cloudera\
          \ Manager 5.2</li>\n<li><b>ROLE_NAVIGATOR_ADMIN</b>: Added in Cloudera Manager\
          \ 5.2</li>\n<li><b>ROLE_USER_ADMIN</b>: Added in Cloudera Manager 5.2</li>\n\
          <li><b>ROLE_KEY_ADMIN</b>: Added in Cloudera Manager 5.5</li>\n</ul>\nAn\
          \ empty list implies ROLE_USER.\n<p>\nNote that although this interface\
          \ provides a list of roles, a user should\nonly be assigned a single role\
          \ at a time."
        items:
          type: "string"
      pwHash:
        type: "string"
        example: "null"
        description: "NOTE: Only available in the \"export\" view"
      pwSalt:
        type: "number"
        description: "NOTE: Only available in the \"export\" view"
      pwLogin:
        type: "boolean"
        description: "NOTE: Only available in the \"export\" view"
    title: "ApiUser"
    description: "This is the model for user information in the API prior to v18.\
      \ Post v18,\nplease refer to ApiUser2.java.\n<p>\nNote that any method that\
      \ returns user information will not contain any\npassword information. The password\
      \ property is only used when creating\nor updating users."
    example:
      name: "..."
      password: "..."
      roles:
      - "..."
      - "..."
      pwHash: "..."
      pwSalt: 12345
      pwLogin: true
  ApiUser2:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The username, which is unique within a Cloudera Manager installation."
      password:
        type: "string"
        example: "null"
        description: "Returns the user password.\n<p>\nPasswords are not returned\
          \ when querying user information, so this\nproperty will always be empty\
          \ when reading information from a server."
      authRoles:
        type: "array"
        description: "A list of ApiAuthRole that this user possesses."
        items:
          $ref: "#/definitions/ApiAuthRoleRef"
      pwHash:
        type: "string"
        example: "null"
        description: "NOTE: Only available in the \"export\" view"
      pwSalt:
        type: "number"
        description: "NOTE: Only available in the \"export\" view"
      pwLogin:
        type: "boolean"
        description: "NOTE: Only available in the \"export\" view"
    title: "ApiUser2"
    description: "This is the model for user information in the API, v18 and beyond.\n\
      <p>\nNote that any method that returns user information will not contain any\n\
      password information. The password property is only used when creating\nor updating\
      \ users."
    example:
      name: "..."
      password: "..."
      authRoles:
      - displayName: "..."
        name: "..."
        uuid: "..."
      - displayName: "..."
        name: "..."
        uuid: "..."
      pwHash: "..."
      pwSalt: 12345
      pwLogin: true
  ApiUser2List:
    title: "ApiUser2List"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiUser2"
    description: "A list of users."
  ApiUser2Ref:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The name of the user, which uniquely identifies it in a CM installation."
    title: "ApiUser2Ref"
    description: "A userRef references a user."
    example:
      name: "..."
  ApiUserList:
    title: "ApiUserList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiUser"
    description: "A list of users."
  ApiUserSession:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The username associated with the session.\n<p>\nThis will be\
          \ the same value shown to the logged in user in the UI, which\nwill normally\
          \ be the same value they typed when logging in, but it is\npossible that\
          \ in certain external authentication scenarios, it will differ\nfrom that\
          \ value."
      remoteAddr:
        type: "string"
        example: "null"
        description: "The remote IP address for the session.\n<p>\nThis will be the\
          \ remote IP address for the last request made as part of\nthis session.\
          \ It is not guaranteed to be the same IP address as was\npreviously used,\
          \ or the address used to initiate the session."
      lastRequest:
        type: "string"
        example: "null"
        description: "The date and time of the last request received as part of this\
          \ session.\n<p>\nThis will be returned in ISO 8601 format from the REST\
          \ API."
    title: "ApiUserSession"
    description: "This is the model for interactive user session information in the\
      \ API.\n<p>\nA user may have more than one active session. Each such session\
      \ will have\nits own session object."
    example:
      name: "..."
      remoteAddr: "..."
      lastRequest: "..."
  ApiUserSessionList:
    title: "ApiUserSessionList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiUserSession"
    description: "A list of user sessions."
  ApiVersionInfo:
    type: "object"
    properties:
      version:
        type: "string"
        example: "null"
        description: "Version."
      snapshot:
        type: "boolean"
        description: "Whether this build is a development snapshot."
      buildUser:
        type: "string"
        example: "null"
        description: "The user performing the build."
      buildTimestamp:
        type: "string"
        example: "null"
        description: "Build timestamp."
      gitHash:
        type: "string"
        example: "null"
        description: "Source control management hash."
    title: "ApiVersionInfo"
    description: "Version information of Cloudera Manager itself."
    example:
      version: "..."
      snapshot: true
      buildUser: "..."
      buildTimestamp: "..."
      gitHash: "..."
  ApiWatchedDir:
    type: "object"
    properties:
      path:
        type: "string"
        example: "null"
        description: ""
    title: "ApiWatchedDir"
    description: ""
    example:
      path: "..."
  ApiWatchedDirList:
    title: "ApiWatchedDirList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiWatchedDir"
    description: "A list of watched directories."
  ApiYarnApplication:
    type: "object"
    properties:
      allocatedMB:
        type: "number"
        description: "The sum of memory in MB allocated to the application's running\
          \ containers\nAvailable since v12."
      allocatedVCores:
        type: "number"
        description: "The sum of virtual cores allocated to the application's running\
          \ containers\nAvailable since v12."
      runningContainers:
        type: "number"
        description: "The number of containers currently running for the application\n\
          Available since v12."
      applicationTags:
        type: "array"
        example: "null"
        description: "List of YARN application tags. Available since v12."
        items:
          type: "string"
      allocatedMemorySeconds:
        type: "number"
        description: "Allocated memory to the application in units of mb-secs.\nAvailable\
          \ since v12."
      allocatedVcoreSeconds:
        type: "number"
        description: "Allocated vcore-secs to the application. Available since v12."
      applicationId:
        type: "string"
        example: "null"
        description: "The application id."
      name:
        type: "string"
        example: "null"
        description: "The name of the application."
      startTime:
        type: "string"
        example: "null"
        description: "The time the application was submitted."
      endTime:
        type: "string"
        example: "null"
        description: "The time the application finished. If the application hasn't\
          \ finished\nthis will return null."
      user:
        type: "string"
        example: "null"
        description: "The user who submitted the application."
      pool:
        type: "string"
        example: "null"
        description: "The pool the application was submitted to."
      progress:
        type: "number"
        description: "The progress, as a percentage, the application has made. This\
          \ is only\nset if the application is currently executing."
      attributes:
        type: "object"
        example: "null"
        description: "A map of additional application attributes which is generated\
          \ by\nCloudera Manager. For example MR2 job counters are exposed as key/value\n\
          pairs here. For more details see the Cloudera Manager documentation."
        additionalProperties:
          type: "string"
      mr2AppInformation:
        description: ""
        $ref: "#/definitions/ApiMr2AppInformation"
      state:
        type: "string"
        example: "null"
        description: ""
      containerUsedMemorySeconds:
        type: "number"
        description: "Actual memory (in MB-secs) used by containers launched by the\
          \ YARN application.\nComputed by running a MapReduce job from Cloudera Service\
          \ Monitor to\naggregate YARN usage metrics.\nAvailable since v12."
      containerUsedMemoryMax:
        type: "number"
        description: "Maximum memory used by containers launched by the YARN application.\n\
          Computed by running a MapReduce job from Cloudera Service Monitor to\naggregate\
          \ YARN usage metrics\nAvailable since v16"
      containerUsedCpuSeconds:
        type: "number"
        description: "Actual CPU (in percent-secs) used by containers launched by\
          \ the YARN application.\nComputed by running a MapReduce job from Cloudera\
          \ Service Monitor to\naggregate YARN usage metrics.\nAvailable since v12."
      containerUsedVcoreSeconds:
        type: "number"
        description: "Actual VCore-secs used by containers launched by the YARN application.\n\
          Computed by running a MapReduce job from Cloudera Service Monitor to\naggregate\
          \ YARN usage metrics.\nAvailable since v12."
      containerAllocatedMemorySeconds:
        type: "number"
        description: "Total memory (in mb-secs) allocated to containers launched by\
          \ the YARN application.\nComputed by running a MapReduce job from Cloudera\
          \ Service Monitor to\naggregate YARN usage metrics.\nAvailable since v12."
      containerAllocatedVcoreSeconds:
        type: "number"
        description: "Total vcore-secs allocated to containers launched by the YARN\
          \ application.\nComputed by running a MapReduce job from Cloudera Service\
          \ Monitor to\naggregate YARN usage metrics.\nAvailable since v12."
    title: "ApiYarnApplication"
    description: "Represents a Yarn application"
    example:
      allocatedMB: 12345
      allocatedVCores: 12345
      runningContainers: 12345
      applicationTags:
      - "..."
      - "..."
      allocatedMemorySeconds: 12345
      allocatedVcoreSeconds: 12345
      applicationId: "..."
      name: "..."
      startTime: "..."
      endTime: "..."
      user: "..."
      pool: "..."
      progress: 12345.0
      attributes:
        property1: "..."
        property2: "..."
      mr2AppInformation:
        jobState: "..."
      state: "..."
      containerUsedMemorySeconds: 12345.0
      containerUsedMemoryMax: 12345.0
      containerUsedCpuSeconds: 12345.0
      containerUsedVcoreSeconds: 12345.0
      containerAllocatedMemorySeconds: 12345.0
      containerAllocatedVcoreSeconds: 12345.0
  ApiYarnApplicationAttribute:
    type: "object"
    properties:
      name:
        type: "string"
        example: "null"
        description: "The name of the attribute. This name can be used in filters,\
          \ for example\n'user' could be used in the filter 'user = root'."
      type:
        type: "string"
        example: "null"
        description: "The type of the attribute. Valid types are STRING, NUMBER, BOOLEAN,\
          \ BYTES,\nMILLISECONDS, BYTES_PER_SECOND, BYTE_SECONDS."
      displayName:
        type: "string"
        example: "null"
        description: "The display name for the attribute."
      supportsHistograms:
        type: "boolean"
        description: "Whether the Service Monitor can generate a histogram of the\
          \ distribution\nof the attribute across applications."
      description:
        type: "string"
        example: "null"
        description: "The description of the attribute."
    title: "ApiYarnApplicationAttribute"
    description: "Metadata about a YARN application attribute."
    example:
      name: "..."
      type: "..."
      displayName: "..."
      supportsHistograms: true
      description: "..."
  ApiYarnApplicationAttributeList:
    title: "ApiYarnApplicationAttributeList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiYarnApplicationAttribute"
    description: "The list of all attributes that are applicable to YARN applications."
  ApiYarnApplicationDiagnosticsCollectionArgs:
    type: "object"
    properties:
      applicationIds:
        type: "array"
        example: "null"
        description: "Id's of the applications whose diagnostics data has to be collected"
        items:
          type: "string"
      ticketNumber:
        type: "string"
        example: "null"
        description: "Ticket Number of the Cloudera Support Ticket"
      comments:
        type: "string"
        example: "null"
        description: "Comments to add to the support bundle"
    title: "ApiYarnApplicationDiagnosticsCollectionArgs"
    description: "Arguments used for collecting diagnostics data for Yarn applications"
    example:
      applicationIds:
      - "..."
      - "..."
      ticketNumber: "..."
      comments: "..."
  ApiYarnApplicationResponse:
    type: "object"
    properties:
      applications:
        type: "array"
        description: "The list of applications for this response."
        items:
          $ref: "#/definitions/ApiYarnApplication"
      warnings:
        type: "array"
        example: "null"
        description: "This list of warnings for this response."
        items:
          type: "string"
    title: "ApiYarnApplicationResponse"
    description: "The response contains a list of applications and warnings."
    example:
      applications:
      - allocatedMB: 12345
        allocatedVCores: 12345
        runningContainers: 12345
        applicationTags:
        - "..."
        - "..."
        allocatedMemorySeconds: 12345
        allocatedVcoreSeconds: 12345
        applicationId: "..."
        name: "..."
        startTime: "..."
        endTime: "..."
        user: "..."
        pool: "..."
        progress: 12345.0
        attributes:
          property1: "..."
          property2: "..."
        mr2AppInformation:
          jobState: "..."
        state: "..."
        containerUsedMemorySeconds: 12345.0
        containerUsedMemoryMax: 12345.0
        containerUsedCpuSeconds: 12345.0
        containerUsedVcoreSeconds: 12345.0
        containerAllocatedMemorySeconds: 12345.0
        containerAllocatedVcoreSeconds: 12345.0
      - allocatedMB: 12345
        allocatedVCores: 12345
        runningContainers: 12345
        applicationTags:
        - "..."
        - "..."
        allocatedMemorySeconds: 12345
        allocatedVcoreSeconds: 12345
        applicationId: "..."
        name: "..."
        startTime: "..."
        endTime: "..."
        user: "..."
        pool: "..."
        progress: 12345.0
        attributes:
          property1: "..."
          property2: "..."
        mr2AppInformation:
          jobState: "..."
        state: "..."
        containerUsedMemorySeconds: 12345.0
        containerUsedMemoryMax: 12345.0
        containerUsedCpuSeconds: 12345.0
        containerUsedVcoreSeconds: 12345.0
        containerAllocatedMemorySeconds: 12345.0
        containerAllocatedVcoreSeconds: 12345.0
      warnings:
      - "..."
      - "..."
  ApiYarnKillResponse:
    type: "object"
    properties:
      warning:
        type: "string"
        example: "null"
        description: "The warning, if any, from the call. We will return a warning\
          \ if the caller\nattempts to cancel an application that has already completed."
    title: "ApiYarnKillResponse"
    description: "The response from an Yarn kill application response."
    example:
      warning: "..."
  ApiYarnTenantUtilization:
    type: "object"
    properties:
      tenantName:
        type: "string"
        example: "null"
        description: "Name of the tenant."
      avgYarnCpuAllocation:
        type: "number"
        description: "Average number of VCores allocated to YARN applications of the\
          \ tenant."
      avgYarnCpuUtilization:
        type: "number"
        description: "Average number of VCores used by YARN applications of the tenant."
      avgYarnCpuUnusedCapacity:
        type: "number"
        description: "Average unused VCores of the tenant."
      avgYarnCpuSteadyFairShare:
        type: "number"
        description: "Average steady fair share VCores."
      avgYarnPoolAllocatedCpuDuringContention:
        type: "number"
        description: "Average allocated Vcores with pending containers."
      avgYarnPoolFairShareCpuDuringContention:
        type: "number"
        description: "Average fair share VCores with pending containers."
      avgYarnPoolSteadyFairShareCpuDuringContention:
        type: "number"
        description: "Average steady fair share VCores with pending containers."
      avgYarnContainerWaitRatio:
        type: "number"
        description: "Average percentage of pending containers for the pool during\
          \ periods of\ncontention."
      avgYarnMemoryAllocation:
        type: "number"
        description: "Average memory allocated to YARN applications of the tenant."
      avgYarnMemoryUtilization:
        type: "number"
        description: "Average memory used by YARN applications of the tenant."
      avgYarnMemoryUnusedCapacity:
        type: "number"
        description: "Average unused memory of the tenant."
      avgYarnMemorySteadyFairShare:
        type: "number"
        description: "Average steady fair share memory."
      avgYarnPoolAllocatedMemoryDuringContention:
        type: "number"
        description: "Average allocated memory with pending containers."
      avgYarnPoolFairShareMemoryDuringContention:
        type: "number"
        description: "Average fair share memory with pending containers."
      avgYarnPoolSteadyFairShareMemoryDuringContention:
        type: "number"
        description: "Average steady fair share memory with pending containers."
    title: "ApiYarnTenantUtilization"
    description: "Utilization report information of a tenant of Yarn application."
    example:
      tenantName: "..."
      avgYarnCpuAllocation: 12345.0
      avgYarnCpuUtilization: 12345.0
      avgYarnCpuUnusedCapacity: 12345.0
      avgYarnCpuSteadyFairShare: 12345.0
      avgYarnPoolAllocatedCpuDuringContention: 12345.0
      avgYarnPoolFairShareCpuDuringContention: 12345.0
      avgYarnPoolSteadyFairShareCpuDuringContention: 12345.0
      avgYarnContainerWaitRatio: 12345.0
      avgYarnMemoryAllocation: 12345.0
      avgYarnMemoryUtilization: 12345.0
      avgYarnMemoryUnusedCapacity: 12345.0
      avgYarnMemorySteadyFairShare: 12345.0
      avgYarnPoolAllocatedMemoryDuringContention: 12345.0
      avgYarnPoolFairShareMemoryDuringContention: 12345.0
      avgYarnPoolSteadyFairShareMemoryDuringContention: 12345.0
  ApiYarnTenantUtilizationList:
    title: "ApiYarnTenantUtilizationList"
    allOf:
    - $ref: "#/definitions/ApiListBase"
    - properties:
        items:
          type: "array"
          description: ""
          items:
            $ref: "#/definitions/ApiYarnTenantUtilization"
    description: "A list of yarn tenant utilization reports."
  ApiYarnUtilization:
    type: "object"
    properties:
      avgCpuUtilization:
        type: "number"
        description: "Average number of VCores used by YARN applications during the\
          \ report\nwindow."
      maxCpuUtilization:
        type: "number"
        description: "Maximum number of VCores used by YARN applications during the\
          \ report\nwindow."
      avgCpuDailyPeak:
        type: "number"
        description: "Average daily peak VCores used by YARN applications during the\
          \ report\nwindow. The number is computed by first finding the maximum resource\n\
          consumption per day and then taking their mean."
      maxCpuUtilizationTimestampMs:
        type: "number"
        description: "Timestamp corresponds to maximum number of VCores used by YARN\
          \ applications\nduring the report window."
      avgCpuUtilizationPercentage:
        type: "number"
        description: "Average percentage of VCores used by YARN applications during\
          \ the report\nwindow."
      maxCpuUtilizationPercentage:
        type: "number"
        description: "Maximum percentage of VCores used by YARN applications during\
          \ the report\nwindow."
      avgCpuDailyPeakPercentage:
        type: "number"
        description: "Average daily peak percentage of VCores used by YARN applications\
          \ during\nthe report window."
      avgMemoryUtilization:
        type: "number"
        description: "Average memory used by YARN applications during the report window."
      maxMemoryUtilization:
        type: "number"
        description: "Maximum memory used by YARN applications during the report window."
      avgMemoryDailyPeak:
        type: "number"
        description: "Average daily peak memory used by YARN applications during the\
          \ report\nwindow. The number is computed by first finding the maximum resource\n\
          consumption per day and then taking their mean."
      maxMemoryUtilizationTimestampMs:
        type: "number"
        description: "Timestamp corresponds to maximum memory used by YARN applications\
          \ during\nthe report window."
      avgMemoryUtilizationPercentage:
        type: "number"
        description: "Average percentage memory used by YARN applications during the\
          \ report window."
      maxMemoryUtilizationPercentage:
        type: "number"
        description: "Maximum percentage of memory used by YARN applications during\
          \ the report window."
      avgMemoryDailyPeakPercentage:
        type: "number"
        description: "Average daily peak percentage of memory used by YARN applications\
          \ during the report\nwindow."
      tenantUtilizations:
        description: "A list of tenant utilization reports."
        $ref: "#/definitions/ApiYarnTenantUtilizationList"
      errorMessage:
        type: "string"
        example: "null"
        description: "error message of utilization report."
    title: "ApiYarnUtilization"
    description: "Utilization report information of a Yarn application service."
    example:
      avgCpuUtilization: 12345.0
      maxCpuUtilization: 12345.0
      avgCpuDailyPeak: 12345.0
      maxCpuUtilizationTimestampMs: 12345
      avgCpuUtilizationPercentage: 12345.0
      maxCpuUtilizationPercentage: 12345.0
      avgCpuDailyPeakPercentage: 12345.0
      avgMemoryUtilization: 12345.0
      maxMemoryUtilization: 12345.0
      avgMemoryDailyPeak: 12345.0
      maxMemoryUtilizationTimestampMs: 12345
      avgMemoryUtilizationPercentage: 12345.0
      maxMemoryUtilizationPercentage: 12345.0
      avgMemoryDailyPeakPercentage: 12345.0
      tenantUtilizations:
        items:
        - tenantName: "..."
          avgYarnCpuAllocation: 12345.0
          avgYarnCpuUtilization: 12345.0
          avgYarnCpuUnusedCapacity: 12345.0
          avgYarnCpuSteadyFairShare: 12345.0
          avgYarnPoolAllocatedCpuDuringContention: 12345.0
          avgYarnPoolFairShareCpuDuringContention: 12345.0
          avgYarnPoolSteadyFairShareCpuDuringContention: 12345.0
          avgYarnContainerWaitRatio: 12345.0
          avgYarnMemoryAllocation: 12345.0
          avgYarnMemoryUtilization: 12345.0
          avgYarnMemoryUnusedCapacity: 12345.0
          avgYarnMemorySteadyFairShare: 12345.0
          avgYarnPoolAllocatedMemoryDuringContention: 12345.0
          avgYarnPoolFairShareMemoryDuringContention: 12345.0
          avgYarnPoolSteadyFairShareMemoryDuringContention: 12345.0
        - tenantName: "..."
          avgYarnCpuAllocation: 12345.0
          avgYarnCpuUtilization: 12345.0
          avgYarnCpuUnusedCapacity: 12345.0
          avgYarnCpuSteadyFairShare: 12345.0
          avgYarnPoolAllocatedCpuDuringContention: 12345.0
          avgYarnPoolFairShareCpuDuringContention: 12345.0
          avgYarnPoolSteadyFairShareCpuDuringContention: 12345.0
          avgYarnContainerWaitRatio: 12345.0
          avgYarnMemoryAllocation: 12345.0
          avgYarnMemoryUtilization: 12345.0
          avgYarnMemoryUnusedCapacity: 12345.0
          avgYarnMemorySteadyFairShare: 12345.0
          avgYarnPoolAllocatedMemoryDuringContention: 12345.0
          avgYarnPoolFairShareMemoryDuringContention: 12345.0
          avgYarnPoolSteadyFairShareMemoryDuringContention: 12345.0
      errorMessage: "..."
  BaseApiSshCmdArguments:
    type: "object"
    properties:
      sshPort:
        type: "number"
        example: 22.0
        description: "SSH port. If unset, defaults to 22."
      userName:
        type: "string"
        example: "null"
        description: "The username used to authenticate with the hosts.\nRoot access\
          \ to your hosts is required to install Cloudera packages.\nThe installer\
          \ will connect to your hosts via SSH and log in either\ndirectly as root\
          \ or as another user with password-less sudo\nprivileges to become root."
      password:
        type: "string"
        example: "null"
        description: "The password used to authenticate with the hosts.\nSpecify either\
          \ this or a private key.\nFor password-less login, use an empty string as\n\
          password."
      privateKey:
        type: "string"
        example: "null"
        description: "The private key to authenticate with the hosts.\nSpecify either\
          \ this or a password.\n<br>\nThe private key, if specified, needs to be\
          \ a\nstandard PEM-encoded key as a single string, with all line breaks\n\
          replaced with the line-feed control character '\\n'.\n<br>\nA value will\
          \ typically look like the following string:\n<br>\n-----BEGIN RSA PRIVATE\
          \ KEY-----\\n[base-64 encoded key]\\n-----END RSA PRIVATE KEY-----\n<br>"
      passphrase:
        type: "string"
        example: "null"
        description: "The passphrase associated with the private key\nused to authenticate\
          \ with the hosts (optional)."
    title: "BaseApiSshCmdArguments"
    description: "Contains common arguments for commands which require SSH'ing into\
      \ one or more hosts."
    example:
      sshPort: 22
      userName: "..."
      password: "..."
      privateKey: "..."
      passphrase: "..."
  HTTPMethod:
    type: "string"
    title: "HTTPMethod"
    description: ""
    enum:
    - "GET"
    - "POST"
    - "PUT"
    - "DELETE"
  HaStatus:
    type: "string"
    title: "HaStatus"
    description: ""
    enum:
    - "ACTIVE"
    - "STANDBY"
    - "UNKNOWN"
  PerfInspectorPolicyType:
    type: "string"
    title: "PerfInspectorPolicyType"
    description: "Enum to pick the type of Performance Inspector Diagnostics to run"
    enum:
    - "FULL"
    - "QUICK"
  ReplicationOption:
    type: "string"
    title: "ReplicationOption"
    description: "This will decide how cloud replication will take place"
    enum:
    - "METADATA_ONLY"
    - "METADATA_AND_DATA"
    - "KEEP_DATA_IN_CLOUD"
  ReplicationStrategy:
    type: "string"
    title: "ReplicationStrategy"
    description: "The strategy for distributing the file replication tasks among the\
      \ mappers\nof the MR job associated with a replication."
    enum:
    - "STATIC"
    - "DYNAMIC"
  ScmDbType:
    type: "string"
    title: "ScmDbType"
    description: "Enum for Cloudera Manager DB type.\nNote that DERBY and SQLITE3\
      \ are not supported DBs"
    enum:
    - "MYSQL"
    - "POSTGRESQL"
    - "HSQL"
    - "ORACLE"
    - "DERBY"
    - "SQLITE3"
  ShutdownReadinessState:
    type: "string"
    title: "ShutdownReadinessState"
    description: "Enum for Cloudera Manager shutdown readiness state."
    enum:
    - "READY"
    - "NOT_READY"
  Storage:
    type: "string"
    title: "Storage"
    description: ""
    enum:
    - "LOCAL"
    - "REMOTE_S3"
  ValidationState:
    type: "string"
    title: "ValidationState"
    description: ""
    enum:
    - "OK"
    - "WARNING"
    - "ERROR"
  ZooKeeperServerMode:
    type: "string"
    title: "ZooKeeperServerMode"
    description: "The state of the Zookeeper server."
    enum:
    - "STANDALONE"
    - "REPLICATED_FOLLOWER"
    - "REPLICATED_LEADER"
    - "REPLICATED_LEADER_ELECTION"
    - "REPLICATED_OBSERVER"
    - "UNKNOWN"
